// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mytag.proto

package tagpro

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClassName int32

const (
	ClassName_class1 ClassName = 0
	ClassName_class2 ClassName = 1
	ClassName_class3 ClassName = 2
)

var ClassName_name = map[int32]string{
	0: "class1",
	1: "class2",
	2: "class3",
}

var ClassName_value = map[string]int32{
	"class1": 0,
	"class2": 1,
	"class3": 2,
}

func (x ClassName) String() string {
	return proto.EnumName(ClassName_name, int32(x))
}

func (ClassName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0689c567f3ee3eba, []int{0}
}

type Student struct {
	StuName              string    `protobuf:"bytes,1,opt,name=stu_name,json=stuName,proto3" json:"stu_name,omitempty" bson:"StuName"`
	StuAge               int32     `protobuf:"varint,2,opt,name=stu_age,json=stuAge,proto3" json:"stu_age,omitempty" bson:"StuAge"`
	Address              string    `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty" bson:"Address"`
	Cn                   ClassName `protobuf:"varint,4,opt,name=cn,proto3,enum=tagpro.ClassName" json:"CN"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Student) Reset()         { *m = Student{} }
func (m *Student) String() string { return proto.CompactTextString(m) }
func (*Student) ProtoMessage()    {}
func (*Student) Descriptor() ([]byte, []int) {
	return fileDescriptor_0689c567f3ee3eba, []int{0}
}
func (m *Student) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Student) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Student.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Student) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Student.Merge(m, src)
}
func (m *Student) XXX_Size() int {
	return m.Size()
}
func (m *Student) XXX_DiscardUnknown() {
	xxx_messageInfo_Student.DiscardUnknown(m)
}

var xxx_messageInfo_Student proto.InternalMessageInfo

func (m *Student) GetStuName() string {
	if m != nil {
		return m.StuName
	}
	return ""
}

func (m *Student) GetStuAge() int32 {
	if m != nil {
		return m.StuAge
	}
	return 0
}

func (m *Student) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Student) GetCn() ClassName {
	if m != nil {
		return m.Cn
	}
	return ClassName_class1
}

type Students struct {
	Person               []*Student `protobuf:"bytes,1,rep,name=person,proto3" json:"person,omitempty"`
	School               string     `protobuf:"bytes,2,opt,name=school,proto3" json:"school,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Students) Reset()         { *m = Students{} }
func (m *Students) String() string { return proto.CompactTextString(m) }
func (*Students) ProtoMessage()    {}
func (*Students) Descriptor() ([]byte, []int) {
	return fileDescriptor_0689c567f3ee3eba, []int{1}
}
func (m *Students) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Students) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Students.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Students) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Students.Merge(m, src)
}
func (m *Students) XXX_Size() int {
	return m.Size()
}
func (m *Students) XXX_DiscardUnknown() {
	xxx_messageInfo_Students.DiscardUnknown(m)
}

var xxx_messageInfo_Students proto.InternalMessageInfo

func (m *Students) GetPerson() []*Student {
	if m != nil {
		return m.Person
	}
	return nil
}

func (m *Students) GetSchool() string {
	if m != nil {
		return m.School
	}
	return ""
}

func init() {
	proto.RegisterEnum("tagpro.ClassName", ClassName_name, ClassName_value)
	proto.RegisterType((*Student)(nil), "tagpro.Student")
	proto.RegisterType((*Students)(nil), "tagpro.Students")
}

func init() { proto.RegisterFile("mytag.proto", fileDescriptor_0689c567f3ee3eba) }

var fileDescriptor_0689c567f3ee3eba = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x3f, 0x4f, 0x02, 0x31,
	0x18, 0xc6, 0xed, 0xa1, 0x05, 0x5e, 0x22, 0x7f, 0x1a, 0x63, 0x2e, 0x26, 0xc2, 0xa5, 0x8b, 0x27,
	0xd1, 0x23, 0xc2, 0xa6, 0x13, 0xc7, 0x68, 0xc2, 0x50, 0x36, 0x17, 0x52, 0x8e, 0xa6, 0x0e, 0xd0,
	0x92, 0x6b, 0x19, 0xfc, 0x70, 0xee, 0x8e, 0x7e, 0x02, 0x62, 0x6e, 0x74, 0xe4, 0x13, 0x98, 0xbb,
	0x1e, 0x37, 0x38, 0xf5, 0xf7, 0xf6, 0x79, 0xda, 0xe7, 0xc9, 0x0b, 0xad, 0xed, 0x87, 0xe5, 0x32,
	0xda, 0xa5, 0xda, 0x6a, 0x82, 0x2d, 0x97, 0xbb, 0x54, 0xdf, 0x5c, 0x49, 0x2d, 0x75, 0x71, 0x35,
	0xca, 0xc9, 0xa9, 0xf4, 0x13, 0x41, 0x7d, 0x61, 0xf7, 0x6b, 0xa1, 0x2c, 0x79, 0x84, 0x86, 0xb1,
	0xfb, 0xa5, 0xe2, 0x5b, 0xe1, 0xa3, 0x00, 0x85, 0xcd, 0x98, 0x1c, 0x0f, 0x83, 0xf6, 0xca, 0x68,
	0xf5, 0x4c, 0x17, 0x76, 0x3f, 0xe7, 0x5b, 0x41, 0x59, 0xdd, 0x38, 0x22, 0x43, 0xc8, 0x71, 0xc9,
	0xa5, 0xf0, 0xbd, 0x00, 0x85, 0x17, 0x71, 0xef, 0x78, 0x18, 0x5c, 0x56, 0xee, 0xa9, 0x14, 0x94,
	0x61, 0x53, 0x00, 0x79, 0x80, 0x3a, 0x5f, 0xaf, 0x53, 0x61, 0x8c, 0x5f, 0xfb, 0xff, 0xf3, 0xd4,
	0x09, 0x94, 0x9d, 0x2c, 0xe4, 0x1e, 0xbc, 0x44, 0xf9, 0xe7, 0x01, 0x0a, 0xdb, 0xe3, 0x5e, 0xe4,
	0xfa, 0x47, 0xb3, 0x0d, 0x37, 0x26, 0x0f, 0x8e, 0xf1, 0xef, 0x61, 0xe0, 0xcd, 0xe6, 0xcc, 0x4b,
	0x14, 0x7d, 0x85, 0x46, 0x59, 0xdf, 0x90, 0x3b, 0xc0, 0x3b, 0x91, 0x1a, 0xad, 0x7c, 0x14, 0xd4,
	0xc2, 0xd6, 0xb8, 0x73, 0x7a, 0x5a, 0x3a, 0x58, 0x29, 0x93, 0x6b, 0xc0, 0x26, 0x79, 0xd7, 0x7a,
	0x53, 0x14, 0x6f, 0xb2, 0x72, 0x1a, 0x8e, 0xa0, 0x59, 0xa5, 0x10, 0x00, 0x9c, 0xe4, 0xc3, 0x53,
	0xf7, 0xac, 0xe2, 0x71, 0x17, 0x55, 0x3c, 0xe9, 0x7a, 0xf1, 0xed, 0x57, 0xd6, 0x47, 0xdf, 0x59,
	0x1f, 0xfd, 0x64, 0x7d, 0xf4, 0xd6, 0x89, 0x46, 0x2e, 0xf0, 0xc5, 0x1d, 0x2b, 0x5c, 0xec, 0x78,
	0xf2, 0x17, 0x00, 0x00, 0xff, 0xff, 0x13, 0xc7, 0x8d, 0x29, 0x90, 0x01, 0x00, 0x00,
}

func (m *Student) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Student) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Student) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cn != 0 {
		i = encodeVarintMytag(dAtA, i, uint64(m.Cn))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMytag(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StuAge != 0 {
		i = encodeVarintMytag(dAtA, i, uint64(m.StuAge))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StuName) > 0 {
		i -= len(m.StuName)
		copy(dAtA[i:], m.StuName)
		i = encodeVarintMytag(dAtA, i, uint64(len(m.StuName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Students) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Students) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Students) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.School) > 0 {
		i -= len(m.School)
		copy(dAtA[i:], m.School)
		i = encodeVarintMytag(dAtA, i, uint64(len(m.School)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Person) > 0 {
		for iNdEx := len(m.Person) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Person[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMytag(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMytag(dAtA []byte, offset int, v uint64) int {
	offset -= sovMytag(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Student) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StuName)
	if l > 0 {
		n += 1 + l + sovMytag(uint64(l))
	}
	if m.StuAge != 0 {
		n += 1 + sovMytag(uint64(m.StuAge))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMytag(uint64(l))
	}
	if m.Cn != 0 {
		n += 1 + sovMytag(uint64(m.Cn))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Students) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Person) > 0 {
		for _, e := range m.Person {
			l = e.Size()
			n += 1 + l + sovMytag(uint64(l))
		}
	}
	l = len(m.School)
	if l > 0 {
		n += 1 + l + sovMytag(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMytag(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMytag(x uint64) (n int) {
	return sovMytag(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Student) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMytag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Student: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Student: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StuName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMytag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMytag
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMytag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StuName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StuAge", wireType)
			}
			m.StuAge = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMytag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StuAge |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMytag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMytag
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMytag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cn", wireType)
			}
			m.Cn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMytag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cn |= ClassName(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMytag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMytag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Students) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMytag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Students: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Students: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Person", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMytag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMytag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMytag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Person = append(m.Person, &Student{})
			if err := m.Person[len(m.Person)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field School", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMytag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMytag
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMytag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.School = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMytag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMytag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMytag(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMytag
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMytag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMytag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMytag
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMytag
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMytag
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMytag        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMytag          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMytag = fmt.Errorf("proto: unexpected end of group")
)
