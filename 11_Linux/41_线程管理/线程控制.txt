
概念
1. 线程是被系统独立调度和分派的基本单位，一个标准的线程由线程 ID, 当前指令指针(PC)，寄存器集合和
   堆栈组成。
2. 一个线程可以创建和撤销另一个线程，同一进程中的多个线程之间可以并发执行。
3. 由于线程之间的相互制约，致使线程在运行中呈现出间断性。
4. 线程也有就绪、阻塞和运行三种基本状态。
5. 同一进程的多个线程之间共享 Text Segment、Data Segment、全局变量、文件描述符表、每种信号的处理
   方式(SIG_IGN、SIG_DFL或者自定义的信号处理函数)、当前工作目录、用户 id 和组 id。
6. 同一进程的各线程之间各有一份: 线程 id、上下文(包括各种寄存器的值、程序计数器和栈指针)、栈空间
   、errno 变量、信号屏蔽字、调度优先级。

线程的标识
1. 线程 ID 用 pthread_t 数据类型表示，在可移植操作系统中不能把它当作整数处理。如果要对两个线程 ID 
   进行比较，应使用 phtread_equal() 函数。
2. 操作函数
	#include <pthread.h>
	int pthread_equal(pthread_t tid1, pthread_t tid2);
   当两个线程的 ID 相等时返回非 0 值，否则返回 0。
	#include <pthread.h>
	int pthread_t pthread_self();
   返回调用该函数的（也即当前）线程 ID。

线程的创建
1. 
	#include <pthread.h>
	int pthread_create(pthread_t *id, const pthread_attr_t *attr, 
						void *(*start_routine)(void *), void *arg);
   返回值：成功返回 0，失败返回错误号 errno。pthread 库的函数都是通过返回值返回错误号。
2. 在一个线程中调用 pthread_create() 创建新的线程后，当前线程从 pthread_create() 返回继续往下执行，
   而新的线程所执行的代码由传给 pthread_create 的函数指针 start_routine 决定。
3. 其他线程可以调用 pthread_join() 得到 start_routine 的返回值。

线程的终止
1. 有三种方式
   (1) 从线程函数 return。这种方法对主线程不适用，从 main 函数 return 相当于调用 exit。
   (2) 一个线程可以调用 pthread_cancel 终止同一进程中的另一个线程。
   (3) 线程可以调用 pthread_exit 终止自己。
2. pthread_exit 函数
	#include <pthread.h>
	void pthread_exit(void *value_ptr);
   参数 value_ptr 是 void* 类型，指向线程函数的返回值，其他线程可以调用 pthread_join 获取这个指针。
   phtread_exit 或者 start_routine 返回的指针所指向的内存单元必须是全局的或者是用动态分配的。
3. phtread_join 函数
	#include <pthread.h>
	int pthread_join(pthread_t thread, void **value_ptr);
   成功返回 0，失败返回错误号。
   调用该函数的线程将挂起等待，直到 id 为 thread 的线程终止。
   thread 线程以不同的方法终止，通过 pthread_join 得到的终止状态是不同的:
   (1) 如果 thread 线程通过 return 返回，value_ptr 所指向的单元里存放的是 thread 线程函数的返回值。
   (2) 如果 thread 线程被别的线程调用 pthread_cancel 异常终止掉， value_ptr 存放的的常数 PHTEAD_CANCELED。
   (3) 如果 thread 线程是自己调用 pthread_exit 终止的，value_ptr 所指向的单元存放的是传给 
   phtread_exit 的参数。
   
互斥量
1. 互斥量从本质上说是一把锁，在访问共享变量前对互斥量进行加锁，在访问完成后释放互斥量上的锁。对互斥量进行
   加锁后，任何其他试图再次对互斥量加锁的进程（线程）将会被阻塞直到当前进程（线程）释放该互斥锁。
2. 互斥量 mutex 用 pthread_mutex_t 类型的变量表示，可以初始化和销毁。
	#include <pthread.h>
	int pthread_mutex_destroy(pthread_mutex_t *mutex);
	int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr);
	pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
   返回值：成功返回 0，失败返回错误号。
   用 pthread_mutex_init 函数初始化的 mutex 可以用 pthread_mutex_destroy 销毁。如果 mutex 变量是静态分配的
   （全局变量或static变量），也可以用宏定义 PTHREAD_MUTEX_INITIALIZER 来初始化，相当于用 pthread_mutex_init
   初始化并且 attr 参数为 NULL。
3. 加锁和解锁操作
	#include <pthread.h>
	int pthread_mutex_lock(phtread_mutex_t *mutex);
	int pthread_mutex_trylock(pthread_mutex_t *mutex);
	int pthread_mutex_unlock(pthread_mutex_t *mutex);
   返回值：成功返回 0，失败返回错误号。
   一个线程可以调用 phthread_mutex_lock 获得 mutex，如果这时另一个线程已经调用 pthread_mutex_lock 获得了该
   mutex, 则当前线程需要挂起等待，直到另一个线程调用 pthread_mutex_unlock 释放 mutex, 当前线程被唤醒，才能
   获得该 mutex 并继续执行。
   如果一个线程既想获得锁，又不想挂起等待，可以调用 pthread_mutex_trylock, 如果 mutex 已经被另一个线程获得
   ，则这个函数会失败返回 EBUSY, 而不会使线程挂起等待。

