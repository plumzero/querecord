
Linux C 中进程的相关函数
	函数名				功能
	getpid				获得当前进程的进程号
	getppid				获得当前进程的父进程号
	exec 族函数			在进程中启动另一个进程执行
	system				在进程中开始另一个进程
	fork				从已存在进程中复制一个新进程
	sleep				让进程暂停执行一段时间
	exit				终止进程
	_exit				终止进程
	wait				暂停父进程，等待子进程结束
	waitpid				暂停父进程，等待子进程结束

获取进程号	
#include <unistd.h>
pid_t getpid();
pid_t getppid();

进程创建 exec 函数
#include <unistd.h>
int execl(const char *path, const char *arg, ...);
int execlp(const char *file, const char *arg, ...);
int execle(const char *path, const char *arg, ..., char *const envp[]);
int execv(const char *path, char *const argv[]);
int execvp(const char *file, char *const argv[]);
int execve(const char *path, char *const argv[], char *const envp[]);
1. 这六个函数中只有 execve 是真正的系统调用函数，其它五个都是库函数，最终都会调用 execve。
2. 以 execve 为例，参数 path 代表一个文件路径，即要被执行的程序的路径； argv 是一个数组指针，通过该数组指针向程序
   传递命令行参数；envp 向程序传递了环境变量。
3. 在使用 exec 函数族的时候，一定要加上错误判断语句，因为 exec 很容易执行失败，其中最常见的原因是：找不到文件路径。
4. 当进程调用一种 exec 函数时，该进程的用户空间代码和数据完全被新程序替换，从新程序的启动例程开始执行。因此，一般
   情况下，在运行 exec 函数后是不会返回原进程的，只有在错误时才会返回 -1。
5. 程序示例
	char *str[] = { "ls", NULL };
	for (int i = 0; i < 100; i++)
		if (execve("/bin/ls", str, NULL) < 0) {
			printf("execve error!");
		}
   虽然程序中要求执行 100 次，但实际只执行 1 次。

进程创建 system 函数
#include <stdlib.h>
int system(const char *string);
1. 程序员可以通过使用它在程序中调用系统提供的各种命令。
2. system() 会调用 fork() 产生子进程，由子进程来调用 /bin/sh -c string 来执行参数 string 字符串所代表的命令，此命
   令执行完后随即返回原调用的进程。
3. 在调用 system() 期间 SIGCHLD 信号会被暂时搁置， SIGINT 和 SIGQUIT 信号则会被忽略。
4. 返回值
	= -1: 出现错误
	= 0 : 调用成功但是没有出现子进程
	> 0 : 成功退出的子进程的 id
5. 程序示例
	int t
	for (int i = 0; i < 100; i++) {
		t = system("ls -l");
		if (t <= 0 || (t == 127 && errno != 0))
		printf("system error!");
	}
   程序执行中会忽略 Control + C 中断直至执行 100 次完毕。

进程创建 fork 函数
#include <sys/types.h>
#include <unistd.h>
pid_t fork(void);
1. fork() 的作用是根据一个现有的进程复制出一个新进程，原来的进程称为父进程，新进程称为子进程。
2. 用 fork() 创建子进程后，子进程会复制父进程的数据和堆栈空间，并继承父进程的用户代码、组代码、环境变量、已经打开
   的文件代码、工作目录及资源限制等，但是子进程和父进程使用不同的内存空间。
3. 进程调用 fork() 后，系统会创建一个子进程。当 fork() 调用失败时返回 -1。对于父进程 fork() 返回子进程 ID ，而对于
   fork() 子进程返回 0。根据这个返回值来区分父子进程。
4. 一旦子进程被创建，父子进程一起从 fork() 处继续执行，相互竞争系统的资源。
5. 程序示例
	pid_t p;
	int n;
	p = fork();
	if (p < 0) {
		printf("fork failed");
		exit(1);
	}
	if (p == 0) {
		printf("this is the child\n");
		n = 6;
	} else {
		printf("this is the parent\n");
		n = 3;
	}
	
终止进程
1. Linux C 程序终止进程主要用 exit 和 _exit 函数。二者区别如下:
   exit(): 在执行该函数时，进程会检查文件打开情况，清理 I/O 缓存，如果缓存中有数据，就会将它们写入相应的文件，这样
   就防止了文件数据的丢失，然后终止进程。
   _exit():在执行该函数时，并不清理标准输入输出缓存，而是直接清除内存空间，当然也就把文件缓存中尚未写入文件的数据给
   销毁了。
   exit() 需要的头文件是 stdlib.h, 而 _exit() 需要的头文件是 unistd.h。
2. 使用 exit() 函数更加安全。
3. 一般情况下，exit(0) 表示正常退出，exit(1)，exit(-1) 为异常退出。

僵尸进程
1. 僵尸进程是指已终止运行，但尚未被清除的进程。当使用 fork() 函数创建子进程时，由于子进程有可能比父进程晚终止，当父
   进程终止后，子进程还没终止，子进程就成为了僵尸进程。
2. 僵尸进程 是一个运行完毕的进程，所有资源都已经释放了，除了它的进程表项。
3. 为了避免僵尸进程，父进程通过 wait 和 waitpid 等函数等待子进程结束，这会导致父进程挂起。

wait 函数
#include <sys/types.h>
#include <sys/wait.h>
pid_t wait(int *status);
1. 进程一旦调用了 wait 就立即阻塞自己，如果该父进程没有子进程或者其子进程已经终止，则 wait 就立即返回，否则就会一直
   阻塞在这里，直到有一个子进程出现为止。
2. 参数 status 用来保存被收集进程退出时的一些状态。如果对这个子进程是如何死掉的毫不在意，只想把这个僵尸进程消灭掉，
   就可以设定这个参数为 NULL。
	pid = wait(NULL);
3. 如果成功，wait 会返回被收集的子进程的进程 ID，如果调用进程没有子进程，调用就会失败，此时 wait 会返回 -1,同时 errno
   被置为 ECHILD。
4. wait 函数是 waitpid 函数的一个特例。

waitpid 函数
#include <sys/types.h>
#include <sys/wait.h>
pid_t waitpid(pid_t pid, int *status, int options);
1. 与 wait 不同，waitpid 可以通过设置一个选项来设置为非阻塞，另外 waitpid 并不是等待第一个结束的进程，而是等待参数中
   pid 指定的进程。

clone 系统调用
1. clone() 是 Linux 系统特有的系统调用，在 Linux 系统中， fork 和 pthread 都是基于 clone 实现的。
2. clone 系统调用的形式如下:
	int clone(int(*fn)(void * arg), void *stack, int flag, void *arg);
   参数 fn 是轻进程所执行的函数；stack 是轻进程所使用的栈，flag 是 CLONE_VM、CLONE_FS、CLONE_FILES、CLONE_SIGHAND、
   CLONE_PID 的组合，arg 是调用过程的对应参数。
3. clone() 的关键是 flag 的设定，其中 CLONE_VM 表示子进程共享父进程的文件系统，CLONE_SIGHAND 表示子进程共享父进程的消
   息处理机制，CLONE_PID 是指子进程继承父进程的 id 号。
