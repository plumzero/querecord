// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: struct.proto

#include "struct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace mam {
class TradeOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeOrder> _instance;
} _TradeOrder_default_instance_;
}  // namespace mam
static void InitDefaultsscc_info_TradeOrder_struct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_TradeOrder_default_instance_;
    new (ptr) ::mam::TradeOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::TradeOrder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradeOrder_struct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TradeOrder_struct_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_struct_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_struct_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_struct_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_struct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, reqid_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, orderid_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, symbol_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, ordertype_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, tradetype_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, orderprice_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, ordervolume_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, ntime_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, accountid_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, tag_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, timeout_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, force_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, createtime_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, submittime_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, accepttime_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, closetime_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, dealprice_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, dealvolume_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, status_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, errcode_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, errdetail_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, tradedvolume_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, fixing_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, traderid_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, origintype_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, pricetype_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, matchedamount_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, delay_receive_insert_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, delay_insert_oninsert_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, delay_insert_accept_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, delay_accept_match_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mam::TradeOrder)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_TradeOrder_default_instance_),
};

const char descriptor_table_protodef_struct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014struct.proto\022\003mam\"\266\005\n\nTradeOrder\022\r\n\005re"
  "qId\030\001 \001(\005\022\017\n\007orderId\030\002 \001(\t\022\016\n\006symbol\030\003 \001"
  "(\t\022\021\n\torderType\030\004 \001(\005\022\021\n\ttradeType\030\005 \001(\005"
  "\022\022\n\norderPrice\030\006 \001(\005\022\023\n\013orderVolume\030\007 \001("
  "\005\022\r\n\005nTime\030\010 \001(\005\022\021\n\taccountId\030\t \001(\005\022\013\n\003t"
  "ag\030\n \001(\t\022\017\n\007timeout\030\013 \001(\005\022\r\n\005force\030\014 \001(\010"
  "\022\022\n\ncreateTime\030\r \001(\003\022\022\n\nsubmitTime\030\016 \001(\003"
  "\022\022\n\nacceptTime\030\017 \001(\003\022\021\n\tcloseTime\030\020 \001(\003\022"
  "\021\n\tdealPrice\030\021 \001(\005\022\022\n\ndealVolume\030\022 \001(\005\022$"
  "\n\006status\030\023 \001(\0162\024.mam.OrderStatusType\022)\n\007"
  "errCode\030\024 \001(\0162\030.mam.TradeOrderErrorCode\022"
  "\021\n\terrDetail\030\025 \001(\t\022\024\n\014tradedVolume\030\026 \001(\005"
  "\022\016\n\006fixing\030\027 \001(\005\022\020\n\010traderId\030\030 \001(\t\022\022\n\nor"
  "iginType\030\031 \001(\005\022\'\n\tpriceType\030\032 \001(\0162\024.mam."
  "ExtendPriceType\022\025\n\rmatchedAmount\030\033 \001(\003\022\034"
  "\n\024Delay_Receive_Insert\030< \001(\005\022\035\n\025Delay_In"
  "sert_OnInsert\030= \001(\005\022\033\n\023Delay_Insert_Acce"
  "pt\030> \001(\005\022\032\n\022Delay_Accept_Match\030\? \001(\005*\261\001\n"
  "\017OrderStatusType\022\024\n\020OrderStatus_None\020\000\022\030"
  "\n\024OrderStatus_Accepted\020\001\022\032\n\026OrderStatus_"
  "TotalMatch\020\002\022\036\n\032OrderStatus_PartialRemov"
  "ed\020\003\022\034\n\030OrderStatus_TotalRemoved\020\004\022\024\n\020Or"
  "derStatus_Fail\020\005*\301\001\n\023TradeOrderErrorCode"
  "\022\023\n\017JErrorType_None\020\000\022\037\n\033JErrorType_TooH"
  "ighFrequency\020d\022\034\n\030JErrorType_OrderNotFou"
  "nd\020e\022\035\n\031JErrorType_NotTradingTime\020f\022\034\n\030J"
  "ErrorType_OverHighOrLow\020g\022\031\n\025JErrorType_"
  "InvalidVol\020h*S\n\017ExtendPriceType\022\014\n\010EPT_N"
  "one\020\000\022\r\n\tEPT_Fixed\020\001\022\021\n\rEPT_HighLimit\020\002\022"
  "\020\n\014EPT_LowLimit\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_struct_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_struct_2eproto_sccs[1] = {
  &scc_info_TradeOrder_struct_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_struct_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_struct_2eproto = {
  false, false, descriptor_table_protodef_struct_2eproto, "struct.proto", 1185,
  &descriptor_table_struct_2eproto_once, descriptor_table_struct_2eproto_sccs, descriptor_table_struct_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_struct_2eproto::offsets,
  file_level_metadata_struct_2eproto, 1, file_level_enum_descriptors_struct_2eproto, file_level_service_descriptors_struct_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_struct_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_struct_2eproto)), true);
namespace mam {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderStatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_struct_2eproto);
  return file_level_enum_descriptors_struct_2eproto[0];
}
bool OrderStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeOrderErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_struct_2eproto);
  return file_level_enum_descriptors_struct_2eproto[1];
}
bool TradeOrderErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExtendPriceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_struct_2eproto);
  return file_level_enum_descriptors_struct_2eproto[2];
}
bool ExtendPriceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TradeOrder::InitAsDefaultInstance() {
}
class TradeOrder::_Internal {
 public:
};

TradeOrder::TradeOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.TradeOrder)
}
TradeOrder::TradeOrder(const TradeOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_orderid(),
      GetArena());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  errdetail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errdetail().empty()) {
    errdetail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_errdetail(),
      GetArena());
  }
  traderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_traderid().empty()) {
    traderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_traderid(),
      GetArena());
  }
  ::memcpy(&reqid_, &from.reqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_insert_accept_) -
    reinterpret_cast<char*>(&reqid_)) + sizeof(delay_insert_accept_));
  // @@protoc_insertion_point(copy_constructor:mam.TradeOrder)
}

void TradeOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeOrder_struct_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errdetail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  traderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&reqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_insert_accept_) -
      reinterpret_cast<char*>(&reqid_)) + sizeof(delay_insert_accept_));
}

TradeOrder::~TradeOrder() {
  // @@protoc_insertion_point(destructor:mam.TradeOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradeOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errdetail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  traderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TradeOrder::ArenaDtor(void* object) {
  TradeOrder* _this = reinterpret_cast< TradeOrder* >(object);
  (void)_this;
}
void TradeOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradeOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeOrder& TradeOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeOrder_struct_2eproto.base);
  return *internal_default_instance();
}


void TradeOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.TradeOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  errdetail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  traderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&reqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_insert_accept_) -
      reinterpret_cast<char*>(&reqid_)) + sizeof(delay_insert_accept_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 reqId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string orderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.TradeOrder.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.TradeOrder.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 orderType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ordertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tradeType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tradetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 orderPrice = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          orderprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 orderVolume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ordervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ntime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 accountId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.TradeOrder.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timeout = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool force = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 createTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 submitTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          submittime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 acceptTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          accepttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 closeTime = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          closetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dealPrice = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          dealprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dealVolume = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          dealvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mam.OrderStatusType status = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::mam::OrderStatusType>(val));
        } else goto handle_unusual;
        continue;
      // .mam.TradeOrderErrorCode errCode = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_errcode(static_cast<::mam::TradeOrderErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // string errDetail = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_errdetail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.TradeOrder.errDetail"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tradedVolume = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          tradedvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fixing = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          fixing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string traderId = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_traderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.TradeOrder.traderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 originType = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          origintype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mam.ExtendPriceType priceType = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pricetype(static_cast<::mam::ExtendPriceType>(val));
        } else goto handle_unusual;
        continue;
      // int64 matchedAmount = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          matchedamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Delay_Receive_Insert = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          delay_receive_insert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Delay_Insert_OnInsert = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          delay_insert_oninsert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Delay_Insert_Accept = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          delay_insert_accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Delay_Accept_Match = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          delay_accept_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.TradeOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reqId = 1;
  if (this->reqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reqid(), target);
  }

  // string orderId = 2;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.TradeOrder.orderId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_orderid(), target);
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.TradeOrder.symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_symbol(), target);
  }

  // int32 orderType = 4;
  if (this->ordertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ordertype(), target);
  }

  // int32 tradeType = 5;
  if (this->tradetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_tradetype(), target);
  }

  // int32 orderPrice = 6;
  if (this->orderprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_orderprice(), target);
  }

  // int32 orderVolume = 7;
  if (this->ordervolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ordervolume(), target);
  }

  // int32 nTime = 8;
  if (this->ntime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_ntime(), target);
  }

  // int32 accountId = 9;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_accountid(), target);
  }

  // string tag = 10;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.TradeOrder.tag");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_tag(), target);
  }

  // int32 timeout = 11;
  if (this->timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_timeout(), target);
  }

  // bool force = 12;
  if (this->force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_force(), target);
  }

  // int64 createTime = 13;
  if (this->createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_createtime(), target);
  }

  // int64 submitTime = 14;
  if (this->submittime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_submittime(), target);
  }

  // int64 acceptTime = 15;
  if (this->accepttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_accepttime(), target);
  }

  // int64 closeTime = 16;
  if (this->closetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_closetime(), target);
  }

  // int32 dealPrice = 17;
  if (this->dealprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_dealprice(), target);
  }

  // int32 dealVolume = 18;
  if (this->dealvolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_dealvolume(), target);
  }

  // .mam.OrderStatusType status = 19;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_status(), target);
  }

  // .mam.TradeOrderErrorCode errCode = 20;
  if (this->errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_errcode(), target);
  }

  // string errDetail = 21;
  if (this->errdetail().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errdetail().data(), static_cast<int>(this->_internal_errdetail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.TradeOrder.errDetail");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_errdetail(), target);
  }

  // int32 tradedVolume = 22;
  if (this->tradedvolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_tradedvolume(), target);
  }

  // int32 fixing = 23;
  if (this->fixing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_fixing(), target);
  }

  // string traderId = 24;
  if (this->traderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_traderid().data(), static_cast<int>(this->_internal_traderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.TradeOrder.traderId");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_traderid(), target);
  }

  // int32 originType = 25;
  if (this->origintype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_origintype(), target);
  }

  // .mam.ExtendPriceType priceType = 26;
  if (this->pricetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      26, this->_internal_pricetype(), target);
  }

  // int64 matchedAmount = 27;
  if (this->matchedamount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(27, this->_internal_matchedamount(), target);
  }

  // int32 Delay_Receive_Insert = 60;
  if (this->delay_receive_insert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(60, this->_internal_delay_receive_insert(), target);
  }

  // int32 Delay_Insert_OnInsert = 61;
  if (this->delay_insert_oninsert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(61, this->_internal_delay_insert_oninsert(), target);
  }

  // int32 Delay_Insert_Accept = 62;
  if (this->delay_insert_accept() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(62, this->_internal_delay_insert_accept(), target);
  }

  // int32 Delay_Accept_Match = 63;
  if (this->delay_accept_match() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(63, this->_internal_delay_accept_match(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.TradeOrder)
  return target;
}

size_t TradeOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.TradeOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderId = 2;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string tag = 10;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string errDetail = 21;
  if (this->errdetail().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errdetail());
  }

  // string traderId = 24;
  if (this->traderid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_traderid());
  }

  // int32 reqId = 1;
  if (this->reqid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reqid());
  }

  // int32 orderType = 4;
  if (this->ordertype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ordertype());
  }

  // int32 tradeType = 5;
  if (this->tradetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tradetype());
  }

  // int32 orderPrice = 6;
  if (this->orderprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_orderprice());
  }

  // int32 orderVolume = 7;
  if (this->ordervolume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ordervolume());
  }

  // int32 nTime = 8;
  if (this->ntime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ntime());
  }

  // int32 accountId = 9;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_accountid());
  }

  // int32 timeout = 11;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timeout());
  }

  // int64 createTime = 13;
  if (this->createtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createtime());
  }

  // int64 submitTime = 14;
  if (this->submittime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_submittime());
  }

  // bool force = 12;
  if (this->force() != 0) {
    total_size += 1 + 1;
  }

  // int32 dealPrice = 17;
  if (this->dealprice() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dealprice());
  }

  // int64 acceptTime = 15;
  if (this->accepttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_accepttime());
  }

  // int64 closeTime = 16;
  if (this->closetime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_closetime());
  }

  // int32 dealVolume = 18;
  if (this->dealvolume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dealvolume());
  }

  // .mam.OrderStatusType status = 19;
  if (this->status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .mam.TradeOrderErrorCode errCode = 20;
  if (this->errcode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_errcode());
  }

  // int32 tradedVolume = 22;
  if (this->tradedvolume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tradedvolume());
  }

  // int32 fixing = 23;
  if (this->fixing() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fixing());
  }

  // int32 originType = 25;
  if (this->origintype() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_origintype());
  }

  // int64 matchedAmount = 27;
  if (this->matchedamount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_matchedamount());
  }

  // int32 Delay_Accept_Match = 63;
  if (this->delay_accept_match() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delay_accept_match());
  }

  // .mam.ExtendPriceType priceType = 26;
  if (this->pricetype() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pricetype());
  }

  // int32 Delay_Receive_Insert = 60;
  if (this->delay_receive_insert() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delay_receive_insert());
  }

  // int32 Delay_Insert_OnInsert = 61;
  if (this->delay_insert_oninsert() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delay_insert_oninsert());
  }

  // int32 Delay_Insert_Accept = 62;
  if (this->delay_insert_accept() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delay_insert_accept());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.TradeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.TradeOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.TradeOrder)
    MergeFrom(*source);
  }
}

void TradeOrder::MergeFrom(const TradeOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.TradeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {
    _internal_set_orderid(from._internal_orderid());
  }
  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.errdetail().size() > 0) {
    _internal_set_errdetail(from._internal_errdetail());
  }
  if (from.traderid().size() > 0) {
    _internal_set_traderid(from._internal_traderid());
  }
  if (from.reqid() != 0) {
    _internal_set_reqid(from._internal_reqid());
  }
  if (from.ordertype() != 0) {
    _internal_set_ordertype(from._internal_ordertype());
  }
  if (from.tradetype() != 0) {
    _internal_set_tradetype(from._internal_tradetype());
  }
  if (from.orderprice() != 0) {
    _internal_set_orderprice(from._internal_orderprice());
  }
  if (from.ordervolume() != 0) {
    _internal_set_ordervolume(from._internal_ordervolume());
  }
  if (from.ntime() != 0) {
    _internal_set_ntime(from._internal_ntime());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  if (from.createtime() != 0) {
    _internal_set_createtime(from._internal_createtime());
  }
  if (from.submittime() != 0) {
    _internal_set_submittime(from._internal_submittime());
  }
  if (from.force() != 0) {
    _internal_set_force(from._internal_force());
  }
  if (from.dealprice() != 0) {
    _internal_set_dealprice(from._internal_dealprice());
  }
  if (from.accepttime() != 0) {
    _internal_set_accepttime(from._internal_accepttime());
  }
  if (from.closetime() != 0) {
    _internal_set_closetime(from._internal_closetime());
  }
  if (from.dealvolume() != 0) {
    _internal_set_dealvolume(from._internal_dealvolume());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
  if (from.tradedvolume() != 0) {
    _internal_set_tradedvolume(from._internal_tradedvolume());
  }
  if (from.fixing() != 0) {
    _internal_set_fixing(from._internal_fixing());
  }
  if (from.origintype() != 0) {
    _internal_set_origintype(from._internal_origintype());
  }
  if (from.matchedamount() != 0) {
    _internal_set_matchedamount(from._internal_matchedamount());
  }
  if (from.delay_accept_match() != 0) {
    _internal_set_delay_accept_match(from._internal_delay_accept_match());
  }
  if (from.pricetype() != 0) {
    _internal_set_pricetype(from._internal_pricetype());
  }
  if (from.delay_receive_insert() != 0) {
    _internal_set_delay_receive_insert(from._internal_delay_receive_insert());
  }
  if (from.delay_insert_oninsert() != 0) {
    _internal_set_delay_insert_oninsert(from._internal_delay_insert_oninsert());
  }
  if (from.delay_insert_accept() != 0) {
    _internal_set_delay_insert_accept(from._internal_delay_insert_accept());
  }
}

void TradeOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.TradeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeOrder::CopyFrom(const TradeOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.TradeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeOrder::IsInitialized() const {
  return true;
}

void TradeOrder::InternalSwap(TradeOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  errdetail_.Swap(&other->errdetail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  traderid_.Swap(&other->traderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradeOrder, delay_insert_accept_)
      + sizeof(TradeOrder::delay_insert_accept_)
      - PROTOBUF_FIELD_OFFSET(TradeOrder, reqid_)>(
          reinterpret_cast<char*>(&reqid_),
          reinterpret_cast<char*>(&other->reqid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mam::TradeOrder* Arena::CreateMaybeMessage< ::mam::TradeOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::TradeOrder >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
