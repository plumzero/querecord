
1. 信号量的数据类型为结构为 sem_t，它本质上是一个长整型的数。

初始化函数
	#include <semaphore.h>
	int sem_init(sem_t *sem, int pshared, unsigned int value);
1. 对由 sem 指定的信号量进行初始化，设置好它的共享选项，并指定一个整型初始值。
2. pshared 参数控制着信号量的类型。如果 pshared 的值是 0，就表示它是当前进程的局部信号量，否则其
   它进程就通共享这个信号量。
3. 成功时返回 0 。
   
控制函数
	#include <semaphore.h>
	int sem_wait(sem_t *sem);
	int sem_post(sem_t *sem);
1. 参数均为调用 sem_init 初始化后的信号量。
2. sem_post 函数的作用是给信号量的值加 "1"，它是一个"原子操作"，即同时对同一个信号量做加"1"操作的
   两个线程是不会冲突的；
3. sem_wait 函数也是一个原子操作，它的作用是从信号量的值减去一个"1"，但它永远会先等待该信号量为一
   个非零值才开始做减法，即如果对一个值为 0 的信号量调用 sem_wait()，这个函数就会等待直到有其他线
   程增加了这个值使它不再是 0 为止。如果有两个线程都在 sem_wait() 中等待同一个信号量变为非零值，那
   么当它被第三个线程增加一个"1"时，等待线程中只有一个能够对信号量做减法并继续执行，另一个还将处于
   等待状态。
4. 成功时返回 0 。

清理函数
	#include <semaphore.h>
	int sem_destory(sem_t *sem);
1. 在清理信号量的时候如果还有线程在等待它，用户会收到一个错误。
2. 成功时返回 0 。
