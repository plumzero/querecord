// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: echostream.proto

#include "echostream.pb.h"
#include "echostream.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace echo {

static const char* EchoTestService_method_names[] = {
  "/echo.EchoTestService/Echo",
  "/echo.EchoTestService/RequestStream",
  "/echo.EchoTestService/ResponseStream",
  "/echo.EchoTestService/BidiStream",
};

std::unique_ptr< EchoTestService::Stub> EchoTestService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EchoTestService::Stub> stub(new EchoTestService::Stub(channel));
  return stub;
}

EchoTestService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Echo_(EchoTestService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestStream_(EchoTestService_method_names[1], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_ResponseStream_(EchoTestService_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_BidiStream_(EchoTestService_method_names[3], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status EchoTestService::Stub::Echo(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::echo::EchoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Echo_, context, request, response);
}

void EchoTestService::Stub::experimental_async::Echo(::grpc::ClientContext* context, const ::echo::EchoRequest* request, ::echo::EchoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Echo_, context, request, response, std::move(f));
}

void EchoTestService::Stub::experimental_async::Echo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::echo::EchoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Echo_, context, request, response, std::move(f));
}

void EchoTestService::Stub::experimental_async::Echo(::grpc::ClientContext* context, const ::echo::EchoRequest* request, ::echo::EchoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Echo_, context, request, response, reactor);
}

void EchoTestService::Stub::experimental_async::Echo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::echo::EchoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Echo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::echo::EchoResponse>* EchoTestService::Stub::AsyncEchoRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::echo::EchoResponse>::Create(channel_.get(), cq, rpcmethod_Echo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::echo::EchoResponse>* EchoTestService::Stub::PrepareAsyncEchoRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::echo::EchoResponse>::Create(channel_.get(), cq, rpcmethod_Echo_, context, request, false);
}

::grpc::ClientWriter< ::echo::EchoRequest>* EchoTestService::Stub::RequestStreamRaw(::grpc::ClientContext* context, ::echo::EchoResponse* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::echo::EchoRequest>::Create(channel_.get(), rpcmethod_RequestStream_, context, response);
}

void EchoTestService::Stub::experimental_async::RequestStream(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::experimental::ClientWriteReactor< ::echo::EchoRequest>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::echo::EchoRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_RequestStream_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::echo::EchoRequest>* EchoTestService::Stub::AsyncRequestStreamRaw(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::echo::EchoRequest>::Create(channel_.get(), cq, rpcmethod_RequestStream_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::echo::EchoRequest>* EchoTestService::Stub::PrepareAsyncRequestStreamRaw(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::echo::EchoRequest>::Create(channel_.get(), cq, rpcmethod_RequestStream_, context, response, false, nullptr);
}

::grpc::ClientReader< ::echo::EchoResponse>* EchoTestService::Stub::ResponseStreamRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::echo::EchoResponse>::Create(channel_.get(), rpcmethod_ResponseStream_, context, request);
}

void EchoTestService::Stub::experimental_async::ResponseStream(::grpc::ClientContext* context, ::echo::EchoRequest* request, ::grpc::experimental::ClientReadReactor< ::echo::EchoResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::echo::EchoResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ResponseStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::echo::EchoResponse>* EchoTestService::Stub::AsyncResponseStreamRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::echo::EchoResponse>::Create(channel_.get(), cq, rpcmethod_ResponseStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::echo::EchoResponse>* EchoTestService::Stub::PrepareAsyncResponseStreamRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::echo::EchoResponse>::Create(channel_.get(), cq, rpcmethod_ResponseStream_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>* EchoTestService::Stub::BidiStreamRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::echo::EchoRequest, ::echo::EchoResponse>::Create(channel_.get(), rpcmethod_BidiStream_, context);
}

void EchoTestService::Stub::experimental_async::BidiStream(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::echo::EchoRequest,::echo::EchoResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::echo::EchoRequest,::echo::EchoResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_BidiStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>* EchoTestService::Stub::AsyncBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::echo::EchoRequest, ::echo::EchoResponse>::Create(channel_.get(), cq, rpcmethod_BidiStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>* EchoTestService::Stub::PrepareAsyncBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::echo::EchoRequest, ::echo::EchoResponse>::Create(channel_.get(), cq, rpcmethod_BidiStream_, context, false, nullptr);
}

EchoTestService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EchoTestService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EchoTestService::Service, ::echo::EchoRequest, ::echo::EchoResponse>(
          [](EchoTestService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::echo::EchoRequest* req,
             ::echo::EchoResponse* resp) {
               return service->Echo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EchoTestService_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< EchoTestService::Service, ::echo::EchoRequest, ::echo::EchoResponse>(
          [](EchoTestService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReader<::echo::EchoRequest>* reader,
             ::echo::EchoResponse* resp) {
               return service->RequestStream(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EchoTestService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< EchoTestService::Service, ::echo::EchoRequest, ::echo::EchoResponse>(
          [](EchoTestService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::echo::EchoRequest* req,
             ::grpc_impl::ServerWriter<::echo::EchoResponse>* writer) {
               return service->ResponseStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EchoTestService_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< EchoTestService::Service, ::echo::EchoRequest, ::echo::EchoResponse>(
          [](EchoTestService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReaderWriter<::echo::EchoResponse,
             ::echo::EchoRequest>* stream) {
               return service->BidiStream(ctx, stream);
             }, this)));
}

EchoTestService::Service::~Service() {
}

::grpc::Status EchoTestService::Service::Echo(::grpc::ServerContext* context, const ::echo::EchoRequest* request, ::echo::EchoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EchoTestService::Service::RequestStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::echo::EchoRequest>* reader, ::echo::EchoResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EchoTestService::Service::ResponseStream(::grpc::ServerContext* context, const ::echo::EchoRequest* request, ::grpc::ServerWriter< ::echo::EchoResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EchoTestService::Service::BidiStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::echo::EchoResponse, ::echo::EchoRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace echo

