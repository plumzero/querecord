// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: echostream.proto
#ifndef GRPC_echostream_2eproto__INCLUDED
#define GRPC_echostream_2eproto__INCLUDED

#include "echostream.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace echo {

class EchoTestService final {
 public:
  static constexpr char const* service_full_name() {
    return "echo.EchoTestService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Echo(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::echo::EchoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo::EchoResponse>> AsyncEcho(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo::EchoResponse>>(AsyncEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo::EchoResponse>> PrepareAsyncEcho(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo::EchoResponse>>(PrepareAsyncEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::echo::EchoRequest>> RequestStream(::grpc::ClientContext* context, ::echo::EchoResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::echo::EchoRequest>>(RequestStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::echo::EchoRequest>> AsyncRequestStream(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::echo::EchoRequest>>(AsyncRequestStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::echo::EchoRequest>> PrepareAsyncRequestStream(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::echo::EchoRequest>>(PrepareAsyncRequestStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::echo::EchoResponse>> ResponseStream(::grpc::ClientContext* context, const ::echo::EchoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::echo::EchoResponse>>(ResponseStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::echo::EchoResponse>> AsyncResponseStream(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::echo::EchoResponse>>(AsyncResponseStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::echo::EchoResponse>> PrepareAsyncResponseStream(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::echo::EchoResponse>>(PrepareAsyncResponseStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::echo::EchoRequest, ::echo::EchoResponse>> BidiStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::echo::EchoRequest, ::echo::EchoResponse>>(BidiStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::echo::EchoRequest, ::echo::EchoResponse>> AsyncBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::echo::EchoRequest, ::echo::EchoResponse>>(AsyncBidiStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::echo::EchoRequest, ::echo::EchoResponse>> PrepareAsyncBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::echo::EchoRequest, ::echo::EchoResponse>>(PrepareAsyncBidiStreamRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Echo(::grpc::ClientContext* context, const ::echo::EchoRequest* request, ::echo::EchoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Echo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::echo::EchoResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Echo(::grpc::ClientContext* context, const ::echo::EchoRequest* request, ::echo::EchoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Echo(::grpc::ClientContext* context, const ::echo::EchoRequest* request, ::echo::EchoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Echo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::echo::EchoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Echo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::echo::EchoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RequestStream(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::ClientWriteReactor< ::echo::EchoRequest>* reactor) = 0;
      #else
      virtual void RequestStream(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::experimental::ClientWriteReactor< ::echo::EchoRequest>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ResponseStream(::grpc::ClientContext* context, ::echo::EchoRequest* request, ::grpc::ClientReadReactor< ::echo::EchoResponse>* reactor) = 0;
      #else
      virtual void ResponseStream(::grpc::ClientContext* context, ::echo::EchoRequest* request, ::grpc::experimental::ClientReadReactor< ::echo::EchoResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void BidiStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::echo::EchoRequest,::echo::EchoResponse>* reactor) = 0;
      #else
      virtual void BidiStream(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::echo::EchoRequest,::echo::EchoResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::echo::EchoResponse>* AsyncEchoRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::echo::EchoResponse>* PrepareAsyncEchoRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::echo::EchoRequest>* RequestStreamRaw(::grpc::ClientContext* context, ::echo::EchoResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::echo::EchoRequest>* AsyncRequestStreamRaw(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::echo::EchoRequest>* PrepareAsyncRequestStreamRaw(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::echo::EchoResponse>* ResponseStreamRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::echo::EchoResponse>* AsyncResponseStreamRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::echo::EchoResponse>* PrepareAsyncResponseStreamRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::echo::EchoRequest, ::echo::EchoResponse>* BidiStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::echo::EchoRequest, ::echo::EchoResponse>* AsyncBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::echo::EchoRequest, ::echo::EchoResponse>* PrepareAsyncBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Echo(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::echo::EchoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo::EchoResponse>> AsyncEcho(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo::EchoResponse>>(AsyncEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo::EchoResponse>> PrepareAsyncEcho(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo::EchoResponse>>(PrepareAsyncEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::echo::EchoRequest>> RequestStream(::grpc::ClientContext* context, ::echo::EchoResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::echo::EchoRequest>>(RequestStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::echo::EchoRequest>> AsyncRequestStream(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::echo::EchoRequest>>(AsyncRequestStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::echo::EchoRequest>> PrepareAsyncRequestStream(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::echo::EchoRequest>>(PrepareAsyncRequestStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::echo::EchoResponse>> ResponseStream(::grpc::ClientContext* context, const ::echo::EchoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::echo::EchoResponse>>(ResponseStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::echo::EchoResponse>> AsyncResponseStream(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::echo::EchoResponse>>(AsyncResponseStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::echo::EchoResponse>> PrepareAsyncResponseStream(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::echo::EchoResponse>>(PrepareAsyncResponseStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>> BidiStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>>(BidiStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>> AsyncBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>>(AsyncBidiStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>> PrepareAsyncBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>>(PrepareAsyncBidiStreamRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Echo(::grpc::ClientContext* context, const ::echo::EchoRequest* request, ::echo::EchoResponse* response, std::function<void(::grpc::Status)>) override;
      void Echo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::echo::EchoResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Echo(::grpc::ClientContext* context, const ::echo::EchoRequest* request, ::echo::EchoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Echo(::grpc::ClientContext* context, const ::echo::EchoRequest* request, ::echo::EchoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Echo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::echo::EchoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Echo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::echo::EchoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RequestStream(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::ClientWriteReactor< ::echo::EchoRequest>* reactor) override;
      #else
      void RequestStream(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::experimental::ClientWriteReactor< ::echo::EchoRequest>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ResponseStream(::grpc::ClientContext* context, ::echo::EchoRequest* request, ::grpc::ClientReadReactor< ::echo::EchoResponse>* reactor) override;
      #else
      void ResponseStream(::grpc::ClientContext* context, ::echo::EchoRequest* request, ::grpc::experimental::ClientReadReactor< ::echo::EchoResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void BidiStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::echo::EchoRequest,::echo::EchoResponse>* reactor) override;
      #else
      void BidiStream(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::echo::EchoRequest,::echo::EchoResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::echo::EchoResponse>* AsyncEchoRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::echo::EchoResponse>* PrepareAsyncEchoRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::echo::EchoRequest>* RequestStreamRaw(::grpc::ClientContext* context, ::echo::EchoResponse* response) override;
    ::grpc::ClientAsyncWriter< ::echo::EchoRequest>* AsyncRequestStreamRaw(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::echo::EchoRequest>* PrepareAsyncRequestStreamRaw(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::echo::EchoResponse>* ResponseStreamRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request) override;
    ::grpc::ClientAsyncReader< ::echo::EchoResponse>* AsyncResponseStreamRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::echo::EchoResponse>* PrepareAsyncResponseStreamRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>* BidiStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>* AsyncBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>* PrepareAsyncBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Echo_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestStream_;
    const ::grpc::internal::RpcMethod rpcmethod_ResponseStream_;
    const ::grpc::internal::RpcMethod rpcmethod_BidiStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Echo(::grpc::ServerContext* context, const ::echo::EchoRequest* request, ::echo::EchoResponse* response);
    virtual ::grpc::Status RequestStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::echo::EchoRequest>* reader, ::echo::EchoResponse* response);
    virtual ::grpc::Status ResponseStream(::grpc::ServerContext* context, const ::echo::EchoRequest* request, ::grpc::ServerWriter< ::echo::EchoResponse>* writer);
    virtual ::grpc::Status BidiStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::echo::EchoResponse, ::echo::EchoRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Echo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEcho(::grpc::ServerContext* context, ::echo::EchoRequest* request, ::grpc::ServerAsyncResponseWriter< ::echo::EchoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RequestStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::echo::EchoRequest>* /*reader*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::echo::EchoResponse, ::echo::EchoRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResponseStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResponseStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ResponseStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResponseStream(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::grpc::ServerWriter< ::echo::EchoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResponseStream(::grpc::ServerContext* context, ::echo::EchoRequest* request, ::grpc::ServerAsyncWriter< ::echo::EchoResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BidiStream() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_BidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::echo::EchoResponse, ::echo::EchoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBidiStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::echo::EchoResponse, ::echo::EchoRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Echo<WithAsyncMethod_RequestStream<WithAsyncMethod_ResponseStream<WithAsyncMethod_BidiStream<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Echo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::echo::EchoRequest, ::echo::EchoResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::echo::EchoRequest* request, ::echo::EchoResponse* response) { return this->Echo(context, request, response); }));}
    void SetMessageAllocatorFor_Echo(
        ::grpc::experimental::MessageAllocator< ::echo::EchoRequest, ::echo::EchoResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::echo::EchoRequest, ::echo::EchoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Echo(
      ::grpc::CallbackServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::echo::EchoResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Echo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::echo::EchoResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RequestStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RequestStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::echo::EchoRequest, ::echo::EchoResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::echo::EchoResponse* response) { return this->RequestStream(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_RequestStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::echo::EchoRequest>* /*reader*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::echo::EchoRequest>* RequestStream(
      ::grpc::CallbackServerContext* /*context*/, ::echo::EchoResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::echo::EchoRequest>* RequestStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::echo::EchoResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ResponseStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ResponseStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::echo::EchoRequest, ::echo::EchoResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::echo::EchoRequest* request) { return this->ResponseStream(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_ResponseStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResponseStream(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::grpc::ServerWriter< ::echo::EchoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::echo::EchoResponse>* ResponseStream(
      ::grpc::CallbackServerContext* /*context*/, const ::echo::EchoRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::echo::EchoResponse>* ResponseStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::echo::EchoRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_BidiStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackBidiHandler< ::echo::EchoRequest, ::echo::EchoResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->BidiStream(context); }));
    }
    ~ExperimentalWithCallbackMethod_BidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::echo::EchoResponse, ::echo::EchoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::echo::EchoRequest, ::echo::EchoResponse>* BidiStream(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::echo::EchoRequest, ::echo::EchoResponse>* BidiStream(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Echo<ExperimentalWithCallbackMethod_RequestStream<ExperimentalWithCallbackMethod_ResponseStream<ExperimentalWithCallbackMethod_BidiStream<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Echo<ExperimentalWithCallbackMethod_RequestStream<ExperimentalWithCallbackMethod_ResponseStream<ExperimentalWithCallbackMethod_BidiStream<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Echo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RequestStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::echo::EchoRequest>* /*reader*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResponseStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResponseStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ResponseStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResponseStream(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::grpc::ServerWriter< ::echo::EchoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BidiStream() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_BidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::echo::EchoResponse, ::echo::EchoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Echo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEcho(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RequestStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::echo::EchoRequest>* /*reader*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResponseStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResponseStream() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ResponseStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResponseStream(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::grpc::ServerWriter< ::echo::EchoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResponseStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BidiStream() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_BidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::echo::EchoResponse, ::echo::EchoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBidiStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Echo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Echo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Echo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Echo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RequestStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RequestStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->RequestStream(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RequestStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::echo::EchoRequest>* /*reader*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* RequestStream(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* RequestStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ResponseStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ResponseStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->ResponseStream(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_ResponseStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResponseStream(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::grpc::ServerWriter< ::echo::EchoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ResponseStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* ResponseStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_BidiStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->BidiStream(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_BidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::echo::EchoResponse, ::echo::EchoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* BidiStream(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* BidiStream(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Echo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::echo::EchoRequest, ::echo::EchoResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::echo::EchoRequest, ::echo::EchoResponse>* streamer) {
                       return this->StreamedEcho(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEcho(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::echo::EchoRequest,::echo::EchoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Echo<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ResponseStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ResponseStream() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::echo::EchoRequest, ::echo::EchoResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::echo::EchoRequest, ::echo::EchoResponse>* streamer) {
                       return this->StreamedResponseStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ResponseStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResponseStream(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::grpc::ServerWriter< ::echo::EchoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedResponseStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::echo::EchoRequest,::echo::EchoResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ResponseStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Echo<WithSplitStreamingMethod_ResponseStream<Service > > StreamedService;
};

}  // namespace echo


#endif  // GRPC_echostream_2eproto__INCLUDED
