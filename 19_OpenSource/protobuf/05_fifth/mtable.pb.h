// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtable.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mtable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mtable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mtable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mtable_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mtable_2eproto;
namespace mam {
class PriceList;
class PriceListDefaultTypeInternal;
extern PriceListDefaultTypeInternal _PriceList_default_instance_;
class PriceList_DicEntry_DoNotUse;
class PriceList_DicEntry_DoNotUseDefaultTypeInternal;
extern PriceList_DicEntry_DoNotUseDefaultTypeInternal _PriceList_DicEntry_DoNotUse_default_instance_;
class PriceObj;
class PriceObjDefaultTypeInternal;
extern PriceObjDefaultTypeInternal _PriceObj_default_instance_;
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> ::mam::PriceList* Arena::CreateMaybeMessage<::mam::PriceList>(Arena*);
template<> ::mam::PriceList_DicEntry_DoNotUse* Arena::CreateMaybeMessage<::mam::PriceList_DicEntry_DoNotUse>(Arena*);
template<> ::mam::PriceObj* Arena::CreateMaybeMessage<::mam::PriceObj>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mam {

// ===================================================================

class PriceList_DicEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PriceList_DicEntry_DoNotUse, 
    std::string, ::mam::PriceObj,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PriceList_DicEntry_DoNotUse, 
    std::string, ::mam::PriceObj,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  PriceList_DicEntry_DoNotUse();
  explicit PriceList_DicEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PriceList_DicEntry_DoNotUse& other);
  static const PriceList_DicEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PriceList_DicEntry_DoNotUse*>(&_PriceList_DicEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "mam.PriceList.DicEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mtable_2eproto);
    return ::descriptor_table_mtable_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class PriceList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.PriceList) */ {
 public:
  inline PriceList() : PriceList(nullptr) {}
  virtual ~PriceList();

  PriceList(const PriceList& from);
  PriceList(PriceList&& from) noexcept
    : PriceList() {
    *this = ::std::move(from);
  }

  inline PriceList& operator=(const PriceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceList& operator=(PriceList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PriceList* internal_default_instance() {
    return reinterpret_cast<const PriceList*>(
               &_PriceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PriceList& a, PriceList& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriceList* New() const final {
    return CreateMaybeMessage<PriceList>(nullptr);
  }

  PriceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriceList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriceList& from);
  void MergeFrom(const PriceList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.PriceList";
  }
  protected:
  explicit PriceList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mtable_2eproto);
    return ::descriptor_table_mtable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDicFieldNumber = 2,
    kDateFieldNumber = 1,
  };
  // map<string, .mam.PriceObj> dic = 2;
  int dic_size() const;
  private:
  int _internal_dic_size() const;
  public:
  void clear_dic();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PriceObj >&
      _internal_dic() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PriceObj >*
      _internal_mutable_dic();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PriceObj >&
      dic() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PriceObj >*
      mutable_dic();

  // string date = 1;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // @@protoc_insertion_point(class_scope:mam.PriceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PriceList_DicEntry_DoNotUse,
      std::string, ::mam::PriceObj,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > dic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mtable_2eproto;
};
// -------------------------------------------------------------------

class PriceObj PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.PriceObj) */ {
 public:
  inline PriceObj() : PriceObj(nullptr) {}
  virtual ~PriceObj();

  PriceObj(const PriceObj& from);
  PriceObj(PriceObj&& from) noexcept
    : PriceObj() {
    *this = ::std::move(from);
  }

  inline PriceObj& operator=(const PriceObj& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceObj& operator=(PriceObj&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriceObj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PriceObj* internal_default_instance() {
    return reinterpret_cast<const PriceObj*>(
               &_PriceObj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PriceObj& a, PriceObj& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceObj* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceObj* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriceObj* New() const final {
    return CreateMaybeMessage<PriceObj>(nullptr);
  }

  PriceObj* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriceObj>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriceObj& from);
  void MergeFrom(const PriceObj& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceObj* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.PriceObj";
  }
  protected:
  explicit PriceObj(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mtable_2eproto);
    return ::descriptor_table_mtable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
  };
  // string price = 1;
  void clear_price();
  const std::string& price() const;
  void set_price(const std::string& value);
  void set_price(std::string&& value);
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  std::string* mutable_price();
  std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // @@protoc_insertion_point(class_scope:mam.PriceObj)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mtable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PriceList

// string date = 1;
inline void PriceList::clear_date() {
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PriceList::date() const {
  // @@protoc_insertion_point(field_get:mam.PriceList.date)
  return _internal_date();
}
inline void PriceList::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:mam.PriceList.date)
}
inline std::string* PriceList::mutable_date() {
  // @@protoc_insertion_point(field_mutable:mam.PriceList.date)
  return _internal_mutable_date();
}
inline const std::string& PriceList::_internal_date() const {
  return date_.Get();
}
inline void PriceList::_internal_set_date(const std::string& value) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PriceList::set_date(std::string&& value) {
  
  date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.PriceList.date)
}
inline void PriceList::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.PriceList.date)
}
inline void PriceList::set_date(const char* value,
    size_t size) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.PriceList.date)
}
inline std::string* PriceList::_internal_mutable_date() {
  
  return date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PriceList::release_date() {
  // @@protoc_insertion_point(field_release:mam.PriceList.date)
  return date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PriceList::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.PriceList.date)
}

// map<string, .mam.PriceObj> dic = 2;
inline int PriceList::_internal_dic_size() const {
  return dic_.size();
}
inline int PriceList::dic_size() const {
  return _internal_dic_size();
}
inline void PriceList::clear_dic() {
  dic_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PriceObj >&
PriceList::_internal_dic() const {
  return dic_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PriceObj >&
PriceList::dic() const {
  // @@protoc_insertion_point(field_map:mam.PriceList.dic)
  return _internal_dic();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PriceObj >*
PriceList::_internal_mutable_dic() {
  return dic_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PriceObj >*
PriceList::mutable_dic() {
  // @@protoc_insertion_point(field_mutable_map:mam.PriceList.dic)
  return _internal_mutable_dic();
}

// -------------------------------------------------------------------

// PriceObj

// string price = 1;
inline void PriceObj::clear_price() {
  price_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PriceObj::price() const {
  // @@protoc_insertion_point(field_get:mam.PriceObj.price)
  return _internal_price();
}
inline void PriceObj::set_price(const std::string& value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:mam.PriceObj.price)
}
inline std::string* PriceObj::mutable_price() {
  // @@protoc_insertion_point(field_mutable:mam.PriceObj.price)
  return _internal_mutable_price();
}
inline const std::string& PriceObj::_internal_price() const {
  return price_.Get();
}
inline void PriceObj::_internal_set_price(const std::string& value) {
  
  price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PriceObj::set_price(std::string&& value) {
  
  price_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.PriceObj.price)
}
inline void PriceObj::set_price(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.PriceObj.price)
}
inline void PriceObj::set_price(const char* value,
    size_t size) {
  
  price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.PriceObj.price)
}
inline std::string* PriceObj::_internal_mutable_price() {
  
  return price_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PriceObj::release_price() {
  // @@protoc_insertion_point(field_release:mam.PriceObj.price)
  return price_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PriceObj::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    
  } else {
    
  }
  price_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), price,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.PriceObj.price)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mtable_2eproto
