// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ninth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ninth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ninth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ninth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ninth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ninth_2eproto;
namespace mam {
class CardAltergeist;
class CardAltergeistDefaultTypeInternal;
extern CardAltergeistDefaultTypeInternal _CardAltergeist_default_instance_;
class CardGalatea;
class CardGalateaDefaultTypeInternal;
extern CardGalateaDefaultTypeInternal _CardGalatea_default_instance_;
class CardMadolche;
class CardMadolcheDefaultTypeInternal;
extern CardMadolcheDefaultTypeInternal _CardMadolche_default_instance_;
class CardOptions;
class CardOptionsDefaultTypeInternal;
extern CardOptionsDefaultTypeInternal _CardOptions_default_instance_;
class CardPerformage;
class CardPerformageDefaultTypeInternal;
extern CardPerformageDefaultTypeInternal _CardPerformage_default_instance_;
class CardSet;
class CardSetDefaultTypeInternal;
extern CardSetDefaultTypeInternal _CardSet_default_instance_;
class CardZoodiac;
class CardZoodiacDefaultTypeInternal;
extern CardZoodiacDefaultTypeInternal _CardZoodiac_default_instance_;
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> ::mam::CardAltergeist* Arena::CreateMaybeMessage<::mam::CardAltergeist>(Arena*);
template<> ::mam::CardGalatea* Arena::CreateMaybeMessage<::mam::CardGalatea>(Arena*);
template<> ::mam::CardMadolche* Arena::CreateMaybeMessage<::mam::CardMadolche>(Arena*);
template<> ::mam::CardOptions* Arena::CreateMaybeMessage<::mam::CardOptions>(Arena*);
template<> ::mam::CardPerformage* Arena::CreateMaybeMessage<::mam::CardPerformage>(Arena*);
template<> ::mam::CardSet* Arena::CreateMaybeMessage<::mam::CardSet>(Arena*);
template<> ::mam::CardZoodiac* Arena::CreateMaybeMessage<::mam::CardZoodiac>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mam {

// ===================================================================

class CardOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.CardOptions) */ {
 public:
  inline CardOptions() : CardOptions(nullptr) {}
  virtual ~CardOptions();

  CardOptions(const CardOptions& from);
  CardOptions(CardOptions&& from) noexcept
    : CardOptions() {
    *this = ::std::move(from);
  }

  inline CardOptions& operator=(const CardOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardOptions& operator=(CardOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardOptions* internal_default_instance() {
    return reinterpret_cast<const CardOptions*>(
               &_CardOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CardOptions& a, CardOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(CardOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardOptions* New() const final {
    return CreateMaybeMessage<CardOptions>(nullptr);
  }

  CardOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardOptions& from);
  void MergeFrom(const CardOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.CardOptions";
  }
  protected:
  explicit CardOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninth_2eproto);
    return ::descriptor_table_ninth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kMaxFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int32 max = 2;
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::int32 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.CardOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninth_2eproto;
};
// -------------------------------------------------------------------

class CardSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.CardSet) */ {
 public:
  inline CardSet() : CardSet(nullptr) {}
  virtual ~CardSet();

  CardSet(const CardSet& from);
  CardSet(CardSet&& from) noexcept
    : CardSet() {
    *this = ::std::move(from);
  }

  inline CardSet& operator=(const CardSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardSet& operator=(CardSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardSet* internal_default_instance() {
    return reinterpret_cast<const CardSet*>(
               &_CardSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CardSet& a, CardSet& b) {
    a.Swap(&b);
  }
  inline void Swap(CardSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardSet* New() const final {
    return CreateMaybeMessage<CardSet>(nullptr);
  }

  CardSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardSet& from);
  void MergeFrom(const CardSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.CardSet";
  }
  protected:
  explicit CardSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninth_2eproto);
    return ::descriptor_table_ninth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOmitFieldNumber = 1,
    kCm1FieldNumber = 2,
    kCm2FieldNumber = 3,
    kCm3FieldNumber = 4,
    kCg1FieldNumber = 5,
    kCg2FieldNumber = 6,
    kCz1FieldNumber = 7,
    kCa1FieldNumber = 8,
    kCf1FieldNumber = 9,
  };
  // string omit = 1;
  void clear_omit();
  const std::string& omit() const;
  void set_omit(const std::string& value);
  void set_omit(std::string&& value);
  void set_omit(const char* value);
  void set_omit(const char* value, size_t size);
  std::string* mutable_omit();
  std::string* release_omit();
  void set_allocated_omit(std::string* omit);
  private:
  const std::string& _internal_omit() const;
  void _internal_set_omit(const std::string& value);
  std::string* _internal_mutable_omit();
  public:

  // .mam.CardMadolche cm1 = 2 [(.mam.opt) = {
  bool has_cm1() const;
  private:
  bool _internal_has_cm1() const;
  public:
  void clear_cm1();
  const ::mam::CardMadolche& cm1() const;
  ::mam::CardMadolche* release_cm1();
  ::mam::CardMadolche* mutable_cm1();
  void set_allocated_cm1(::mam::CardMadolche* cm1);
  private:
  const ::mam::CardMadolche& _internal_cm1() const;
  ::mam::CardMadolche* _internal_mutable_cm1();
  public:
  void unsafe_arena_set_allocated_cm1(
      ::mam::CardMadolche* cm1);
  ::mam::CardMadolche* unsafe_arena_release_cm1();

  // .mam.CardMadolche cm2 = 3 [(.mam.opt) = {
  bool has_cm2() const;
  private:
  bool _internal_has_cm2() const;
  public:
  void clear_cm2();
  const ::mam::CardMadolche& cm2() const;
  ::mam::CardMadolche* release_cm2();
  ::mam::CardMadolche* mutable_cm2();
  void set_allocated_cm2(::mam::CardMadolche* cm2);
  private:
  const ::mam::CardMadolche& _internal_cm2() const;
  ::mam::CardMadolche* _internal_mutable_cm2();
  public:
  void unsafe_arena_set_allocated_cm2(
      ::mam::CardMadolche* cm2);
  ::mam::CardMadolche* unsafe_arena_release_cm2();

  // .mam.CardMadolche cm3 = 4 [(.mam.opt) = {
  bool has_cm3() const;
  private:
  bool _internal_has_cm3() const;
  public:
  void clear_cm3();
  const ::mam::CardMadolche& cm3() const;
  ::mam::CardMadolche* release_cm3();
  ::mam::CardMadolche* mutable_cm3();
  void set_allocated_cm3(::mam::CardMadolche* cm3);
  private:
  const ::mam::CardMadolche& _internal_cm3() const;
  ::mam::CardMadolche* _internal_mutable_cm3();
  public:
  void unsafe_arena_set_allocated_cm3(
      ::mam::CardMadolche* cm3);
  ::mam::CardMadolche* unsafe_arena_release_cm3();

  // .mam.CardGalatea cg1 = 5 [(.mam.opt) = {
  bool has_cg1() const;
  private:
  bool _internal_has_cg1() const;
  public:
  void clear_cg1();
  const ::mam::CardGalatea& cg1() const;
  ::mam::CardGalatea* release_cg1();
  ::mam::CardGalatea* mutable_cg1();
  void set_allocated_cg1(::mam::CardGalatea* cg1);
  private:
  const ::mam::CardGalatea& _internal_cg1() const;
  ::mam::CardGalatea* _internal_mutable_cg1();
  public:
  void unsafe_arena_set_allocated_cg1(
      ::mam::CardGalatea* cg1);
  ::mam::CardGalatea* unsafe_arena_release_cg1();

  // .mam.CardGalatea cg2 = 6 [(.mam.opt) = {
  bool has_cg2() const;
  private:
  bool _internal_has_cg2() const;
  public:
  void clear_cg2();
  const ::mam::CardGalatea& cg2() const;
  ::mam::CardGalatea* release_cg2();
  ::mam::CardGalatea* mutable_cg2();
  void set_allocated_cg2(::mam::CardGalatea* cg2);
  private:
  const ::mam::CardGalatea& _internal_cg2() const;
  ::mam::CardGalatea* _internal_mutable_cg2();
  public:
  void unsafe_arena_set_allocated_cg2(
      ::mam::CardGalatea* cg2);
  ::mam::CardGalatea* unsafe_arena_release_cg2();

  // .mam.CardZoodiac cz1 = 7 [(.mam.opt) = {
  bool has_cz1() const;
  private:
  bool _internal_has_cz1() const;
  public:
  void clear_cz1();
  const ::mam::CardZoodiac& cz1() const;
  ::mam::CardZoodiac* release_cz1();
  ::mam::CardZoodiac* mutable_cz1();
  void set_allocated_cz1(::mam::CardZoodiac* cz1);
  private:
  const ::mam::CardZoodiac& _internal_cz1() const;
  ::mam::CardZoodiac* _internal_mutable_cz1();
  public:
  void unsafe_arena_set_allocated_cz1(
      ::mam::CardZoodiac* cz1);
  ::mam::CardZoodiac* unsafe_arena_release_cz1();

  // .mam.CardAltergeist ca1 = 8 [(.mam.opt) = {
  bool has_ca1() const;
  private:
  bool _internal_has_ca1() const;
  public:
  void clear_ca1();
  const ::mam::CardAltergeist& ca1() const;
  ::mam::CardAltergeist* release_ca1();
  ::mam::CardAltergeist* mutable_ca1();
  void set_allocated_ca1(::mam::CardAltergeist* ca1);
  private:
  const ::mam::CardAltergeist& _internal_ca1() const;
  ::mam::CardAltergeist* _internal_mutable_ca1();
  public:
  void unsafe_arena_set_allocated_ca1(
      ::mam::CardAltergeist* ca1);
  ::mam::CardAltergeist* unsafe_arena_release_ca1();

  // .mam.CardPerformage cf1 = 9 [(.mam.opt) = {
  bool has_cf1() const;
  private:
  bool _internal_has_cf1() const;
  public:
  void clear_cf1();
  const ::mam::CardPerformage& cf1() const;
  ::mam::CardPerformage* release_cf1();
  ::mam::CardPerformage* mutable_cf1();
  void set_allocated_cf1(::mam::CardPerformage* cf1);
  private:
  const ::mam::CardPerformage& _internal_cf1() const;
  ::mam::CardPerformage* _internal_mutable_cf1();
  public:
  void unsafe_arena_set_allocated_cf1(
      ::mam::CardPerformage* cf1);
  ::mam::CardPerformage* unsafe_arena_release_cf1();

  // @@protoc_insertion_point(class_scope:mam.CardSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr omit_;
  ::mam::CardMadolche* cm1_;
  ::mam::CardMadolche* cm2_;
  ::mam::CardMadolche* cm3_;
  ::mam::CardGalatea* cg1_;
  ::mam::CardGalatea* cg2_;
  ::mam::CardZoodiac* cz1_;
  ::mam::CardAltergeist* ca1_;
  ::mam::CardPerformage* cf1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninth_2eproto;
};
// -------------------------------------------------------------------

class CardMadolche PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.CardMadolche) */ {
 public:
  inline CardMadolche() : CardMadolche(nullptr) {}
  virtual ~CardMadolche();

  CardMadolche(const CardMadolche& from);
  CardMadolche(CardMadolche&& from) noexcept
    : CardMadolche() {
    *this = ::std::move(from);
  }

  inline CardMadolche& operator=(const CardMadolche& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardMadolche& operator=(CardMadolche&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardMadolche& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardMadolche* internal_default_instance() {
    return reinterpret_cast<const CardMadolche*>(
               &_CardMadolche_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CardMadolche& a, CardMadolche& b) {
    a.Swap(&b);
  }
  inline void Swap(CardMadolche* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardMadolche* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardMadolche* New() const final {
    return CreateMaybeMessage<CardMadolche>(nullptr);
  }

  CardMadolche* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardMadolche>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardMadolche& from);
  void MergeFrom(const CardMadolche& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardMadolche* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.CardMadolche";
  }
  protected:
  explicit CardMadolche(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninth_2eproto);
    return ::descriptor_table_ninth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMadolcheFieldNumber = 1,
  };
  // string madolche = 1;
  void clear_madolche();
  const std::string& madolche() const;
  void set_madolche(const std::string& value);
  void set_madolche(std::string&& value);
  void set_madolche(const char* value);
  void set_madolche(const char* value, size_t size);
  std::string* mutable_madolche();
  std::string* release_madolche();
  void set_allocated_madolche(std::string* madolche);
  private:
  const std::string& _internal_madolche() const;
  void _internal_set_madolche(const std::string& value);
  std::string* _internal_mutable_madolche();
  public:

  // @@protoc_insertion_point(class_scope:mam.CardMadolche)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr madolche_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninth_2eproto;
};
// -------------------------------------------------------------------

class CardGalatea PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.CardGalatea) */ {
 public:
  inline CardGalatea() : CardGalatea(nullptr) {}
  virtual ~CardGalatea();

  CardGalatea(const CardGalatea& from);
  CardGalatea(CardGalatea&& from) noexcept
    : CardGalatea() {
    *this = ::std::move(from);
  }

  inline CardGalatea& operator=(const CardGalatea& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardGalatea& operator=(CardGalatea&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardGalatea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardGalatea* internal_default_instance() {
    return reinterpret_cast<const CardGalatea*>(
               &_CardGalatea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CardGalatea& a, CardGalatea& b) {
    a.Swap(&b);
  }
  inline void Swap(CardGalatea* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardGalatea* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardGalatea* New() const final {
    return CreateMaybeMessage<CardGalatea>(nullptr);
  }

  CardGalatea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardGalatea>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardGalatea& from);
  void MergeFrom(const CardGalatea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardGalatea* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.CardGalatea";
  }
  protected:
  explicit CardGalatea(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninth_2eproto);
    return ::descriptor_table_ninth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGalateaFieldNumber = 1,
  };
  // string galatea = 1;
  void clear_galatea();
  const std::string& galatea() const;
  void set_galatea(const std::string& value);
  void set_galatea(std::string&& value);
  void set_galatea(const char* value);
  void set_galatea(const char* value, size_t size);
  std::string* mutable_galatea();
  std::string* release_galatea();
  void set_allocated_galatea(std::string* galatea);
  private:
  const std::string& _internal_galatea() const;
  void _internal_set_galatea(const std::string& value);
  std::string* _internal_mutable_galatea();
  public:

  // @@protoc_insertion_point(class_scope:mam.CardGalatea)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr galatea_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninth_2eproto;
};
// -------------------------------------------------------------------

class CardZoodiac PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.CardZoodiac) */ {
 public:
  inline CardZoodiac() : CardZoodiac(nullptr) {}
  virtual ~CardZoodiac();

  CardZoodiac(const CardZoodiac& from);
  CardZoodiac(CardZoodiac&& from) noexcept
    : CardZoodiac() {
    *this = ::std::move(from);
  }

  inline CardZoodiac& operator=(const CardZoodiac& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardZoodiac& operator=(CardZoodiac&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardZoodiac& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardZoodiac* internal_default_instance() {
    return reinterpret_cast<const CardZoodiac*>(
               &_CardZoodiac_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CardZoodiac& a, CardZoodiac& b) {
    a.Swap(&b);
  }
  inline void Swap(CardZoodiac* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardZoodiac* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardZoodiac* New() const final {
    return CreateMaybeMessage<CardZoodiac>(nullptr);
  }

  CardZoodiac* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardZoodiac>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardZoodiac& from);
  void MergeFrom(const CardZoodiac& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardZoodiac* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.CardZoodiac";
  }
  protected:
  explicit CardZoodiac(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninth_2eproto);
    return ::descriptor_table_ninth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZoodiacFieldNumber = 1,
  };
  // string zoodiac = 1;
  void clear_zoodiac();
  const std::string& zoodiac() const;
  void set_zoodiac(const std::string& value);
  void set_zoodiac(std::string&& value);
  void set_zoodiac(const char* value);
  void set_zoodiac(const char* value, size_t size);
  std::string* mutable_zoodiac();
  std::string* release_zoodiac();
  void set_allocated_zoodiac(std::string* zoodiac);
  private:
  const std::string& _internal_zoodiac() const;
  void _internal_set_zoodiac(const std::string& value);
  std::string* _internal_mutable_zoodiac();
  public:

  // @@protoc_insertion_point(class_scope:mam.CardZoodiac)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zoodiac_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninth_2eproto;
};
// -------------------------------------------------------------------

class CardAltergeist PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.CardAltergeist) */ {
 public:
  inline CardAltergeist() : CardAltergeist(nullptr) {}
  virtual ~CardAltergeist();

  CardAltergeist(const CardAltergeist& from);
  CardAltergeist(CardAltergeist&& from) noexcept
    : CardAltergeist() {
    *this = ::std::move(from);
  }

  inline CardAltergeist& operator=(const CardAltergeist& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardAltergeist& operator=(CardAltergeist&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardAltergeist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardAltergeist* internal_default_instance() {
    return reinterpret_cast<const CardAltergeist*>(
               &_CardAltergeist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CardAltergeist& a, CardAltergeist& b) {
    a.Swap(&b);
  }
  inline void Swap(CardAltergeist* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardAltergeist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardAltergeist* New() const final {
    return CreateMaybeMessage<CardAltergeist>(nullptr);
  }

  CardAltergeist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardAltergeist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardAltergeist& from);
  void MergeFrom(const CardAltergeist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardAltergeist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.CardAltergeist";
  }
  protected:
  explicit CardAltergeist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninth_2eproto);
    return ::descriptor_table_ninth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAltergeistFieldNumber = 1,
  };
  // string altergeist = 1;
  void clear_altergeist();
  const std::string& altergeist() const;
  void set_altergeist(const std::string& value);
  void set_altergeist(std::string&& value);
  void set_altergeist(const char* value);
  void set_altergeist(const char* value, size_t size);
  std::string* mutable_altergeist();
  std::string* release_altergeist();
  void set_allocated_altergeist(std::string* altergeist);
  private:
  const std::string& _internal_altergeist() const;
  void _internal_set_altergeist(const std::string& value);
  std::string* _internal_mutable_altergeist();
  public:

  // @@protoc_insertion_point(class_scope:mam.CardAltergeist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr altergeist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninth_2eproto;
};
// -------------------------------------------------------------------

class CardPerformage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.CardPerformage) */ {
 public:
  inline CardPerformage() : CardPerformage(nullptr) {}
  virtual ~CardPerformage();

  CardPerformage(const CardPerformage& from);
  CardPerformage(CardPerformage&& from) noexcept
    : CardPerformage() {
    *this = ::std::move(from);
  }

  inline CardPerformage& operator=(const CardPerformage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardPerformage& operator=(CardPerformage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardPerformage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardPerformage* internal_default_instance() {
    return reinterpret_cast<const CardPerformage*>(
               &_CardPerformage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CardPerformage& a, CardPerformage& b) {
    a.Swap(&b);
  }
  inline void Swap(CardPerformage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardPerformage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardPerformage* New() const final {
    return CreateMaybeMessage<CardPerformage>(nullptr);
  }

  CardPerformage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardPerformage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardPerformage& from);
  void MergeFrom(const CardPerformage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardPerformage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.CardPerformage";
  }
  protected:
  explicit CardPerformage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninth_2eproto);
    return ::descriptor_table_ninth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerformageFieldNumber = 1,
  };
  // string performage = 1;
  void clear_performage();
  const std::string& performage() const;
  void set_performage(const std::string& value);
  void set_performage(std::string&& value);
  void set_performage(const char* value);
  void set_performage(const char* value, size_t size);
  std::string* mutable_performage();
  std::string* release_performage();
  void set_allocated_performage(std::string* performage);
  private:
  const std::string& _internal_performage() const;
  void _internal_set_performage(const std::string& value);
  std::string* _internal_mutable_performage();
  public:

  // @@protoc_insertion_point(class_scope:mam.CardPerformage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr performage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninth_2eproto;
};
// ===================================================================

static const int kOptFieldNumber = 1234;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mam::CardOptions >, 11, false >
  opt;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CardOptions

// string type = 1;
inline void CardOptions::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardOptions::type() const {
  // @@protoc_insertion_point(field_get:mam.CardOptions.type)
  return _internal_type();
}
inline void CardOptions::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mam.CardOptions.type)
}
inline std::string* CardOptions::mutable_type() {
  // @@protoc_insertion_point(field_mutable:mam.CardOptions.type)
  return _internal_mutable_type();
}
inline const std::string& CardOptions::_internal_type() const {
  return type_.Get();
}
inline void CardOptions::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardOptions::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.CardOptions.type)
}
inline void CardOptions::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.CardOptions.type)
}
inline void CardOptions::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.CardOptions.type)
}
inline std::string* CardOptions::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardOptions::release_type() {
  // @@protoc_insertion_point(field_release:mam.CardOptions.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardOptions::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.CardOptions.type)
}

// int32 max = 2;
inline void CardOptions::clear_max() {
  max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardOptions::_internal_max() const {
  return max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardOptions::max() const {
  // @@protoc_insertion_point(field_get:mam.CardOptions.max)
  return _internal_max();
}
inline void CardOptions::_internal_set_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_ = value;
}
inline void CardOptions::set_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:mam.CardOptions.max)
}

// -------------------------------------------------------------------

// CardSet

// string omit = 1;
inline void CardSet::clear_omit() {
  omit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardSet::omit() const {
  // @@protoc_insertion_point(field_get:mam.CardSet.omit)
  return _internal_omit();
}
inline void CardSet::set_omit(const std::string& value) {
  _internal_set_omit(value);
  // @@protoc_insertion_point(field_set:mam.CardSet.omit)
}
inline std::string* CardSet::mutable_omit() {
  // @@protoc_insertion_point(field_mutable:mam.CardSet.omit)
  return _internal_mutable_omit();
}
inline const std::string& CardSet::_internal_omit() const {
  return omit_.Get();
}
inline void CardSet::_internal_set_omit(const std::string& value) {
  
  omit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardSet::set_omit(std::string&& value) {
  
  omit_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.CardSet.omit)
}
inline void CardSet::set_omit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  omit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.CardSet.omit)
}
inline void CardSet::set_omit(const char* value,
    size_t size) {
  
  omit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.CardSet.omit)
}
inline std::string* CardSet::_internal_mutable_omit() {
  
  return omit_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardSet::release_omit() {
  // @@protoc_insertion_point(field_release:mam.CardSet.omit)
  return omit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardSet::set_allocated_omit(std::string* omit) {
  if (omit != nullptr) {
    
  } else {
    
  }
  omit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), omit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.CardSet.omit)
}

// .mam.CardMadolche cm1 = 2 [(.mam.opt) = {
inline bool CardSet::_internal_has_cm1() const {
  return this != internal_default_instance() && cm1_ != nullptr;
}
inline bool CardSet::has_cm1() const {
  return _internal_has_cm1();
}
inline void CardSet::clear_cm1() {
  if (GetArena() == nullptr && cm1_ != nullptr) {
    delete cm1_;
  }
  cm1_ = nullptr;
}
inline const ::mam::CardMadolche& CardSet::_internal_cm1() const {
  const ::mam::CardMadolche* p = cm1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mam::CardMadolche*>(
      &::mam::_CardMadolche_default_instance_);
}
inline const ::mam::CardMadolche& CardSet::cm1() const {
  // @@protoc_insertion_point(field_get:mam.CardSet.cm1)
  return _internal_cm1();
}
inline void CardSet::unsafe_arena_set_allocated_cm1(
    ::mam::CardMadolche* cm1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cm1_);
  }
  cm1_ = cm1;
  if (cm1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mam.CardSet.cm1)
}
inline ::mam::CardMadolche* CardSet::release_cm1() {
  
  ::mam::CardMadolche* temp = cm1_;
  cm1_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mam::CardMadolche* CardSet::unsafe_arena_release_cm1() {
  // @@protoc_insertion_point(field_release:mam.CardSet.cm1)
  
  ::mam::CardMadolche* temp = cm1_;
  cm1_ = nullptr;
  return temp;
}
inline ::mam::CardMadolche* CardSet::_internal_mutable_cm1() {
  
  if (cm1_ == nullptr) {
    auto* p = CreateMaybeMessage<::mam::CardMadolche>(GetArena());
    cm1_ = p;
  }
  return cm1_;
}
inline ::mam::CardMadolche* CardSet::mutable_cm1() {
  // @@protoc_insertion_point(field_mutable:mam.CardSet.cm1)
  return _internal_mutable_cm1();
}
inline void CardSet::set_allocated_cm1(::mam::CardMadolche* cm1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cm1_;
  }
  if (cm1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cm1);
    if (message_arena != submessage_arena) {
      cm1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cm1, submessage_arena);
    }
    
  } else {
    
  }
  cm1_ = cm1;
  // @@protoc_insertion_point(field_set_allocated:mam.CardSet.cm1)
}

// .mam.CardMadolche cm2 = 3 [(.mam.opt) = {
inline bool CardSet::_internal_has_cm2() const {
  return this != internal_default_instance() && cm2_ != nullptr;
}
inline bool CardSet::has_cm2() const {
  return _internal_has_cm2();
}
inline void CardSet::clear_cm2() {
  if (GetArena() == nullptr && cm2_ != nullptr) {
    delete cm2_;
  }
  cm2_ = nullptr;
}
inline const ::mam::CardMadolche& CardSet::_internal_cm2() const {
  const ::mam::CardMadolche* p = cm2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mam::CardMadolche*>(
      &::mam::_CardMadolche_default_instance_);
}
inline const ::mam::CardMadolche& CardSet::cm2() const {
  // @@protoc_insertion_point(field_get:mam.CardSet.cm2)
  return _internal_cm2();
}
inline void CardSet::unsafe_arena_set_allocated_cm2(
    ::mam::CardMadolche* cm2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cm2_);
  }
  cm2_ = cm2;
  if (cm2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mam.CardSet.cm2)
}
inline ::mam::CardMadolche* CardSet::release_cm2() {
  
  ::mam::CardMadolche* temp = cm2_;
  cm2_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mam::CardMadolche* CardSet::unsafe_arena_release_cm2() {
  // @@protoc_insertion_point(field_release:mam.CardSet.cm2)
  
  ::mam::CardMadolche* temp = cm2_;
  cm2_ = nullptr;
  return temp;
}
inline ::mam::CardMadolche* CardSet::_internal_mutable_cm2() {
  
  if (cm2_ == nullptr) {
    auto* p = CreateMaybeMessage<::mam::CardMadolche>(GetArena());
    cm2_ = p;
  }
  return cm2_;
}
inline ::mam::CardMadolche* CardSet::mutable_cm2() {
  // @@protoc_insertion_point(field_mutable:mam.CardSet.cm2)
  return _internal_mutable_cm2();
}
inline void CardSet::set_allocated_cm2(::mam::CardMadolche* cm2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cm2_;
  }
  if (cm2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cm2);
    if (message_arena != submessage_arena) {
      cm2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cm2, submessage_arena);
    }
    
  } else {
    
  }
  cm2_ = cm2;
  // @@protoc_insertion_point(field_set_allocated:mam.CardSet.cm2)
}

// .mam.CardMadolche cm3 = 4 [(.mam.opt) = {
inline bool CardSet::_internal_has_cm3() const {
  return this != internal_default_instance() && cm3_ != nullptr;
}
inline bool CardSet::has_cm3() const {
  return _internal_has_cm3();
}
inline void CardSet::clear_cm3() {
  if (GetArena() == nullptr && cm3_ != nullptr) {
    delete cm3_;
  }
  cm3_ = nullptr;
}
inline const ::mam::CardMadolche& CardSet::_internal_cm3() const {
  const ::mam::CardMadolche* p = cm3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mam::CardMadolche*>(
      &::mam::_CardMadolche_default_instance_);
}
inline const ::mam::CardMadolche& CardSet::cm3() const {
  // @@protoc_insertion_point(field_get:mam.CardSet.cm3)
  return _internal_cm3();
}
inline void CardSet::unsafe_arena_set_allocated_cm3(
    ::mam::CardMadolche* cm3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cm3_);
  }
  cm3_ = cm3;
  if (cm3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mam.CardSet.cm3)
}
inline ::mam::CardMadolche* CardSet::release_cm3() {
  
  ::mam::CardMadolche* temp = cm3_;
  cm3_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mam::CardMadolche* CardSet::unsafe_arena_release_cm3() {
  // @@protoc_insertion_point(field_release:mam.CardSet.cm3)
  
  ::mam::CardMadolche* temp = cm3_;
  cm3_ = nullptr;
  return temp;
}
inline ::mam::CardMadolche* CardSet::_internal_mutable_cm3() {
  
  if (cm3_ == nullptr) {
    auto* p = CreateMaybeMessage<::mam::CardMadolche>(GetArena());
    cm3_ = p;
  }
  return cm3_;
}
inline ::mam::CardMadolche* CardSet::mutable_cm3() {
  // @@protoc_insertion_point(field_mutable:mam.CardSet.cm3)
  return _internal_mutable_cm3();
}
inline void CardSet::set_allocated_cm3(::mam::CardMadolche* cm3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cm3_;
  }
  if (cm3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cm3);
    if (message_arena != submessage_arena) {
      cm3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cm3, submessage_arena);
    }
    
  } else {
    
  }
  cm3_ = cm3;
  // @@protoc_insertion_point(field_set_allocated:mam.CardSet.cm3)
}

// .mam.CardGalatea cg1 = 5 [(.mam.opt) = {
inline bool CardSet::_internal_has_cg1() const {
  return this != internal_default_instance() && cg1_ != nullptr;
}
inline bool CardSet::has_cg1() const {
  return _internal_has_cg1();
}
inline void CardSet::clear_cg1() {
  if (GetArena() == nullptr && cg1_ != nullptr) {
    delete cg1_;
  }
  cg1_ = nullptr;
}
inline const ::mam::CardGalatea& CardSet::_internal_cg1() const {
  const ::mam::CardGalatea* p = cg1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mam::CardGalatea*>(
      &::mam::_CardGalatea_default_instance_);
}
inline const ::mam::CardGalatea& CardSet::cg1() const {
  // @@protoc_insertion_point(field_get:mam.CardSet.cg1)
  return _internal_cg1();
}
inline void CardSet::unsafe_arena_set_allocated_cg1(
    ::mam::CardGalatea* cg1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cg1_);
  }
  cg1_ = cg1;
  if (cg1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mam.CardSet.cg1)
}
inline ::mam::CardGalatea* CardSet::release_cg1() {
  
  ::mam::CardGalatea* temp = cg1_;
  cg1_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mam::CardGalatea* CardSet::unsafe_arena_release_cg1() {
  // @@protoc_insertion_point(field_release:mam.CardSet.cg1)
  
  ::mam::CardGalatea* temp = cg1_;
  cg1_ = nullptr;
  return temp;
}
inline ::mam::CardGalatea* CardSet::_internal_mutable_cg1() {
  
  if (cg1_ == nullptr) {
    auto* p = CreateMaybeMessage<::mam::CardGalatea>(GetArena());
    cg1_ = p;
  }
  return cg1_;
}
inline ::mam::CardGalatea* CardSet::mutable_cg1() {
  // @@protoc_insertion_point(field_mutable:mam.CardSet.cg1)
  return _internal_mutable_cg1();
}
inline void CardSet::set_allocated_cg1(::mam::CardGalatea* cg1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cg1_;
  }
  if (cg1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cg1);
    if (message_arena != submessage_arena) {
      cg1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cg1, submessage_arena);
    }
    
  } else {
    
  }
  cg1_ = cg1;
  // @@protoc_insertion_point(field_set_allocated:mam.CardSet.cg1)
}

// .mam.CardGalatea cg2 = 6 [(.mam.opt) = {
inline bool CardSet::_internal_has_cg2() const {
  return this != internal_default_instance() && cg2_ != nullptr;
}
inline bool CardSet::has_cg2() const {
  return _internal_has_cg2();
}
inline void CardSet::clear_cg2() {
  if (GetArena() == nullptr && cg2_ != nullptr) {
    delete cg2_;
  }
  cg2_ = nullptr;
}
inline const ::mam::CardGalatea& CardSet::_internal_cg2() const {
  const ::mam::CardGalatea* p = cg2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mam::CardGalatea*>(
      &::mam::_CardGalatea_default_instance_);
}
inline const ::mam::CardGalatea& CardSet::cg2() const {
  // @@protoc_insertion_point(field_get:mam.CardSet.cg2)
  return _internal_cg2();
}
inline void CardSet::unsafe_arena_set_allocated_cg2(
    ::mam::CardGalatea* cg2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cg2_);
  }
  cg2_ = cg2;
  if (cg2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mam.CardSet.cg2)
}
inline ::mam::CardGalatea* CardSet::release_cg2() {
  
  ::mam::CardGalatea* temp = cg2_;
  cg2_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mam::CardGalatea* CardSet::unsafe_arena_release_cg2() {
  // @@protoc_insertion_point(field_release:mam.CardSet.cg2)
  
  ::mam::CardGalatea* temp = cg2_;
  cg2_ = nullptr;
  return temp;
}
inline ::mam::CardGalatea* CardSet::_internal_mutable_cg2() {
  
  if (cg2_ == nullptr) {
    auto* p = CreateMaybeMessage<::mam::CardGalatea>(GetArena());
    cg2_ = p;
  }
  return cg2_;
}
inline ::mam::CardGalatea* CardSet::mutable_cg2() {
  // @@protoc_insertion_point(field_mutable:mam.CardSet.cg2)
  return _internal_mutable_cg2();
}
inline void CardSet::set_allocated_cg2(::mam::CardGalatea* cg2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cg2_;
  }
  if (cg2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cg2);
    if (message_arena != submessage_arena) {
      cg2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cg2, submessage_arena);
    }
    
  } else {
    
  }
  cg2_ = cg2;
  // @@protoc_insertion_point(field_set_allocated:mam.CardSet.cg2)
}

// .mam.CardZoodiac cz1 = 7 [(.mam.opt) = {
inline bool CardSet::_internal_has_cz1() const {
  return this != internal_default_instance() && cz1_ != nullptr;
}
inline bool CardSet::has_cz1() const {
  return _internal_has_cz1();
}
inline void CardSet::clear_cz1() {
  if (GetArena() == nullptr && cz1_ != nullptr) {
    delete cz1_;
  }
  cz1_ = nullptr;
}
inline const ::mam::CardZoodiac& CardSet::_internal_cz1() const {
  const ::mam::CardZoodiac* p = cz1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mam::CardZoodiac*>(
      &::mam::_CardZoodiac_default_instance_);
}
inline const ::mam::CardZoodiac& CardSet::cz1() const {
  // @@protoc_insertion_point(field_get:mam.CardSet.cz1)
  return _internal_cz1();
}
inline void CardSet::unsafe_arena_set_allocated_cz1(
    ::mam::CardZoodiac* cz1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cz1_);
  }
  cz1_ = cz1;
  if (cz1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mam.CardSet.cz1)
}
inline ::mam::CardZoodiac* CardSet::release_cz1() {
  
  ::mam::CardZoodiac* temp = cz1_;
  cz1_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mam::CardZoodiac* CardSet::unsafe_arena_release_cz1() {
  // @@protoc_insertion_point(field_release:mam.CardSet.cz1)
  
  ::mam::CardZoodiac* temp = cz1_;
  cz1_ = nullptr;
  return temp;
}
inline ::mam::CardZoodiac* CardSet::_internal_mutable_cz1() {
  
  if (cz1_ == nullptr) {
    auto* p = CreateMaybeMessage<::mam::CardZoodiac>(GetArena());
    cz1_ = p;
  }
  return cz1_;
}
inline ::mam::CardZoodiac* CardSet::mutable_cz1() {
  // @@protoc_insertion_point(field_mutable:mam.CardSet.cz1)
  return _internal_mutable_cz1();
}
inline void CardSet::set_allocated_cz1(::mam::CardZoodiac* cz1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cz1_;
  }
  if (cz1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cz1);
    if (message_arena != submessage_arena) {
      cz1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cz1, submessage_arena);
    }
    
  } else {
    
  }
  cz1_ = cz1;
  // @@protoc_insertion_point(field_set_allocated:mam.CardSet.cz1)
}

// .mam.CardAltergeist ca1 = 8 [(.mam.opt) = {
inline bool CardSet::_internal_has_ca1() const {
  return this != internal_default_instance() && ca1_ != nullptr;
}
inline bool CardSet::has_ca1() const {
  return _internal_has_ca1();
}
inline void CardSet::clear_ca1() {
  if (GetArena() == nullptr && ca1_ != nullptr) {
    delete ca1_;
  }
  ca1_ = nullptr;
}
inline const ::mam::CardAltergeist& CardSet::_internal_ca1() const {
  const ::mam::CardAltergeist* p = ca1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mam::CardAltergeist*>(
      &::mam::_CardAltergeist_default_instance_);
}
inline const ::mam::CardAltergeist& CardSet::ca1() const {
  // @@protoc_insertion_point(field_get:mam.CardSet.ca1)
  return _internal_ca1();
}
inline void CardSet::unsafe_arena_set_allocated_ca1(
    ::mam::CardAltergeist* ca1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ca1_);
  }
  ca1_ = ca1;
  if (ca1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mam.CardSet.ca1)
}
inline ::mam::CardAltergeist* CardSet::release_ca1() {
  
  ::mam::CardAltergeist* temp = ca1_;
  ca1_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mam::CardAltergeist* CardSet::unsafe_arena_release_ca1() {
  // @@protoc_insertion_point(field_release:mam.CardSet.ca1)
  
  ::mam::CardAltergeist* temp = ca1_;
  ca1_ = nullptr;
  return temp;
}
inline ::mam::CardAltergeist* CardSet::_internal_mutable_ca1() {
  
  if (ca1_ == nullptr) {
    auto* p = CreateMaybeMessage<::mam::CardAltergeist>(GetArena());
    ca1_ = p;
  }
  return ca1_;
}
inline ::mam::CardAltergeist* CardSet::mutable_ca1() {
  // @@protoc_insertion_point(field_mutable:mam.CardSet.ca1)
  return _internal_mutable_ca1();
}
inline void CardSet::set_allocated_ca1(::mam::CardAltergeist* ca1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ca1_;
  }
  if (ca1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ca1);
    if (message_arena != submessage_arena) {
      ca1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ca1, submessage_arena);
    }
    
  } else {
    
  }
  ca1_ = ca1;
  // @@protoc_insertion_point(field_set_allocated:mam.CardSet.ca1)
}

// .mam.CardPerformage cf1 = 9 [(.mam.opt) = {
inline bool CardSet::_internal_has_cf1() const {
  return this != internal_default_instance() && cf1_ != nullptr;
}
inline bool CardSet::has_cf1() const {
  return _internal_has_cf1();
}
inline void CardSet::clear_cf1() {
  if (GetArena() == nullptr && cf1_ != nullptr) {
    delete cf1_;
  }
  cf1_ = nullptr;
}
inline const ::mam::CardPerformage& CardSet::_internal_cf1() const {
  const ::mam::CardPerformage* p = cf1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mam::CardPerformage*>(
      &::mam::_CardPerformage_default_instance_);
}
inline const ::mam::CardPerformage& CardSet::cf1() const {
  // @@protoc_insertion_point(field_get:mam.CardSet.cf1)
  return _internal_cf1();
}
inline void CardSet::unsafe_arena_set_allocated_cf1(
    ::mam::CardPerformage* cf1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cf1_);
  }
  cf1_ = cf1;
  if (cf1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mam.CardSet.cf1)
}
inline ::mam::CardPerformage* CardSet::release_cf1() {
  
  ::mam::CardPerformage* temp = cf1_;
  cf1_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mam::CardPerformage* CardSet::unsafe_arena_release_cf1() {
  // @@protoc_insertion_point(field_release:mam.CardSet.cf1)
  
  ::mam::CardPerformage* temp = cf1_;
  cf1_ = nullptr;
  return temp;
}
inline ::mam::CardPerformage* CardSet::_internal_mutable_cf1() {
  
  if (cf1_ == nullptr) {
    auto* p = CreateMaybeMessage<::mam::CardPerformage>(GetArena());
    cf1_ = p;
  }
  return cf1_;
}
inline ::mam::CardPerformage* CardSet::mutable_cf1() {
  // @@protoc_insertion_point(field_mutable:mam.CardSet.cf1)
  return _internal_mutable_cf1();
}
inline void CardSet::set_allocated_cf1(::mam::CardPerformage* cf1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cf1_;
  }
  if (cf1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cf1);
    if (message_arena != submessage_arena) {
      cf1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cf1, submessage_arena);
    }
    
  } else {
    
  }
  cf1_ = cf1;
  // @@protoc_insertion_point(field_set_allocated:mam.CardSet.cf1)
}

// -------------------------------------------------------------------

// CardMadolche

// string madolche = 1;
inline void CardMadolche::clear_madolche() {
  madolche_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardMadolche::madolche() const {
  // @@protoc_insertion_point(field_get:mam.CardMadolche.madolche)
  return _internal_madolche();
}
inline void CardMadolche::set_madolche(const std::string& value) {
  _internal_set_madolche(value);
  // @@protoc_insertion_point(field_set:mam.CardMadolche.madolche)
}
inline std::string* CardMadolche::mutable_madolche() {
  // @@protoc_insertion_point(field_mutable:mam.CardMadolche.madolche)
  return _internal_mutable_madolche();
}
inline const std::string& CardMadolche::_internal_madolche() const {
  return madolche_.Get();
}
inline void CardMadolche::_internal_set_madolche(const std::string& value) {
  
  madolche_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardMadolche::set_madolche(std::string&& value) {
  
  madolche_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.CardMadolche.madolche)
}
inline void CardMadolche::set_madolche(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  madolche_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.CardMadolche.madolche)
}
inline void CardMadolche::set_madolche(const char* value,
    size_t size) {
  
  madolche_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.CardMadolche.madolche)
}
inline std::string* CardMadolche::_internal_mutable_madolche() {
  
  return madolche_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardMadolche::release_madolche() {
  // @@protoc_insertion_point(field_release:mam.CardMadolche.madolche)
  return madolche_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardMadolche::set_allocated_madolche(std::string* madolche) {
  if (madolche != nullptr) {
    
  } else {
    
  }
  madolche_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), madolche,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.CardMadolche.madolche)
}

// -------------------------------------------------------------------

// CardGalatea

// string galatea = 1;
inline void CardGalatea::clear_galatea() {
  galatea_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardGalatea::galatea() const {
  // @@protoc_insertion_point(field_get:mam.CardGalatea.galatea)
  return _internal_galatea();
}
inline void CardGalatea::set_galatea(const std::string& value) {
  _internal_set_galatea(value);
  // @@protoc_insertion_point(field_set:mam.CardGalatea.galatea)
}
inline std::string* CardGalatea::mutable_galatea() {
  // @@protoc_insertion_point(field_mutable:mam.CardGalatea.galatea)
  return _internal_mutable_galatea();
}
inline const std::string& CardGalatea::_internal_galatea() const {
  return galatea_.Get();
}
inline void CardGalatea::_internal_set_galatea(const std::string& value) {
  
  galatea_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardGalatea::set_galatea(std::string&& value) {
  
  galatea_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.CardGalatea.galatea)
}
inline void CardGalatea::set_galatea(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  galatea_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.CardGalatea.galatea)
}
inline void CardGalatea::set_galatea(const char* value,
    size_t size) {
  
  galatea_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.CardGalatea.galatea)
}
inline std::string* CardGalatea::_internal_mutable_galatea() {
  
  return galatea_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardGalatea::release_galatea() {
  // @@protoc_insertion_point(field_release:mam.CardGalatea.galatea)
  return galatea_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardGalatea::set_allocated_galatea(std::string* galatea) {
  if (galatea != nullptr) {
    
  } else {
    
  }
  galatea_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), galatea,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.CardGalatea.galatea)
}

// -------------------------------------------------------------------

// CardZoodiac

// string zoodiac = 1;
inline void CardZoodiac::clear_zoodiac() {
  zoodiac_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardZoodiac::zoodiac() const {
  // @@protoc_insertion_point(field_get:mam.CardZoodiac.zoodiac)
  return _internal_zoodiac();
}
inline void CardZoodiac::set_zoodiac(const std::string& value) {
  _internal_set_zoodiac(value);
  // @@protoc_insertion_point(field_set:mam.CardZoodiac.zoodiac)
}
inline std::string* CardZoodiac::mutable_zoodiac() {
  // @@protoc_insertion_point(field_mutable:mam.CardZoodiac.zoodiac)
  return _internal_mutable_zoodiac();
}
inline const std::string& CardZoodiac::_internal_zoodiac() const {
  return zoodiac_.Get();
}
inline void CardZoodiac::_internal_set_zoodiac(const std::string& value) {
  
  zoodiac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardZoodiac::set_zoodiac(std::string&& value) {
  
  zoodiac_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.CardZoodiac.zoodiac)
}
inline void CardZoodiac::set_zoodiac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zoodiac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.CardZoodiac.zoodiac)
}
inline void CardZoodiac::set_zoodiac(const char* value,
    size_t size) {
  
  zoodiac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.CardZoodiac.zoodiac)
}
inline std::string* CardZoodiac::_internal_mutable_zoodiac() {
  
  return zoodiac_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardZoodiac::release_zoodiac() {
  // @@protoc_insertion_point(field_release:mam.CardZoodiac.zoodiac)
  return zoodiac_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardZoodiac::set_allocated_zoodiac(std::string* zoodiac) {
  if (zoodiac != nullptr) {
    
  } else {
    
  }
  zoodiac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zoodiac,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.CardZoodiac.zoodiac)
}

// -------------------------------------------------------------------

// CardAltergeist

// string altergeist = 1;
inline void CardAltergeist::clear_altergeist() {
  altergeist_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardAltergeist::altergeist() const {
  // @@protoc_insertion_point(field_get:mam.CardAltergeist.altergeist)
  return _internal_altergeist();
}
inline void CardAltergeist::set_altergeist(const std::string& value) {
  _internal_set_altergeist(value);
  // @@protoc_insertion_point(field_set:mam.CardAltergeist.altergeist)
}
inline std::string* CardAltergeist::mutable_altergeist() {
  // @@protoc_insertion_point(field_mutable:mam.CardAltergeist.altergeist)
  return _internal_mutable_altergeist();
}
inline const std::string& CardAltergeist::_internal_altergeist() const {
  return altergeist_.Get();
}
inline void CardAltergeist::_internal_set_altergeist(const std::string& value) {
  
  altergeist_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardAltergeist::set_altergeist(std::string&& value) {
  
  altergeist_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.CardAltergeist.altergeist)
}
inline void CardAltergeist::set_altergeist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  altergeist_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.CardAltergeist.altergeist)
}
inline void CardAltergeist::set_altergeist(const char* value,
    size_t size) {
  
  altergeist_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.CardAltergeist.altergeist)
}
inline std::string* CardAltergeist::_internal_mutable_altergeist() {
  
  return altergeist_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardAltergeist::release_altergeist() {
  // @@protoc_insertion_point(field_release:mam.CardAltergeist.altergeist)
  return altergeist_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardAltergeist::set_allocated_altergeist(std::string* altergeist) {
  if (altergeist != nullptr) {
    
  } else {
    
  }
  altergeist_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), altergeist,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.CardAltergeist.altergeist)
}

// -------------------------------------------------------------------

// CardPerformage

// string performage = 1;
inline void CardPerformage::clear_performage() {
  performage_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardPerformage::performage() const {
  // @@protoc_insertion_point(field_get:mam.CardPerformage.performage)
  return _internal_performage();
}
inline void CardPerformage::set_performage(const std::string& value) {
  _internal_set_performage(value);
  // @@protoc_insertion_point(field_set:mam.CardPerformage.performage)
}
inline std::string* CardPerformage::mutable_performage() {
  // @@protoc_insertion_point(field_mutable:mam.CardPerformage.performage)
  return _internal_mutable_performage();
}
inline const std::string& CardPerformage::_internal_performage() const {
  return performage_.Get();
}
inline void CardPerformage::_internal_set_performage(const std::string& value) {
  
  performage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardPerformage::set_performage(std::string&& value) {
  
  performage_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.CardPerformage.performage)
}
inline void CardPerformage::set_performage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  performage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.CardPerformage.performage)
}
inline void CardPerformage::set_performage(const char* value,
    size_t size) {
  
  performage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.CardPerformage.performage)
}
inline std::string* CardPerformage::_internal_mutable_performage() {
  
  return performage_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardPerformage::release_performage() {
  // @@protoc_insertion_point(field_release:mam.CardPerformage.performage)
  return performage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardPerformage::set_allocated_performage(std::string* performage) {
  if (performage != nullptr) {
    
  } else {
    
  }
  performage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), performage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.CardPerformage.performage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ninth_2eproto
