// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: twelfth.proto

#include "twelfth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_twelfth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountOverview_twelfth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_twelfth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountOverviews_twelfth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_twelfth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataIndexList_twelfth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_twelfth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataIndexList_DicEntry_DoNotUse_twelfth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_twelfth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IndexList_twelfth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_twelfth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadResult_MapAccountOverviewEntry_DoNotUse_twelfth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_twelfth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadResult_MapDataIndexListEntry_DoNotUse_twelfth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_twelfth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SysInfo_twelfth_2eproto;
namespace mam {
class LoadResult_MapAccountOverviewEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadResult_MapAccountOverviewEntry_DoNotUse> _instance;
} _LoadResult_MapAccountOverviewEntry_DoNotUse_default_instance_;
class LoadResult_MapDataIndexListEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadResult_MapDataIndexListEntry_DoNotUse> _instance;
} _LoadResult_MapDataIndexListEntry_DoNotUse_default_instance_;
class LoadResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadResult> _instance;
} _LoadResult_default_instance_;
class AccountOverviewsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountOverviews> _instance;
} _AccountOverviews_default_instance_;
class AccountOverviewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountOverview> _instance;
} _AccountOverview_default_instance_;
class DataIndexList_DicEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataIndexList_DicEntry_DoNotUse> _instance;
} _DataIndexList_DicEntry_DoNotUse_default_instance_;
class DataIndexListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataIndexList> _instance;
} _DataIndexList_default_instance_;
class IndexListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IndexList> _instance;
} _IndexList_default_instance_;
class SysInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SysInfo> _instance;
} _SysInfo_default_instance_;
}  // namespace mam
static void InitDefaultsscc_info_AccountOverview_twelfth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_AccountOverview_default_instance_;
    new (ptr) ::mam::AccountOverview();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::AccountOverview::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountOverview_twelfth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountOverview_twelfth_2eproto}, {}};

static void InitDefaultsscc_info_AccountOverviews_twelfth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_AccountOverviews_default_instance_;
    new (ptr) ::mam::AccountOverviews();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::AccountOverviews::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountOverviews_twelfth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccountOverviews_twelfth_2eproto}, {
      &scc_info_AccountOverview_twelfth_2eproto.base,}};

static void InitDefaultsscc_info_DataIndexList_twelfth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_DataIndexList_default_instance_;
    new (ptr) ::mam::DataIndexList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::DataIndexList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataIndexList_twelfth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataIndexList_twelfth_2eproto}, {
      &scc_info_DataIndexList_DicEntry_DoNotUse_twelfth_2eproto.base,}};

static void InitDefaultsscc_info_DataIndexList_DicEntry_DoNotUse_twelfth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_DataIndexList_DicEntry_DoNotUse_default_instance_;
    new (ptr) ::mam::DataIndexList_DicEntry_DoNotUse();
  }
  ::mam::DataIndexList_DicEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataIndexList_DicEntry_DoNotUse_twelfth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataIndexList_DicEntry_DoNotUse_twelfth_2eproto}, {
      &scc_info_IndexList_twelfth_2eproto.base,}};

static void InitDefaultsscc_info_IndexList_twelfth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_IndexList_default_instance_;
    new (ptr) ::mam::IndexList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::IndexList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IndexList_twelfth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IndexList_twelfth_2eproto}, {
      &scc_info_SysInfo_twelfth_2eproto.base,}};

static void InitDefaultsscc_info_LoadResult_twelfth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_LoadResult_default_instance_;
    new (ptr) ::mam::LoadResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::LoadResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LoadResult_twelfth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LoadResult_twelfth_2eproto}, {
      &scc_info_LoadResult_MapAccountOverviewEntry_DoNotUse_twelfth_2eproto.base,
      &scc_info_LoadResult_MapDataIndexListEntry_DoNotUse_twelfth_2eproto.base,}};

static void InitDefaultsscc_info_LoadResult_MapAccountOverviewEntry_DoNotUse_twelfth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_LoadResult_MapAccountOverviewEntry_DoNotUse_default_instance_;
    new (ptr) ::mam::LoadResult_MapAccountOverviewEntry_DoNotUse();
  }
  ::mam::LoadResult_MapAccountOverviewEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadResult_MapAccountOverviewEntry_DoNotUse_twelfth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadResult_MapAccountOverviewEntry_DoNotUse_twelfth_2eproto}, {
      &scc_info_AccountOverviews_twelfth_2eproto.base,}};

static void InitDefaultsscc_info_LoadResult_MapDataIndexListEntry_DoNotUse_twelfth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_LoadResult_MapDataIndexListEntry_DoNotUse_default_instance_;
    new (ptr) ::mam::LoadResult_MapDataIndexListEntry_DoNotUse();
  }
  ::mam::LoadResult_MapDataIndexListEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadResult_MapDataIndexListEntry_DoNotUse_twelfth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadResult_MapDataIndexListEntry_DoNotUse_twelfth_2eproto}, {
      &scc_info_DataIndexList_twelfth_2eproto.base,}};

static void InitDefaultsscc_info_SysInfo_twelfth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_SysInfo_default_instance_;
    new (ptr) ::mam::SysInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::SysInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SysInfo_twelfth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SysInfo_twelfth_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_twelfth_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_twelfth_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_twelfth_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_twelfth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult_MapAccountOverviewEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult_MapAccountOverviewEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult_MapAccountOverviewEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult_MapAccountOverviewEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult_MapDataIndexListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult_MapDataIndexListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult_MapDataIndexListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult_MapDataIndexListEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult, map_account_overview_),
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult, map_data_index_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverviews, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverviews, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, accountid_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, turnover_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, rate_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, fee_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, profit_),
  PROTOBUF_FIELD_OFFSET(::mam::DataIndexList_DicEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mam::DataIndexList_DicEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::DataIndexList_DicEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mam::DataIndexList_DicEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::DataIndexList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::DataIndexList, dic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::IndexList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::IndexList, snapshots_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, countsz_),
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, countsh_),
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, countcf_),
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, countsz_reverse_),
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, countsh_reverse_),
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, sumsz_delay_),
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, sumsh_delay_),
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, sumcf_delay_),
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, countsz_delay_),
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, countsh_delay_),
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, countpdt_pos_),
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, countpdt_neg_),
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, countpdt_invalid_),
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, consume_calfeat_),
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, consume_calpdt_),
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, maxconsume_calfeat_),
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, maxconsume_calpdt_),
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, count_calfeat_),
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, count_calpdt_),
  PROTOBUF_FIELD_OFFSET(::mam::SysInfo, ntime_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::mam::LoadResult_MapAccountOverviewEntry_DoNotUse)},
  { 9, 16, sizeof(::mam::LoadResult_MapDataIndexListEntry_DoNotUse)},
  { 18, -1, sizeof(::mam::LoadResult)},
  { 25, -1, sizeof(::mam::AccountOverviews)},
  { 31, -1, sizeof(::mam::AccountOverview)},
  { 41, 48, sizeof(::mam::DataIndexList_DicEntry_DoNotUse)},
  { 50, -1, sizeof(::mam::DataIndexList)},
  { 56, -1, sizeof(::mam::IndexList)},
  { 62, -1, sizeof(::mam::SysInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_LoadResult_MapAccountOverviewEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_LoadResult_MapDataIndexListEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_LoadResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_AccountOverviews_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_AccountOverview_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_DataIndexList_DicEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_DataIndexList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_IndexList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_SysInfo_default_instance_),
};

const char descriptor_table_protodef_twelfth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rtwelfth.proto\022\003mam\"\266\002\n\nLoadResult\022E\n\024m"
  "ap_account_overview\030\001 \003(\0132\'.mam.LoadResu"
  "lt.MapAccountOverviewEntry\022B\n\023map_data_i"
  "ndex_list\030\002 \003(\0132%.mam.LoadResult.MapData"
  "IndexListEntry\032P\n\027MapAccountOverviewEntr"
  "y\022\013\n\003key\030\001 \001(\t\022$\n\005value\030\002 \001(\0132\025.mam.Acco"
  "untOverviews:\0028\001\032K\n\025MapDataIndexListEntr"
  "y\022\013\n\003key\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022.mam.Data"
  "IndexList:\0028\001\"9\n\020AccountOverviews\022%\n\007con"
  "tent\030\001 \003(\0132\024.mam.AccountOverview\"a\n\017Acco"
  "untOverview\022\021\n\taccountid\030\001 \001(\005\022\020\n\010turnov"
  "er\030\002 \001(\001\022\014\n\004rate\030\003 \001(\001\022\013\n\003fee\030\004 \001(\001\022\016\n\006p"
  "rofit\030\005 \001(\001\"u\n\rDataIndexList\022(\n\003dic\030\001 \003("
  "\0132\033.mam.DataIndexList.DicEntry\032:\n\010DicEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\035\n\005value\030\002 \001(\0132\016.mam.Ind"
  "exList:\0028\001\",\n\tIndexList\022\037\n\tsnapshots\030\001 \003"
  "(\0132\014.mam.SysInfo\"\305\003\n\007SysInfo\022\017\n\007countSZ\030"
  "\001 \001(\005\022\017\n\007countSH\030\002 \001(\005\022\017\n\007countCF\030\003 \001(\005\022"
  "\027\n\017countSZ_reverse\030\004 \001(\005\022\027\n\017countSH_reve"
  "rse\030\005 \001(\005\022\023\n\013sumSZ_delay\030\006 \001(\001\022\023\n\013sumSH_"
  "delay\030\007 \001(\001\022\023\n\013sumCF_delay\030\010 \001(\001\022\025\n\rcoun"
  "tSZ_delay\030\t \001(\005\022\025\n\rcountSH_delay\030\n \001(\005\022\024"
  "\n\014countPdt_pos\030\013 \001(\005\022\024\n\014countPdt_neg\030\014 \001"
  "(\005\022\030\n\020countPdt_invalid\030\r \001(\005\022\027\n\017consume_"
  "CalFeat\030\016 \001(\001\022\026\n\016consume_CalPdt\030\017 \001(\001\022\032\n"
  "\022maxConsume_CalFeat\030\020 \001(\001\022\031\n\021maxConsume_"
  "CalPdt\030\021 \001(\001\022\025\n\rcount_CalFeat\030\022 \001(\005\022\024\n\014c"
  "ount_CalPdt\030\023 \001(\005\022\r\n\005ntime\030\024 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_twelfth_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_twelfth_2eproto_sccs[9] = {
  &scc_info_AccountOverview_twelfth_2eproto.base,
  &scc_info_AccountOverviews_twelfth_2eproto.base,
  &scc_info_DataIndexList_twelfth_2eproto.base,
  &scc_info_DataIndexList_DicEntry_DoNotUse_twelfth_2eproto.base,
  &scc_info_IndexList_twelfth_2eproto.base,
  &scc_info_LoadResult_twelfth_2eproto.base,
  &scc_info_LoadResult_MapAccountOverviewEntry_DoNotUse_twelfth_2eproto.base,
  &scc_info_LoadResult_MapDataIndexListEntry_DoNotUse_twelfth_2eproto.base,
  &scc_info_SysInfo_twelfth_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_twelfth_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_twelfth_2eproto = {
  false, false, descriptor_table_protodef_twelfth_2eproto, "twelfth.proto", 1120,
  &descriptor_table_twelfth_2eproto_once, descriptor_table_twelfth_2eproto_sccs, descriptor_table_twelfth_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_twelfth_2eproto::offsets,
  file_level_metadata_twelfth_2eproto, 9, file_level_enum_descriptors_twelfth_2eproto, file_level_service_descriptors_twelfth_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_twelfth_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_twelfth_2eproto)), true);
namespace mam {

// ===================================================================

LoadResult_MapAccountOverviewEntry_DoNotUse::LoadResult_MapAccountOverviewEntry_DoNotUse() {}
LoadResult_MapAccountOverviewEntry_DoNotUse::LoadResult_MapAccountOverviewEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LoadResult_MapAccountOverviewEntry_DoNotUse::MergeFrom(const LoadResult_MapAccountOverviewEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LoadResult_MapAccountOverviewEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void LoadResult_MapAccountOverviewEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

LoadResult_MapDataIndexListEntry_DoNotUse::LoadResult_MapDataIndexListEntry_DoNotUse() {}
LoadResult_MapDataIndexListEntry_DoNotUse::LoadResult_MapDataIndexListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LoadResult_MapDataIndexListEntry_DoNotUse::MergeFrom(const LoadResult_MapDataIndexListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LoadResult_MapDataIndexListEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void LoadResult_MapDataIndexListEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void LoadResult::InitAsDefaultInstance() {
}
class LoadResult::_Internal {
 public:
};

LoadResult::LoadResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  map_account_overview_(arena),
  map_data_index_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.LoadResult)
}
LoadResult::LoadResult(const LoadResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_account_overview_.MergeFrom(from.map_account_overview_);
  map_data_index_list_.MergeFrom(from.map_data_index_list_);
  // @@protoc_insertion_point(copy_constructor:mam.LoadResult)
}

void LoadResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadResult_twelfth_2eproto.base);
}

LoadResult::~LoadResult() {
  // @@protoc_insertion_point(destructor:mam.LoadResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoadResult::ArenaDtor(void* object) {
  LoadResult* _this = reinterpret_cast< LoadResult* >(object);
  (void)_this;
}
void LoadResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadResult& LoadResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadResult_twelfth_2eproto.base);
  return *internal_default_instance();
}


void LoadResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.LoadResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_account_overview_.Clear();
  map_data_index_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .mam.AccountOverviews> map_account_overview = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_account_overview_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .mam.DataIndexList> map_data_index_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_data_index_list_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.LoadResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .mam.AccountOverviews> map_account_overview = 1;
  if (!this->_internal_map_account_overview().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::AccountOverviews >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mam.LoadResult.MapAccountOverviewEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_account_overview().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_account_overview().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::AccountOverviews >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::AccountOverviews >::const_iterator
          it = this->_internal_map_account_overview().begin();
          it != this->_internal_map_account_overview().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = LoadResult_MapAccountOverviewEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::AccountOverviews >::const_iterator
          it = this->_internal_map_account_overview().begin();
          it != this->_internal_map_account_overview().end(); ++it) {
        target = LoadResult_MapAccountOverviewEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .mam.DataIndexList> map_data_index_list = 2;
  if (!this->_internal_map_data_index_list().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::DataIndexList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mam.LoadResult.MapDataIndexListEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_data_index_list().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_data_index_list().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::DataIndexList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::DataIndexList >::const_iterator
          it = this->_internal_map_data_index_list().begin();
          it != this->_internal_map_data_index_list().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = LoadResult_MapDataIndexListEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::DataIndexList >::const_iterator
          it = this->_internal_map_data_index_list().begin();
          it != this->_internal_map_data_index_list().end(); ++it) {
        target = LoadResult_MapDataIndexListEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.LoadResult)
  return target;
}

size_t LoadResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.LoadResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .mam.AccountOverviews> map_account_overview = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_account_overview_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::AccountOverviews >::const_iterator
      it = this->_internal_map_account_overview().begin();
      it != this->_internal_map_account_overview().end(); ++it) {
    total_size += LoadResult_MapAccountOverviewEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .mam.DataIndexList> map_data_index_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_data_index_list_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::DataIndexList >::const_iterator
      it = this->_internal_map_data_index_list().begin();
      it != this->_internal_map_data_index_list().end(); ++it) {
    total_size += LoadResult_MapDataIndexListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.LoadResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.LoadResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.LoadResult)
    MergeFrom(*source);
  }
}

void LoadResult::MergeFrom(const LoadResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.LoadResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_account_overview_.MergeFrom(from.map_account_overview_);
  map_data_index_list_.MergeFrom(from.map_data_index_list_);
}

void LoadResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.LoadResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadResult::CopyFrom(const LoadResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.LoadResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadResult::IsInitialized() const {
  return true;
}

void LoadResult::InternalSwap(LoadResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  map_account_overview_.Swap(&other->map_account_overview_);
  map_data_index_list_.Swap(&other->map_data_index_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountOverviews::InitAsDefaultInstance() {
}
class AccountOverviews::_Internal {
 public:
};

AccountOverviews::AccountOverviews(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  content_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.AccountOverviews)
}
AccountOverviews::AccountOverviews(const AccountOverviews& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      content_(from.content_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mam.AccountOverviews)
}

void AccountOverviews::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountOverviews_twelfth_2eproto.base);
}

AccountOverviews::~AccountOverviews() {
  // @@protoc_insertion_point(destructor:mam.AccountOverviews)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountOverviews::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AccountOverviews::ArenaDtor(void* object) {
  AccountOverviews* _this = reinterpret_cast< AccountOverviews* >(object);
  (void)_this;
}
void AccountOverviews::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountOverviews::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountOverviews& AccountOverviews::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountOverviews_twelfth_2eproto.base);
  return *internal_default_instance();
}


void AccountOverviews::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.AccountOverviews)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountOverviews::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mam.AccountOverview content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_content(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountOverviews::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.AccountOverviews)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mam.AccountOverview content = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_content_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_content(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.AccountOverviews)
  return target;
}

size_t AccountOverviews::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.AccountOverviews)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mam.AccountOverview content = 1;
  total_size += 1UL * this->_internal_content_size();
  for (const auto& msg : this->content_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountOverviews::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.AccountOverviews)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountOverviews* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountOverviews>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.AccountOverviews)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.AccountOverviews)
    MergeFrom(*source);
  }
}

void AccountOverviews::MergeFrom(const AccountOverviews& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.AccountOverviews)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_.MergeFrom(from.content_);
}

void AccountOverviews::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.AccountOverviews)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountOverviews::CopyFrom(const AccountOverviews& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.AccountOverviews)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountOverviews::IsInitialized() const {
  return true;
}

void AccountOverviews::InternalSwap(AccountOverviews* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.InternalSwap(&other->content_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountOverviews::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountOverview::InitAsDefaultInstance() {
}
class AccountOverview::_Internal {
 public:
};

AccountOverview::AccountOverview(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.AccountOverview)
}
AccountOverview::AccountOverview(const AccountOverview& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&turnover_, &from.turnover_,
    static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&turnover_)) + sizeof(accountid_));
  // @@protoc_insertion_point(copy_constructor:mam.AccountOverview)
}

void AccountOverview::SharedCtor() {
  ::memset(&turnover_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) -
      reinterpret_cast<char*>(&turnover_)) + sizeof(accountid_));
}

AccountOverview::~AccountOverview() {
  // @@protoc_insertion_point(destructor:mam.AccountOverview)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountOverview::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AccountOverview::ArenaDtor(void* object) {
  AccountOverview* _this = reinterpret_cast< AccountOverview* >(object);
  (void)_this;
}
void AccountOverview::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountOverview::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountOverview& AccountOverview::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountOverview_twelfth_2eproto.base);
  return *internal_default_instance();
}


void AccountOverview::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.AccountOverview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&turnover_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) -
      reinterpret_cast<char*>(&turnover_)) + sizeof(accountid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountOverview::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double turnover = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          turnover_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fee = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double profit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountOverview::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.AccountOverview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 accountid = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_accountid(), target);
  }

  // double turnover = 2;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_turnover(), target);
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rate(), target);
  }

  // double fee = 4;
  if (!(this->fee() <= 0 && this->fee() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_fee(), target);
  }

  // double profit = 5;
  if (!(this->profit() <= 0 && this->profit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_profit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.AccountOverview)
  return target;
}

size_t AccountOverview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.AccountOverview)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double turnover = 2;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    total_size += 1 + 8;
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double fee = 4;
  if (!(this->fee() <= 0 && this->fee() >= 0)) {
    total_size += 1 + 8;
  }

  // double profit = 5;
  if (!(this->profit() <= 0 && this->profit() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 accountid = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_accountid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountOverview::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.AccountOverview)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountOverview* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountOverview>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.AccountOverview)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.AccountOverview)
    MergeFrom(*source);
  }
}

void AccountOverview::MergeFrom(const AccountOverview& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.AccountOverview)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.turnover() <= 0 && from.turnover() >= 0)) {
    _internal_set_turnover(from._internal_turnover());
  }
  if (!(from.rate() <= 0 && from.rate() >= 0)) {
    _internal_set_rate(from._internal_rate());
  }
  if (!(from.fee() <= 0 && from.fee() >= 0)) {
    _internal_set_fee(from._internal_fee());
  }
  if (!(from.profit() <= 0 && from.profit() >= 0)) {
    _internal_set_profit(from._internal_profit());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
}

void AccountOverview::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.AccountOverview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountOverview::CopyFrom(const AccountOverview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.AccountOverview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountOverview::IsInitialized() const {
  return true;
}

void AccountOverview::InternalSwap(AccountOverview* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountOverview, accountid_)
      + sizeof(AccountOverview::accountid_)
      - PROTOBUF_FIELD_OFFSET(AccountOverview, turnover_)>(
          reinterpret_cast<char*>(&turnover_),
          reinterpret_cast<char*>(&other->turnover_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountOverview::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DataIndexList_DicEntry_DoNotUse::DataIndexList_DicEntry_DoNotUse() {}
DataIndexList_DicEntry_DoNotUse::DataIndexList_DicEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DataIndexList_DicEntry_DoNotUse::MergeFrom(const DataIndexList_DicEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DataIndexList_DicEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void DataIndexList_DicEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void DataIndexList::InitAsDefaultInstance() {
}
class DataIndexList::_Internal {
 public:
};

DataIndexList::DataIndexList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dic_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.DataIndexList)
}
DataIndexList::DataIndexList(const DataIndexList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dic_.MergeFrom(from.dic_);
  // @@protoc_insertion_point(copy_constructor:mam.DataIndexList)
}

void DataIndexList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataIndexList_twelfth_2eproto.base);
}

DataIndexList::~DataIndexList() {
  // @@protoc_insertion_point(destructor:mam.DataIndexList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataIndexList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DataIndexList::ArenaDtor(void* object) {
  DataIndexList* _this = reinterpret_cast< DataIndexList* >(object);
  (void)_this;
}
void DataIndexList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataIndexList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataIndexList& DataIndexList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataIndexList_twelfth_2eproto.base);
  return *internal_default_instance();
}


void DataIndexList::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.DataIndexList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dic_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataIndexList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .mam.IndexList> dic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&dic_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataIndexList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.DataIndexList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .mam.IndexList> dic = 1;
  if (!this->_internal_dic().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::IndexList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mam.DataIndexList.DicEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_dic().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_dic().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::IndexList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::IndexList >::const_iterator
          it = this->_internal_dic().begin();
          it != this->_internal_dic().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DataIndexList_DicEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::IndexList >::const_iterator
          it = this->_internal_dic().begin();
          it != this->_internal_dic().end(); ++it) {
        target = DataIndexList_DicEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.DataIndexList)
  return target;
}

size_t DataIndexList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.DataIndexList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .mam.IndexList> dic = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dic_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::IndexList >::const_iterator
      it = this->_internal_dic().begin();
      it != this->_internal_dic().end(); ++it) {
    total_size += DataIndexList_DicEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataIndexList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.DataIndexList)
  GOOGLE_DCHECK_NE(&from, this);
  const DataIndexList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataIndexList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.DataIndexList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.DataIndexList)
    MergeFrom(*source);
  }
}

void DataIndexList::MergeFrom(const DataIndexList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.DataIndexList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dic_.MergeFrom(from.dic_);
}

void DataIndexList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.DataIndexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataIndexList::CopyFrom(const DataIndexList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.DataIndexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataIndexList::IsInitialized() const {
  return true;
}

void DataIndexList::InternalSwap(DataIndexList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dic_.Swap(&other->dic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataIndexList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IndexList::InitAsDefaultInstance() {
}
class IndexList::_Internal {
 public:
};

IndexList::IndexList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  snapshots_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.IndexList)
}
IndexList::IndexList(const IndexList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      snapshots_(from.snapshots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mam.IndexList)
}

void IndexList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IndexList_twelfth_2eproto.base);
}

IndexList::~IndexList() {
  // @@protoc_insertion_point(destructor:mam.IndexList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IndexList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IndexList::ArenaDtor(void* object) {
  IndexList* _this = reinterpret_cast< IndexList* >(object);
  (void)_this;
}
void IndexList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndexList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndexList& IndexList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IndexList_twelfth_2eproto.base);
  return *internal_default_instance();
}


void IndexList::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.IndexList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshots_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mam.SysInfo snapshots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_snapshots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.IndexList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mam.SysInfo snapshots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_snapshots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_snapshots(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.IndexList)
  return target;
}

size_t IndexList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.IndexList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mam.SysInfo snapshots = 1;
  total_size += 1UL * this->_internal_snapshots_size();
  for (const auto& msg : this->snapshots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.IndexList)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.IndexList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.IndexList)
    MergeFrom(*source);
  }
}

void IndexList::MergeFrom(const IndexList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.IndexList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  snapshots_.MergeFrom(from.snapshots_);
}

void IndexList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.IndexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexList::CopyFrom(const IndexList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.IndexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexList::IsInitialized() const {
  return true;
}

void IndexList::InternalSwap(IndexList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  snapshots_.InternalSwap(&other->snapshots_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SysInfo::InitAsDefaultInstance() {
}
class SysInfo::_Internal {
 public:
};

SysInfo::SysInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.SysInfo)
}
SysInfo::SysInfo(const SysInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&countsz_, &from.countsz_,
    static_cast<size_t>(reinterpret_cast<char*>(&ntime_) -
    reinterpret_cast<char*>(&countsz_)) + sizeof(ntime_));
  // @@protoc_insertion_point(copy_constructor:mam.SysInfo)
}

void SysInfo::SharedCtor() {
  ::memset(&countsz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ntime_) -
      reinterpret_cast<char*>(&countsz_)) + sizeof(ntime_));
}

SysInfo::~SysInfo() {
  // @@protoc_insertion_point(destructor:mam.SysInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SysInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SysInfo::ArenaDtor(void* object) {
  SysInfo* _this = reinterpret_cast< SysInfo* >(object);
  (void)_this;
}
void SysInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SysInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SysInfo& SysInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SysInfo_twelfth_2eproto.base);
  return *internal_default_instance();
}


void SysInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.SysInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&countsz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ntime_) -
      reinterpret_cast<char*>(&countsz_)) + sizeof(ntime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SysInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 countSZ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          countsz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 countSH = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          countsh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 countCF = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          countcf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 countSZ_reverse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          countsz_reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 countSH_reverse = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          countsh_reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double sumSZ_delay = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          sumsz_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sumSH_delay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          sumsh_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sumCF_delay = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          sumcf_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 countSZ_delay = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          countsz_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 countSH_delay = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          countsh_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 countPdt_pos = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          countpdt_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 countPdt_neg = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          countpdt_neg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 countPdt_invalid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          countpdt_invalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double consume_CalFeat = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          consume_calfeat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double consume_CalPdt = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          consume_calpdt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double maxConsume_CalFeat = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          maxconsume_calfeat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double maxConsume_CalPdt = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          maxconsume_calpdt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 count_CalFeat = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          count_calfeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count_CalPdt = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          count_calpdt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ntime = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ntime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SysInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.SysInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 countSZ = 1;
  if (this->countsz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_countsz(), target);
  }

  // int32 countSH = 2;
  if (this->countsh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_countsh(), target);
  }

  // int32 countCF = 3;
  if (this->countcf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_countcf(), target);
  }

  // int32 countSZ_reverse = 4;
  if (this->countsz_reverse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_countsz_reverse(), target);
  }

  // int32 countSH_reverse = 5;
  if (this->countsh_reverse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_countsh_reverse(), target);
  }

  // double sumSZ_delay = 6;
  if (!(this->sumsz_delay() <= 0 && this->sumsz_delay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_sumsz_delay(), target);
  }

  // double sumSH_delay = 7;
  if (!(this->sumsh_delay() <= 0 && this->sumsh_delay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_sumsh_delay(), target);
  }

  // double sumCF_delay = 8;
  if (!(this->sumcf_delay() <= 0 && this->sumcf_delay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_sumcf_delay(), target);
  }

  // int32 countSZ_delay = 9;
  if (this->countsz_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_countsz_delay(), target);
  }

  // int32 countSH_delay = 10;
  if (this->countsh_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_countsh_delay(), target);
  }

  // int32 countPdt_pos = 11;
  if (this->countpdt_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_countpdt_pos(), target);
  }

  // int32 countPdt_neg = 12;
  if (this->countpdt_neg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_countpdt_neg(), target);
  }

  // int32 countPdt_invalid = 13;
  if (this->countpdt_invalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_countpdt_invalid(), target);
  }

  // double consume_CalFeat = 14;
  if (!(this->consume_calfeat() <= 0 && this->consume_calfeat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_consume_calfeat(), target);
  }

  // double consume_CalPdt = 15;
  if (!(this->consume_calpdt() <= 0 && this->consume_calpdt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_consume_calpdt(), target);
  }

  // double maxConsume_CalFeat = 16;
  if (!(this->maxconsume_calfeat() <= 0 && this->maxconsume_calfeat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_maxconsume_calfeat(), target);
  }

  // double maxConsume_CalPdt = 17;
  if (!(this->maxconsume_calpdt() <= 0 && this->maxconsume_calpdt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_maxconsume_calpdt(), target);
  }

  // int32 count_CalFeat = 18;
  if (this->count_calfeat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_count_calfeat(), target);
  }

  // int32 count_CalPdt = 19;
  if (this->count_calpdt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_count_calpdt(), target);
  }

  // int32 ntime = 20;
  if (this->ntime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_ntime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.SysInfo)
  return target;
}

size_t SysInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.SysInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 countSZ = 1;
  if (this->countsz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_countsz());
  }

  // int32 countSH = 2;
  if (this->countsh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_countsh());
  }

  // int32 countCF = 3;
  if (this->countcf() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_countcf());
  }

  // int32 countSZ_reverse = 4;
  if (this->countsz_reverse() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_countsz_reverse());
  }

  // double sumSZ_delay = 6;
  if (!(this->sumsz_delay() <= 0 && this->sumsz_delay() >= 0)) {
    total_size += 1 + 8;
  }

  // double sumSH_delay = 7;
  if (!(this->sumsh_delay() <= 0 && this->sumsh_delay() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 countSH_reverse = 5;
  if (this->countsh_reverse() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_countsh_reverse());
  }

  // int32 countSZ_delay = 9;
  if (this->countsz_delay() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_countsz_delay());
  }

  // double sumCF_delay = 8;
  if (!(this->sumcf_delay() <= 0 && this->sumcf_delay() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 countSH_delay = 10;
  if (this->countsh_delay() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_countsh_delay());
  }

  // int32 countPdt_pos = 11;
  if (this->countpdt_pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_countpdt_pos());
  }

  // int32 countPdt_neg = 12;
  if (this->countpdt_neg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_countpdt_neg());
  }

  // int32 countPdt_invalid = 13;
  if (this->countpdt_invalid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_countpdt_invalid());
  }

  // double consume_CalFeat = 14;
  if (!(this->consume_calfeat() <= 0 && this->consume_calfeat() >= 0)) {
    total_size += 1 + 8;
  }

  // double consume_CalPdt = 15;
  if (!(this->consume_calpdt() <= 0 && this->consume_calpdt() >= 0)) {
    total_size += 1 + 8;
  }

  // double maxConsume_CalFeat = 16;
  if (!(this->maxconsume_calfeat() <= 0 && this->maxconsume_calfeat() >= 0)) {
    total_size += 2 + 8;
  }

  // double maxConsume_CalPdt = 17;
  if (!(this->maxconsume_calpdt() <= 0 && this->maxconsume_calpdt() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 count_CalFeat = 18;
  if (this->count_calfeat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count_calfeat());
  }

  // int32 count_CalPdt = 19;
  if (this->count_calpdt() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count_calpdt());
  }

  // int32 ntime = 20;
  if (this->ntime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ntime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SysInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.SysInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SysInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SysInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.SysInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.SysInfo)
    MergeFrom(*source);
  }
}

void SysInfo::MergeFrom(const SysInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.SysInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.countsz() != 0) {
    _internal_set_countsz(from._internal_countsz());
  }
  if (from.countsh() != 0) {
    _internal_set_countsh(from._internal_countsh());
  }
  if (from.countcf() != 0) {
    _internal_set_countcf(from._internal_countcf());
  }
  if (from.countsz_reverse() != 0) {
    _internal_set_countsz_reverse(from._internal_countsz_reverse());
  }
  if (!(from.sumsz_delay() <= 0 && from.sumsz_delay() >= 0)) {
    _internal_set_sumsz_delay(from._internal_sumsz_delay());
  }
  if (!(from.sumsh_delay() <= 0 && from.sumsh_delay() >= 0)) {
    _internal_set_sumsh_delay(from._internal_sumsh_delay());
  }
  if (from.countsh_reverse() != 0) {
    _internal_set_countsh_reverse(from._internal_countsh_reverse());
  }
  if (from.countsz_delay() != 0) {
    _internal_set_countsz_delay(from._internal_countsz_delay());
  }
  if (!(from.sumcf_delay() <= 0 && from.sumcf_delay() >= 0)) {
    _internal_set_sumcf_delay(from._internal_sumcf_delay());
  }
  if (from.countsh_delay() != 0) {
    _internal_set_countsh_delay(from._internal_countsh_delay());
  }
  if (from.countpdt_pos() != 0) {
    _internal_set_countpdt_pos(from._internal_countpdt_pos());
  }
  if (from.countpdt_neg() != 0) {
    _internal_set_countpdt_neg(from._internal_countpdt_neg());
  }
  if (from.countpdt_invalid() != 0) {
    _internal_set_countpdt_invalid(from._internal_countpdt_invalid());
  }
  if (!(from.consume_calfeat() <= 0 && from.consume_calfeat() >= 0)) {
    _internal_set_consume_calfeat(from._internal_consume_calfeat());
  }
  if (!(from.consume_calpdt() <= 0 && from.consume_calpdt() >= 0)) {
    _internal_set_consume_calpdt(from._internal_consume_calpdt());
  }
  if (!(from.maxconsume_calfeat() <= 0 && from.maxconsume_calfeat() >= 0)) {
    _internal_set_maxconsume_calfeat(from._internal_maxconsume_calfeat());
  }
  if (!(from.maxconsume_calpdt() <= 0 && from.maxconsume_calpdt() >= 0)) {
    _internal_set_maxconsume_calpdt(from._internal_maxconsume_calpdt());
  }
  if (from.count_calfeat() != 0) {
    _internal_set_count_calfeat(from._internal_count_calfeat());
  }
  if (from.count_calpdt() != 0) {
    _internal_set_count_calpdt(from._internal_count_calpdt());
  }
  if (from.ntime() != 0) {
    _internal_set_ntime(from._internal_ntime());
  }
}

void SysInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.SysInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysInfo::CopyFrom(const SysInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.SysInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysInfo::IsInitialized() const {
  return true;
}

void SysInfo::InternalSwap(SysInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SysInfo, ntime_)
      + sizeof(SysInfo::ntime_)
      - PROTOBUF_FIELD_OFFSET(SysInfo, countsz_)>(
          reinterpret_cast<char*>(&countsz_),
          reinterpret_cast<char*>(&other->countsz_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SysInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mam::LoadResult_MapAccountOverviewEntry_DoNotUse* Arena::CreateMaybeMessage< ::mam::LoadResult_MapAccountOverviewEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::LoadResult_MapAccountOverviewEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::LoadResult_MapDataIndexListEntry_DoNotUse* Arena::CreateMaybeMessage< ::mam::LoadResult_MapDataIndexListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::LoadResult_MapDataIndexListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::LoadResult* Arena::CreateMaybeMessage< ::mam::LoadResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::LoadResult >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::AccountOverviews* Arena::CreateMaybeMessage< ::mam::AccountOverviews >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::AccountOverviews >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::AccountOverview* Arena::CreateMaybeMessage< ::mam::AccountOverview >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::AccountOverview >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::DataIndexList_DicEntry_DoNotUse* Arena::CreateMaybeMessage< ::mam::DataIndexList_DicEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::DataIndexList_DicEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::DataIndexList* Arena::CreateMaybeMessage< ::mam::DataIndexList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::DataIndexList >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::IndexList* Arena::CreateMaybeMessage< ::mam::IndexList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::IndexList >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::SysInfo* Arena::CreateMaybeMessage< ::mam::SysInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::SysInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
