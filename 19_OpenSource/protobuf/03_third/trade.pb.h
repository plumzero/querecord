// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trade_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trade_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trade_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trade_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trade_2eproto;
namespace mam {
class StockInfos;
class StockInfosDefaultTypeInternal;
extern StockInfosDefaultTypeInternal _StockInfos_default_instance_;
class TradeAccountRsp;
class TradeAccountRspDefaultTypeInternal;
extern TradeAccountRspDefaultTypeInternal _TradeAccountRsp_default_instance_;
class TradeStockPosition;
class TradeStockPositionDefaultTypeInternal;
extern TradeStockPositionDefaultTypeInternal _TradeStockPosition_default_instance_;
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> ::mam::StockInfos* Arena::CreateMaybeMessage<::mam::StockInfos>(Arena*);
template<> ::mam::TradeAccountRsp* Arena::CreateMaybeMessage<::mam::TradeAccountRsp>(Arena*);
template<> ::mam::TradeStockPosition* Arena::CreateMaybeMessage<::mam::TradeStockPosition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mam {

// ===================================================================

class TradeStockPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.TradeStockPosition) */ {
 public:
  inline TradeStockPosition() : TradeStockPosition(nullptr) {}
  virtual ~TradeStockPosition();

  TradeStockPosition(const TradeStockPosition& from);
  TradeStockPosition(TradeStockPosition&& from) noexcept
    : TradeStockPosition() {
    *this = ::std::move(from);
  }

  inline TradeStockPosition& operator=(const TradeStockPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeStockPosition& operator=(TradeStockPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeStockPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeStockPosition* internal_default_instance() {
    return reinterpret_cast<const TradeStockPosition*>(
               &_TradeStockPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TradeStockPosition& a, TradeStockPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeStockPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeStockPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeStockPosition* New() const final {
    return CreateMaybeMessage<TradeStockPosition>(nullptr);
  }

  TradeStockPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeStockPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeStockPosition& from);
  void MergeFrom(const TradeStockPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeStockPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.TradeStockPosition";
  }
  protected:
  explicit TradeStockPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trade_2eproto);
    return ::descriptor_table_trade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kQuantityFieldNumber = 2,
  };
  // string symbol = 1;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // int32 quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::int32 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.TradeStockPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class TradeAccountRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.TradeAccountRsp) */ {
 public:
  inline TradeAccountRsp() : TradeAccountRsp(nullptr) {}
  virtual ~TradeAccountRsp();

  TradeAccountRsp(const TradeAccountRsp& from);
  TradeAccountRsp(TradeAccountRsp&& from) noexcept
    : TradeAccountRsp() {
    *this = ::std::move(from);
  }

  inline TradeAccountRsp& operator=(const TradeAccountRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeAccountRsp& operator=(TradeAccountRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeAccountRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeAccountRsp* internal_default_instance() {
    return reinterpret_cast<const TradeAccountRsp*>(
               &_TradeAccountRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TradeAccountRsp& a, TradeAccountRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeAccountRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeAccountRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeAccountRsp* New() const final {
    return CreateMaybeMessage<TradeAccountRsp>(nullptr);
  }

  TradeAccountRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeAccountRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeAccountRsp& from);
  void MergeFrom(const TradeAccountRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeAccountRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.TradeAccountRsp";
  }
  protected:
  explicit TradeAccountRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trade_2eproto);
    return ::descriptor_table_trade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 2,
    kPositionsFieldNumber = 3,
    kAccountIdFieldNumber = 1,
  };
  // string host = 2;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // .mam.StockInfos positions = 3;
  bool has_positions() const;
  private:
  bool _internal_has_positions() const;
  public:
  void clear_positions();
  const ::mam::StockInfos& positions() const;
  ::mam::StockInfos* release_positions();
  ::mam::StockInfos* mutable_positions();
  void set_allocated_positions(::mam::StockInfos* positions);
  private:
  const ::mam::StockInfos& _internal_positions() const;
  ::mam::StockInfos* _internal_mutable_positions();
  public:
  void unsafe_arena_set_allocated_positions(
      ::mam::StockInfos* positions);
  ::mam::StockInfos* unsafe_arena_release_positions();

  // int32 accountId = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::int32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.TradeAccountRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::mam::StockInfos* positions_;
  ::PROTOBUF_NAMESPACE_ID::int32 accountid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class StockInfos PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.StockInfos) */ {
 public:
  inline StockInfos() : StockInfos(nullptr) {}
  virtual ~StockInfos();

  StockInfos(const StockInfos& from);
  StockInfos(StockInfos&& from) noexcept
    : StockInfos() {
    *this = ::std::move(from);
  }

  inline StockInfos& operator=(const StockInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline StockInfos& operator=(StockInfos&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StockInfos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockInfos* internal_default_instance() {
    return reinterpret_cast<const StockInfos*>(
               &_StockInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StockInfos& a, StockInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(StockInfos* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StockInfos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StockInfos* New() const final {
    return CreateMaybeMessage<StockInfos>(nullptr);
  }

  StockInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StockInfos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StockInfos& from);
  void MergeFrom(const StockInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockInfos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.StockInfos";
  }
  protected:
  explicit StockInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trade_2eproto);
    return ::descriptor_table_trade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStocksFieldNumber = 1,
  };
  // repeated .mam.TradeStockPosition stocks = 1;
  int stocks_size() const;
  private:
  int _internal_stocks_size() const;
  public:
  void clear_stocks();
  ::mam::TradeStockPosition* mutable_stocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::TradeStockPosition >*
      mutable_stocks();
  private:
  const ::mam::TradeStockPosition& _internal_stocks(int index) const;
  ::mam::TradeStockPosition* _internal_add_stocks();
  public:
  const ::mam::TradeStockPosition& stocks(int index) const;
  ::mam::TradeStockPosition* add_stocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::TradeStockPosition >&
      stocks() const;

  // @@protoc_insertion_point(class_scope:mam.StockInfos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::TradeStockPosition > stocks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TradeStockPosition

// string symbol = 1;
inline void TradeStockPosition::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeStockPosition::symbol() const {
  // @@protoc_insertion_point(field_get:mam.TradeStockPosition.symbol)
  return _internal_symbol();
}
inline void TradeStockPosition::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:mam.TradeStockPosition.symbol)
}
inline std::string* TradeStockPosition::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:mam.TradeStockPosition.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& TradeStockPosition::_internal_symbol() const {
  return symbol_.Get();
}
inline void TradeStockPosition::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeStockPosition::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.TradeStockPosition.symbol)
}
inline void TradeStockPosition::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.TradeStockPosition.symbol)
}
inline void TradeStockPosition::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.TradeStockPosition.symbol)
}
inline std::string* TradeStockPosition::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeStockPosition::release_symbol() {
  // @@protoc_insertion_point(field_release:mam.TradeStockPosition.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeStockPosition::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.TradeStockPosition.symbol)
}

// int32 quantity = 2;
inline void TradeStockPosition::clear_quantity() {
  quantity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeStockPosition::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeStockPosition::quantity() const {
  // @@protoc_insertion_point(field_get:mam.TradeStockPosition.quantity)
  return _internal_quantity();
}
inline void TradeStockPosition::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  quantity_ = value;
}
inline void TradeStockPosition::set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:mam.TradeStockPosition.quantity)
}

// -------------------------------------------------------------------

// TradeAccountRsp

// int32 accountId = 1;
inline void TradeAccountRsp::clear_accountid() {
  accountid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeAccountRsp::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeAccountRsp::accountid() const {
  // @@protoc_insertion_point(field_get:mam.TradeAccountRsp.accountId)
  return _internal_accountid();
}
inline void TradeAccountRsp::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  accountid_ = value;
}
inline void TradeAccountRsp::set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:mam.TradeAccountRsp.accountId)
}

// string host = 2;
inline void TradeAccountRsp::clear_host() {
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeAccountRsp::host() const {
  // @@protoc_insertion_point(field_get:mam.TradeAccountRsp.host)
  return _internal_host();
}
inline void TradeAccountRsp::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:mam.TradeAccountRsp.host)
}
inline std::string* TradeAccountRsp::mutable_host() {
  // @@protoc_insertion_point(field_mutable:mam.TradeAccountRsp.host)
  return _internal_mutable_host();
}
inline const std::string& TradeAccountRsp::_internal_host() const {
  return host_.Get();
}
inline void TradeAccountRsp::_internal_set_host(const std::string& value) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeAccountRsp::set_host(std::string&& value) {
  
  host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.TradeAccountRsp.host)
}
inline void TradeAccountRsp::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.TradeAccountRsp.host)
}
inline void TradeAccountRsp::set_host(const char* value,
    size_t size) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.TradeAccountRsp.host)
}
inline std::string* TradeAccountRsp::_internal_mutable_host() {
  
  return host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeAccountRsp::release_host() {
  // @@protoc_insertion_point(field_release:mam.TradeAccountRsp.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeAccountRsp::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.TradeAccountRsp.host)
}

// .mam.StockInfos positions = 3;
inline bool TradeAccountRsp::_internal_has_positions() const {
  return this != internal_default_instance() && positions_ != nullptr;
}
inline bool TradeAccountRsp::has_positions() const {
  return _internal_has_positions();
}
inline void TradeAccountRsp::clear_positions() {
  if (GetArena() == nullptr && positions_ != nullptr) {
    delete positions_;
  }
  positions_ = nullptr;
}
inline const ::mam::StockInfos& TradeAccountRsp::_internal_positions() const {
  const ::mam::StockInfos* p = positions_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mam::StockInfos*>(
      &::mam::_StockInfos_default_instance_);
}
inline const ::mam::StockInfos& TradeAccountRsp::positions() const {
  // @@protoc_insertion_point(field_get:mam.TradeAccountRsp.positions)
  return _internal_positions();
}
inline void TradeAccountRsp::unsafe_arena_set_allocated_positions(
    ::mam::StockInfos* positions) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positions_);
  }
  positions_ = positions;
  if (positions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mam.TradeAccountRsp.positions)
}
inline ::mam::StockInfos* TradeAccountRsp::release_positions() {
  
  ::mam::StockInfos* temp = positions_;
  positions_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mam::StockInfos* TradeAccountRsp::unsafe_arena_release_positions() {
  // @@protoc_insertion_point(field_release:mam.TradeAccountRsp.positions)
  
  ::mam::StockInfos* temp = positions_;
  positions_ = nullptr;
  return temp;
}
inline ::mam::StockInfos* TradeAccountRsp::_internal_mutable_positions() {
  
  if (positions_ == nullptr) {
    auto* p = CreateMaybeMessage<::mam::StockInfos>(GetArena());
    positions_ = p;
  }
  return positions_;
}
inline ::mam::StockInfos* TradeAccountRsp::mutable_positions() {
  // @@protoc_insertion_point(field_mutable:mam.TradeAccountRsp.positions)
  return _internal_mutable_positions();
}
inline void TradeAccountRsp::set_allocated_positions(::mam::StockInfos* positions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete positions_;
  }
  if (positions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(positions);
    if (message_arena != submessage_arena) {
      positions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positions, submessage_arena);
    }
    
  } else {
    
  }
  positions_ = positions;
  // @@protoc_insertion_point(field_set_allocated:mam.TradeAccountRsp.positions)
}

// -------------------------------------------------------------------

// StockInfos

// repeated .mam.TradeStockPosition stocks = 1;
inline int StockInfos::_internal_stocks_size() const {
  return stocks_.size();
}
inline int StockInfos::stocks_size() const {
  return _internal_stocks_size();
}
inline void StockInfos::clear_stocks() {
  stocks_.Clear();
}
inline ::mam::TradeStockPosition* StockInfos::mutable_stocks(int index) {
  // @@protoc_insertion_point(field_mutable:mam.StockInfos.stocks)
  return stocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::TradeStockPosition >*
StockInfos::mutable_stocks() {
  // @@protoc_insertion_point(field_mutable_list:mam.StockInfos.stocks)
  return &stocks_;
}
inline const ::mam::TradeStockPosition& StockInfos::_internal_stocks(int index) const {
  return stocks_.Get(index);
}
inline const ::mam::TradeStockPosition& StockInfos::stocks(int index) const {
  // @@protoc_insertion_point(field_get:mam.StockInfos.stocks)
  return _internal_stocks(index);
}
inline ::mam::TradeStockPosition* StockInfos::_internal_add_stocks() {
  return stocks_.Add();
}
inline ::mam::TradeStockPosition* StockInfos::add_stocks() {
  // @@protoc_insertion_point(field_add:mam.StockInfos.stocks)
  return _internal_add_stocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::TradeStockPosition >&
StockInfos::stocks() const {
  // @@protoc_insertion_point(field_list:mam.StockInfos.stocks)
  return stocks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trade_2eproto
