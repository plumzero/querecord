// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fourteenth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fourteenth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fourteenth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fourteenth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fourteenth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fourteenth_2eproto;
namespace mam {
class FieldRule;
class FieldRuleDefaultTypeInternal;
extern FieldRuleDefaultTypeInternal _FieldRule_default_instance_;
class SceneDouble;
class SceneDoubleDefaultTypeInternal;
extern SceneDoubleDefaultTypeInternal _SceneDouble_default_instance_;
class SceneFloat;
class SceneFloatDefaultTypeInternal;
extern SceneFloatDefaultTypeInternal _SceneFloat_default_instance_;
class SceneInt;
class SceneIntDefaultTypeInternal;
extern SceneIntDefaultTypeInternal _SceneInt_default_instance_;
class SceneLong;
class SceneLongDefaultTypeInternal;
extern SceneLongDefaultTypeInternal _SceneLong_default_instance_;
class SceneOther;
class SceneOtherDefaultTypeInternal;
extern SceneOtherDefaultTypeInternal _SceneOther_default_instance_;
class SceneString;
class SceneStringDefaultTypeInternal;
extern SceneStringDefaultTypeInternal _SceneString_default_instance_;
class SceneUInt;
class SceneUIntDefaultTypeInternal;
extern SceneUIntDefaultTypeInternal _SceneUInt_default_instance_;
class SceneULong;
class SceneULongDefaultTypeInternal;
extern SceneULongDefaultTypeInternal _SceneULong_default_instance_;
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> ::mam::FieldRule* Arena::CreateMaybeMessage<::mam::FieldRule>(Arena*);
template<> ::mam::SceneDouble* Arena::CreateMaybeMessage<::mam::SceneDouble>(Arena*);
template<> ::mam::SceneFloat* Arena::CreateMaybeMessage<::mam::SceneFloat>(Arena*);
template<> ::mam::SceneInt* Arena::CreateMaybeMessage<::mam::SceneInt>(Arena*);
template<> ::mam::SceneLong* Arena::CreateMaybeMessage<::mam::SceneLong>(Arena*);
template<> ::mam::SceneOther* Arena::CreateMaybeMessage<::mam::SceneOther>(Arena*);
template<> ::mam::SceneString* Arena::CreateMaybeMessage<::mam::SceneString>(Arena*);
template<> ::mam::SceneUInt* Arena::CreateMaybeMessage<::mam::SceneUInt>(Arena*);
template<> ::mam::SceneULong* Arena::CreateMaybeMessage<::mam::SceneULong>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mam {

// ===================================================================

class FieldRule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.FieldRule) */ {
 public:
  inline FieldRule() : FieldRule(nullptr) {}
  virtual ~FieldRule();

  FieldRule(const FieldRule& from);
  FieldRule(FieldRule&& from) noexcept
    : FieldRule() {
    *this = ::std::move(from);
  }

  inline FieldRule& operator=(const FieldRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldRule& operator=(FieldRule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldRule* internal_default_instance() {
    return reinterpret_cast<const FieldRule*>(
               &_FieldRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FieldRule& a, FieldRule& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldRule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldRule* New() const final {
    return CreateMaybeMessage<FieldRule>(nullptr);
  }

  FieldRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldRule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldRule& from);
  void MergeFrom(const FieldRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.FieldRule";
  }
  protected:
  explicit FieldRule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fourteenth_2eproto);
    return ::descriptor_table_fourteenth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrRegexFieldNumber = 1,
    kStrInFieldNumber = 2,
    kStrNinFieldNumber = 3,
    kStrEqFieldNumber = 4,
    kStrNeFieldNumber = 5,
    kEqFieldNumber = 11,
    kNeFieldNumber = 12,
    kGtFieldNumber = 13,
    kGeFieldNumber = 14,
    kLtFieldNumber = 15,
    kLeFieldNumber = 16,
    kAndTrueFieldNumber = 21,
    kOrTrueFieldNumber = 22,
    kXorTrueFieldNumber = 23,
    kAndFalseFieldNumber = 24,
    kOrFalseFieldNumber = 25,
    kXorFalseFieldNumber = 26,
  };
  // string str_regex = 1;
  void clear_str_regex();
  const std::string& str_regex() const;
  void set_str_regex(const std::string& value);
  void set_str_regex(std::string&& value);
  void set_str_regex(const char* value);
  void set_str_regex(const char* value, size_t size);
  std::string* mutable_str_regex();
  std::string* release_str_regex();
  void set_allocated_str_regex(std::string* str_regex);
  private:
  const std::string& _internal_str_regex() const;
  void _internal_set_str_regex(const std::string& value);
  std::string* _internal_mutable_str_regex();
  public:

  // string str_in = 2;
  void clear_str_in();
  const std::string& str_in() const;
  void set_str_in(const std::string& value);
  void set_str_in(std::string&& value);
  void set_str_in(const char* value);
  void set_str_in(const char* value, size_t size);
  std::string* mutable_str_in();
  std::string* release_str_in();
  void set_allocated_str_in(std::string* str_in);
  private:
  const std::string& _internal_str_in() const;
  void _internal_set_str_in(const std::string& value);
  std::string* _internal_mutable_str_in();
  public:

  // string str_nin = 3;
  void clear_str_nin();
  const std::string& str_nin() const;
  void set_str_nin(const std::string& value);
  void set_str_nin(std::string&& value);
  void set_str_nin(const char* value);
  void set_str_nin(const char* value, size_t size);
  std::string* mutable_str_nin();
  std::string* release_str_nin();
  void set_allocated_str_nin(std::string* str_nin);
  private:
  const std::string& _internal_str_nin() const;
  void _internal_set_str_nin(const std::string& value);
  std::string* _internal_mutable_str_nin();
  public:

  // string str_eq = 4;
  void clear_str_eq();
  const std::string& str_eq() const;
  void set_str_eq(const std::string& value);
  void set_str_eq(std::string&& value);
  void set_str_eq(const char* value);
  void set_str_eq(const char* value, size_t size);
  std::string* mutable_str_eq();
  std::string* release_str_eq();
  void set_allocated_str_eq(std::string* str_eq);
  private:
  const std::string& _internal_str_eq() const;
  void _internal_set_str_eq(const std::string& value);
  std::string* _internal_mutable_str_eq();
  public:

  // string str_ne = 5;
  void clear_str_ne();
  const std::string& str_ne() const;
  void set_str_ne(const std::string& value);
  void set_str_ne(std::string&& value);
  void set_str_ne(const char* value);
  void set_str_ne(const char* value, size_t size);
  std::string* mutable_str_ne();
  std::string* release_str_ne();
  void set_allocated_str_ne(std::string* str_ne);
  private:
  const std::string& _internal_str_ne() const;
  void _internal_set_str_ne(const std::string& value);
  std::string* _internal_mutable_str_ne();
  public:

  // double eq = 11;
  void clear_eq();
  double eq() const;
  void set_eq(double value);
  private:
  double _internal_eq() const;
  void _internal_set_eq(double value);
  public:

  // double ne = 12;
  void clear_ne();
  double ne() const;
  void set_ne(double value);
  private:
  double _internal_ne() const;
  void _internal_set_ne(double value);
  public:

  // double gt = 13;
  void clear_gt();
  double gt() const;
  void set_gt(double value);
  private:
  double _internal_gt() const;
  void _internal_set_gt(double value);
  public:

  // double ge = 14;
  void clear_ge();
  double ge() const;
  void set_ge(double value);
  private:
  double _internal_ge() const;
  void _internal_set_ge(double value);
  public:

  // double lt = 15;
  void clear_lt();
  double lt() const;
  void set_lt(double value);
  private:
  double _internal_lt() const;
  void _internal_set_lt(double value);
  public:

  // double le = 16;
  void clear_le();
  double le() const;
  void set_le(double value);
  private:
  double _internal_le() const;
  void _internal_set_le(double value);
  public:

  // int32 and_true = 21;
  void clear_and_true();
  ::PROTOBUF_NAMESPACE_ID::int32 and_true() const;
  void set_and_true(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_and_true() const;
  void _internal_set_and_true(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 or_true = 22;
  void clear_or_true();
  ::PROTOBUF_NAMESPACE_ID::int32 or_true() const;
  void set_or_true(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_or_true() const;
  void _internal_set_or_true(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 xor_true = 23;
  void clear_xor_true();
  ::PROTOBUF_NAMESPACE_ID::int32 xor_true() const;
  void set_xor_true(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xor_true() const;
  void _internal_set_xor_true(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 and_false = 24;
  void clear_and_false();
  ::PROTOBUF_NAMESPACE_ID::int32 and_false() const;
  void set_and_false(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_and_false() const;
  void _internal_set_and_false(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 or_false = 25;
  void clear_or_false();
  ::PROTOBUF_NAMESPACE_ID::int32 or_false() const;
  void set_or_false(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_or_false() const;
  void _internal_set_or_false(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 xor_false = 26;
  void clear_xor_false();
  ::PROTOBUF_NAMESPACE_ID::int32 xor_false() const;
  void set_xor_false(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xor_false() const;
  void _internal_set_xor_false(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.FieldRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_regex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_in_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_nin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_eq_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_ne_;
  double eq_;
  double ne_;
  double gt_;
  double ge_;
  double lt_;
  double le_;
  ::PROTOBUF_NAMESPACE_ID::int32 and_true_;
  ::PROTOBUF_NAMESPACE_ID::int32 or_true_;
  ::PROTOBUF_NAMESPACE_ID::int32 xor_true_;
  ::PROTOBUF_NAMESPACE_ID::int32 and_false_;
  ::PROTOBUF_NAMESPACE_ID::int32 or_false_;
  ::PROTOBUF_NAMESPACE_ID::int32 xor_false_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fourteenth_2eproto;
};
// -------------------------------------------------------------------

class SceneString PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.SceneString) */ {
 public:
  inline SceneString() : SceneString(nullptr) {}
  virtual ~SceneString();

  SceneString(const SceneString& from);
  SceneString(SceneString&& from) noexcept
    : SceneString() {
    *this = ::std::move(from);
  }

  inline SceneString& operator=(const SceneString& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneString& operator=(SceneString&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneString* internal_default_instance() {
    return reinterpret_cast<const SceneString*>(
               &_SceneString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SceneString& a, SceneString& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneString* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneString* New() const final {
    return CreateMaybeMessage<SceneString>(nullptr);
  }

  SceneString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneString& from);
  void MergeFrom(const SceneString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.SceneString";
  }
  protected:
  explicit SceneString(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fourteenth_2eproto);
    return ::descriptor_table_fourteenth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIamsInFieldNumber = 1,
    kIamsInsFieldNumber = 2,
    kIamsNinFieldNumber = 3,
    kIamsNinsFieldNumber = 4,
    kIamsEqFieldNumber = 5,
    kIamsEqsFieldNumber = 6,
    kIamsEqssFieldNumber = 7,
    kIamsNeFieldNumber = 8,
    kIamsNesFieldNumber = 9,
    kIamsNessFieldNumber = 10,
    kIamsInSymbolFieldNumber = 11,
    kIamsNinSymbolFieldNumber = 12,
  };
  // string iams_in = 1 [(.mam.xrule) = {
  void clear_iams_in();
  const std::string& iams_in() const;
  void set_iams_in(const std::string& value);
  void set_iams_in(std::string&& value);
  void set_iams_in(const char* value);
  void set_iams_in(const char* value, size_t size);
  std::string* mutable_iams_in();
  std::string* release_iams_in();
  void set_allocated_iams_in(std::string* iams_in);
  private:
  const std::string& _internal_iams_in() const;
  void _internal_set_iams_in(const std::string& value);
  std::string* _internal_mutable_iams_in();
  public:

  // string iams_ins = 2 [(.mam.xrule) = {
  void clear_iams_ins();
  const std::string& iams_ins() const;
  void set_iams_ins(const std::string& value);
  void set_iams_ins(std::string&& value);
  void set_iams_ins(const char* value);
  void set_iams_ins(const char* value, size_t size);
  std::string* mutable_iams_ins();
  std::string* release_iams_ins();
  void set_allocated_iams_ins(std::string* iams_ins);
  private:
  const std::string& _internal_iams_ins() const;
  void _internal_set_iams_ins(const std::string& value);
  std::string* _internal_mutable_iams_ins();
  public:

  // string iams_nin = 3 [(.mam.xrule) = {
  void clear_iams_nin();
  const std::string& iams_nin() const;
  void set_iams_nin(const std::string& value);
  void set_iams_nin(std::string&& value);
  void set_iams_nin(const char* value);
  void set_iams_nin(const char* value, size_t size);
  std::string* mutable_iams_nin();
  std::string* release_iams_nin();
  void set_allocated_iams_nin(std::string* iams_nin);
  private:
  const std::string& _internal_iams_nin() const;
  void _internal_set_iams_nin(const std::string& value);
  std::string* _internal_mutable_iams_nin();
  public:

  // string iams_nins = 4 [(.mam.xrule) = {
  void clear_iams_nins();
  const std::string& iams_nins() const;
  void set_iams_nins(const std::string& value);
  void set_iams_nins(std::string&& value);
  void set_iams_nins(const char* value);
  void set_iams_nins(const char* value, size_t size);
  std::string* mutable_iams_nins();
  std::string* release_iams_nins();
  void set_allocated_iams_nins(std::string* iams_nins);
  private:
  const std::string& _internal_iams_nins() const;
  void _internal_set_iams_nins(const std::string& value);
  std::string* _internal_mutable_iams_nins();
  public:

  // string iams_eq = 5 [(.mam.xrule) = {
  void clear_iams_eq();
  const std::string& iams_eq() const;
  void set_iams_eq(const std::string& value);
  void set_iams_eq(std::string&& value);
  void set_iams_eq(const char* value);
  void set_iams_eq(const char* value, size_t size);
  std::string* mutable_iams_eq();
  std::string* release_iams_eq();
  void set_allocated_iams_eq(std::string* iams_eq);
  private:
  const std::string& _internal_iams_eq() const;
  void _internal_set_iams_eq(const std::string& value);
  std::string* _internal_mutable_iams_eq();
  public:

  // string iams_eqs = 6 [(.mam.xrule) = {
  void clear_iams_eqs();
  const std::string& iams_eqs() const;
  void set_iams_eqs(const std::string& value);
  void set_iams_eqs(std::string&& value);
  void set_iams_eqs(const char* value);
  void set_iams_eqs(const char* value, size_t size);
  std::string* mutable_iams_eqs();
  std::string* release_iams_eqs();
  void set_allocated_iams_eqs(std::string* iams_eqs);
  private:
  const std::string& _internal_iams_eqs() const;
  void _internal_set_iams_eqs(const std::string& value);
  std::string* _internal_mutable_iams_eqs();
  public:

  // string iams_eqss = 7 [(.mam.xrule) = {
  void clear_iams_eqss();
  const std::string& iams_eqss() const;
  void set_iams_eqss(const std::string& value);
  void set_iams_eqss(std::string&& value);
  void set_iams_eqss(const char* value);
  void set_iams_eqss(const char* value, size_t size);
  std::string* mutable_iams_eqss();
  std::string* release_iams_eqss();
  void set_allocated_iams_eqss(std::string* iams_eqss);
  private:
  const std::string& _internal_iams_eqss() const;
  void _internal_set_iams_eqss(const std::string& value);
  std::string* _internal_mutable_iams_eqss();
  public:

  // string iams_ne = 8 [(.mam.xrule) = {
  void clear_iams_ne();
  const std::string& iams_ne() const;
  void set_iams_ne(const std::string& value);
  void set_iams_ne(std::string&& value);
  void set_iams_ne(const char* value);
  void set_iams_ne(const char* value, size_t size);
  std::string* mutable_iams_ne();
  std::string* release_iams_ne();
  void set_allocated_iams_ne(std::string* iams_ne);
  private:
  const std::string& _internal_iams_ne() const;
  void _internal_set_iams_ne(const std::string& value);
  std::string* _internal_mutable_iams_ne();
  public:

  // string iams_nes = 9 [(.mam.xrule) = {
  void clear_iams_nes();
  const std::string& iams_nes() const;
  void set_iams_nes(const std::string& value);
  void set_iams_nes(std::string&& value);
  void set_iams_nes(const char* value);
  void set_iams_nes(const char* value, size_t size);
  std::string* mutable_iams_nes();
  std::string* release_iams_nes();
  void set_allocated_iams_nes(std::string* iams_nes);
  private:
  const std::string& _internal_iams_nes() const;
  void _internal_set_iams_nes(const std::string& value);
  std::string* _internal_mutable_iams_nes();
  public:

  // string iams_ness = 10 [(.mam.xrule) = {
  void clear_iams_ness();
  const std::string& iams_ness() const;
  void set_iams_ness(const std::string& value);
  void set_iams_ness(std::string&& value);
  void set_iams_ness(const char* value);
  void set_iams_ness(const char* value, size_t size);
  std::string* mutable_iams_ness();
  std::string* release_iams_ness();
  void set_allocated_iams_ness(std::string* iams_ness);
  private:
  const std::string& _internal_iams_ness() const;
  void _internal_set_iams_ness(const std::string& value);
  std::string* _internal_mutable_iams_ness();
  public:

  // string iams_in_symbol = 11 [(.mam.xrule) = {
  void clear_iams_in_symbol();
  const std::string& iams_in_symbol() const;
  void set_iams_in_symbol(const std::string& value);
  void set_iams_in_symbol(std::string&& value);
  void set_iams_in_symbol(const char* value);
  void set_iams_in_symbol(const char* value, size_t size);
  std::string* mutable_iams_in_symbol();
  std::string* release_iams_in_symbol();
  void set_allocated_iams_in_symbol(std::string* iams_in_symbol);
  private:
  const std::string& _internal_iams_in_symbol() const;
  void _internal_set_iams_in_symbol(const std::string& value);
  std::string* _internal_mutable_iams_in_symbol();
  public:

  // string iams_nin_symbol = 12 [(.mam.xrule) = {
  void clear_iams_nin_symbol();
  const std::string& iams_nin_symbol() const;
  void set_iams_nin_symbol(const std::string& value);
  void set_iams_nin_symbol(std::string&& value);
  void set_iams_nin_symbol(const char* value);
  void set_iams_nin_symbol(const char* value, size_t size);
  std::string* mutable_iams_nin_symbol();
  std::string* release_iams_nin_symbol();
  void set_allocated_iams_nin_symbol(std::string* iams_nin_symbol);
  private:
  const std::string& _internal_iams_nin_symbol() const;
  void _internal_set_iams_nin_symbol(const std::string& value);
  std::string* _internal_mutable_iams_nin_symbol();
  public:

  // @@protoc_insertion_point(class_scope:mam.SceneString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iams_in_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iams_ins_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iams_nin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iams_nins_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iams_eq_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iams_eqs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iams_eqss_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iams_ne_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iams_nes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iams_ness_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iams_in_symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iams_nin_symbol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fourteenth_2eproto;
};
// -------------------------------------------------------------------

class SceneInt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.SceneInt) */ {
 public:
  inline SceneInt() : SceneInt(nullptr) {}
  virtual ~SceneInt();

  SceneInt(const SceneInt& from);
  SceneInt(SceneInt&& from) noexcept
    : SceneInt() {
    *this = ::std::move(from);
  }

  inline SceneInt& operator=(const SceneInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneInt& operator=(SceneInt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneInt* internal_default_instance() {
    return reinterpret_cast<const SceneInt*>(
               &_SceneInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SceneInt& a, SceneInt& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneInt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneInt* New() const final {
    return CreateMaybeMessage<SceneInt>(nullptr);
  }

  SceneInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneInt& from);
  void MergeFrom(const SceneInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.SceneInt";
  }
  protected:
  explicit SceneInt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fourteenth_2eproto);
    return ::descriptor_table_fourteenth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIamiEqFieldNumber = 1,
    kIamiNeFieldNumber = 2,
    kIamiGtFieldNumber = 3,
    kIamiGeFieldNumber = 4,
    kIamiLtFieldNumber = 5,
    kIamiLeFieldNumber = 6,
    kIamiGeLtFieldNumber = 7,
    kIamiEqZeroFieldNumber = 8,
    kIamiNeZeroFieldNumber = 9,
    kIamiGtZeroFieldNumber = 10,
    kIamiGeZeroFieldNumber = 11,
    kIamiLtZeroFieldNumber = 12,
    kIamiLeZeroFieldNumber = 13,
    kIamiGeLtZeroLeftFieldNumber = 14,
    kIamiGeLtZeroRightFieldNumber = 15,
  };
  // int32 iami_eq = 1 [(.mam.xrule) = {
  void clear_iami_eq();
  ::PROTOBUF_NAMESPACE_ID::int32 iami_eq() const;
  void set_iami_eq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iami_eq() const;
  void _internal_set_iami_eq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iami_ne = 2 [(.mam.xrule) = {
  void clear_iami_ne();
  ::PROTOBUF_NAMESPACE_ID::int32 iami_ne() const;
  void set_iami_ne(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iami_ne() const;
  void _internal_set_iami_ne(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iami_gt = 3 [(.mam.xrule) = {
  void clear_iami_gt();
  ::PROTOBUF_NAMESPACE_ID::int32 iami_gt() const;
  void set_iami_gt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iami_gt() const;
  void _internal_set_iami_gt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iami_ge = 4 [(.mam.xrule) = {
  void clear_iami_ge();
  ::PROTOBUF_NAMESPACE_ID::int32 iami_ge() const;
  void set_iami_ge(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iami_ge() const;
  void _internal_set_iami_ge(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iami_lt = 5 [(.mam.xrule) = {
  void clear_iami_lt();
  ::PROTOBUF_NAMESPACE_ID::int32 iami_lt() const;
  void set_iami_lt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iami_lt() const;
  void _internal_set_iami_lt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iami_le = 6 [(.mam.xrule) = {
  void clear_iami_le();
  ::PROTOBUF_NAMESPACE_ID::int32 iami_le() const;
  void set_iami_le(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iami_le() const;
  void _internal_set_iami_le(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iami_ge_lt = 7 [(.mam.xrule) = {
  void clear_iami_ge_lt();
  ::PROTOBUF_NAMESPACE_ID::int32 iami_ge_lt() const;
  void set_iami_ge_lt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iami_ge_lt() const;
  void _internal_set_iami_ge_lt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iami_eq_zero = 8 [(.mam.xrule) = {
  void clear_iami_eq_zero();
  ::PROTOBUF_NAMESPACE_ID::int32 iami_eq_zero() const;
  void set_iami_eq_zero(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iami_eq_zero() const;
  void _internal_set_iami_eq_zero(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iami_ne_zero = 9 [(.mam.xrule) = {
  void clear_iami_ne_zero();
  ::PROTOBUF_NAMESPACE_ID::int32 iami_ne_zero() const;
  void set_iami_ne_zero(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iami_ne_zero() const;
  void _internal_set_iami_ne_zero(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iami_gt_zero = 10 [(.mam.xrule) = {
  void clear_iami_gt_zero();
  ::PROTOBUF_NAMESPACE_ID::int32 iami_gt_zero() const;
  void set_iami_gt_zero(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iami_gt_zero() const;
  void _internal_set_iami_gt_zero(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iami_ge_zero = 11 [(.mam.xrule) = {
  void clear_iami_ge_zero();
  ::PROTOBUF_NAMESPACE_ID::int32 iami_ge_zero() const;
  void set_iami_ge_zero(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iami_ge_zero() const;
  void _internal_set_iami_ge_zero(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iami_lt_zero = 12 [(.mam.xrule) = {
  void clear_iami_lt_zero();
  ::PROTOBUF_NAMESPACE_ID::int32 iami_lt_zero() const;
  void set_iami_lt_zero(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iami_lt_zero() const;
  void _internal_set_iami_lt_zero(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iami_le_zero = 13 [(.mam.xrule) = {
  void clear_iami_le_zero();
  ::PROTOBUF_NAMESPACE_ID::int32 iami_le_zero() const;
  void set_iami_le_zero(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iami_le_zero() const;
  void _internal_set_iami_le_zero(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iami_ge_lt_zero_left = 14 [(.mam.xrule) = {
  void clear_iami_ge_lt_zero_left();
  ::PROTOBUF_NAMESPACE_ID::int32 iami_ge_lt_zero_left() const;
  void set_iami_ge_lt_zero_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iami_ge_lt_zero_left() const;
  void _internal_set_iami_ge_lt_zero_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iami_ge_lt_zero_right = 15 [(.mam.xrule) = {
  void clear_iami_ge_lt_zero_right();
  ::PROTOBUF_NAMESPACE_ID::int32 iami_ge_lt_zero_right() const;
  void set_iami_ge_lt_zero_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iami_ge_lt_zero_right() const;
  void _internal_set_iami_ge_lt_zero_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.SceneInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 iami_eq_;
  ::PROTOBUF_NAMESPACE_ID::int32 iami_ne_;
  ::PROTOBUF_NAMESPACE_ID::int32 iami_gt_;
  ::PROTOBUF_NAMESPACE_ID::int32 iami_ge_;
  ::PROTOBUF_NAMESPACE_ID::int32 iami_lt_;
  ::PROTOBUF_NAMESPACE_ID::int32 iami_le_;
  ::PROTOBUF_NAMESPACE_ID::int32 iami_ge_lt_;
  ::PROTOBUF_NAMESPACE_ID::int32 iami_eq_zero_;
  ::PROTOBUF_NAMESPACE_ID::int32 iami_ne_zero_;
  ::PROTOBUF_NAMESPACE_ID::int32 iami_gt_zero_;
  ::PROTOBUF_NAMESPACE_ID::int32 iami_ge_zero_;
  ::PROTOBUF_NAMESPACE_ID::int32 iami_lt_zero_;
  ::PROTOBUF_NAMESPACE_ID::int32 iami_le_zero_;
  ::PROTOBUF_NAMESPACE_ID::int32 iami_ge_lt_zero_left_;
  ::PROTOBUF_NAMESPACE_ID::int32 iami_ge_lt_zero_right_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fourteenth_2eproto;
};
// -------------------------------------------------------------------

class SceneUInt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.SceneUInt) */ {
 public:
  inline SceneUInt() : SceneUInt(nullptr) {}
  virtual ~SceneUInt();

  SceneUInt(const SceneUInt& from);
  SceneUInt(SceneUInt&& from) noexcept
    : SceneUInt() {
    *this = ::std::move(from);
  }

  inline SceneUInt& operator=(const SceneUInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneUInt& operator=(SceneUInt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneUInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneUInt* internal_default_instance() {
    return reinterpret_cast<const SceneUInt*>(
               &_SceneUInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SceneUInt& a, SceneUInt& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneUInt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneUInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneUInt* New() const final {
    return CreateMaybeMessage<SceneUInt>(nullptr);
  }

  SceneUInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneUInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneUInt& from);
  void MergeFrom(const SceneUInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneUInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.SceneUInt";
  }
  protected:
  explicit SceneUInt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fourteenth_2eproto);
    return ::descriptor_table_fourteenth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIamuiEqFieldNumber = 1,
    kIamuiNeFieldNumber = 2,
    kIamuiGtFieldNumber = 3,
    kIamuiGeFieldNumber = 4,
    kIamuiLtFieldNumber = 5,
    kIamuiLeFieldNumber = 6,
    kIamuiGeLtFieldNumber = 7,
    kIamuiEqZeroFieldNumber = 8,
    kIamuiNeZeroFieldNumber = 9,
    kIamuiGtZeroFieldNumber = 10,
    kIamuiGeZeroFieldNumber = 11,
    kIamuiLeZeroFieldNumber = 12,
    kIamuiGeLtZeroLeftFieldNumber = 13,
  };
  // uint32 iamui_eq = 1 [(.mam.xrule) = {
  void clear_iamui_eq();
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_eq() const;
  void set_iamui_eq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iamui_eq() const;
  void _internal_set_iamui_eq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iamui_ne = 2 [(.mam.xrule) = {
  void clear_iamui_ne();
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_ne() const;
  void set_iamui_ne(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iamui_ne() const;
  void _internal_set_iamui_ne(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iamui_gt = 3 [(.mam.xrule) = {
  void clear_iamui_gt();
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_gt() const;
  void set_iamui_gt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iamui_gt() const;
  void _internal_set_iamui_gt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iamui_ge = 4 [(.mam.xrule) = {
  void clear_iamui_ge();
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_ge() const;
  void set_iamui_ge(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iamui_ge() const;
  void _internal_set_iamui_ge(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iamui_lt = 5 [(.mam.xrule) = {
  void clear_iamui_lt();
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_lt() const;
  void set_iamui_lt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iamui_lt() const;
  void _internal_set_iamui_lt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iamui_le = 6 [(.mam.xrule) = {
  void clear_iamui_le();
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_le() const;
  void set_iamui_le(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iamui_le() const;
  void _internal_set_iamui_le(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iamui_ge_lt = 7 [(.mam.xrule) = {
  void clear_iamui_ge_lt();
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_ge_lt() const;
  void set_iamui_ge_lt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iamui_ge_lt() const;
  void _internal_set_iamui_ge_lt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iamui_eq_zero = 8 [(.mam.xrule) = {
  void clear_iamui_eq_zero();
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_eq_zero() const;
  void set_iamui_eq_zero(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iamui_eq_zero() const;
  void _internal_set_iamui_eq_zero(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iamui_ne_zero = 9 [(.mam.xrule) = {
  void clear_iamui_ne_zero();
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_ne_zero() const;
  void set_iamui_ne_zero(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iamui_ne_zero() const;
  void _internal_set_iamui_ne_zero(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iamui_gt_zero = 10 [(.mam.xrule) = {
  void clear_iamui_gt_zero();
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_gt_zero() const;
  void set_iamui_gt_zero(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iamui_gt_zero() const;
  void _internal_set_iamui_gt_zero(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iamui_ge_zero = 11 [(.mam.xrule) = {
  void clear_iamui_ge_zero();
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_ge_zero() const;
  void set_iamui_ge_zero(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iamui_ge_zero() const;
  void _internal_set_iamui_ge_zero(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iamui_le_zero = 12 [(.mam.xrule) = {
  void clear_iamui_le_zero();
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_le_zero() const;
  void set_iamui_le_zero(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iamui_le_zero() const;
  void _internal_set_iamui_le_zero(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iamui_ge_lt_zero_left = 13 [(.mam.xrule) = {
  void clear_iamui_ge_lt_zero_left();
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_ge_lt_zero_left() const;
  void set_iamui_ge_lt_zero_left(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iamui_ge_lt_zero_left() const;
  void _internal_set_iamui_ge_lt_zero_left(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.SceneUInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_eq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_ne_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_gt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_ge_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_lt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_le_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_ge_lt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_eq_zero_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_ne_zero_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_gt_zero_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_ge_zero_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_le_zero_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iamui_ge_lt_zero_left_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fourteenth_2eproto;
};
// -------------------------------------------------------------------

class SceneLong PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.SceneLong) */ {
 public:
  inline SceneLong() : SceneLong(nullptr) {}
  virtual ~SceneLong();

  SceneLong(const SceneLong& from);
  SceneLong(SceneLong&& from) noexcept
    : SceneLong() {
    *this = ::std::move(from);
  }

  inline SceneLong& operator=(const SceneLong& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneLong& operator=(SceneLong&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneLong& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneLong* internal_default_instance() {
    return reinterpret_cast<const SceneLong*>(
               &_SceneLong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SceneLong& a, SceneLong& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneLong* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneLong* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneLong* New() const final {
    return CreateMaybeMessage<SceneLong>(nullptr);
  }

  SceneLong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneLong>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneLong& from);
  void MergeFrom(const SceneLong& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneLong* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.SceneLong";
  }
  protected:
  explicit SceneLong(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fourteenth_2eproto);
    return ::descriptor_table_fourteenth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIamlEqFieldNumber = 1,
    kIamlNeFieldNumber = 2,
    kIamlGtFieldNumber = 3,
    kIamlGeFieldNumber = 4,
    kIamlLtFieldNumber = 5,
    kIamlLeFieldNumber = 6,
    kIamlGeLtFieldNumber = 7,
    kIamlEqZeroFieldNumber = 8,
    kIamlNeZeroFieldNumber = 9,
    kIamlGtZeroFieldNumber = 10,
    kIamlGeZeroFieldNumber = 11,
    kIamlLtZeroFieldNumber = 12,
    kIamlLeZeroFieldNumber = 13,
    kIamlGeLtZeroLeftFieldNumber = 14,
    kIamlGeLtZeroRightFieldNumber = 15,
  };
  // int64 iaml_eq = 1 [(.mam.xrule) = {
  void clear_iaml_eq();
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_eq() const;
  void set_iaml_eq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_iaml_eq() const;
  void _internal_set_iaml_eq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 iaml_ne = 2 [(.mam.xrule) = {
  void clear_iaml_ne();
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_ne() const;
  void set_iaml_ne(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_iaml_ne() const;
  void _internal_set_iaml_ne(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 iaml_gt = 3 [(.mam.xrule) = {
  void clear_iaml_gt();
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_gt() const;
  void set_iaml_gt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_iaml_gt() const;
  void _internal_set_iaml_gt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 iaml_ge = 4 [(.mam.xrule) = {
  void clear_iaml_ge();
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_ge() const;
  void set_iaml_ge(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_iaml_ge() const;
  void _internal_set_iaml_ge(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 iaml_lt = 5 [(.mam.xrule) = {
  void clear_iaml_lt();
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_lt() const;
  void set_iaml_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_iaml_lt() const;
  void _internal_set_iaml_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 iaml_le = 6 [(.mam.xrule) = {
  void clear_iaml_le();
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_le() const;
  void set_iaml_le(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_iaml_le() const;
  void _internal_set_iaml_le(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 iaml_ge_lt = 7 [(.mam.xrule) = {
  void clear_iaml_ge_lt();
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_ge_lt() const;
  void set_iaml_ge_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_iaml_ge_lt() const;
  void _internal_set_iaml_ge_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 iaml_eq_zero = 8 [(.mam.xrule) = {
  void clear_iaml_eq_zero();
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_eq_zero() const;
  void set_iaml_eq_zero(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_iaml_eq_zero() const;
  void _internal_set_iaml_eq_zero(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 iaml_ne_zero = 9 [(.mam.xrule) = {
  void clear_iaml_ne_zero();
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_ne_zero() const;
  void set_iaml_ne_zero(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_iaml_ne_zero() const;
  void _internal_set_iaml_ne_zero(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 iaml_gt_zero = 10 [(.mam.xrule) = {
  void clear_iaml_gt_zero();
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_gt_zero() const;
  void set_iaml_gt_zero(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_iaml_gt_zero() const;
  void _internal_set_iaml_gt_zero(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 iaml_ge_zero = 11 [(.mam.xrule) = {
  void clear_iaml_ge_zero();
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_ge_zero() const;
  void set_iaml_ge_zero(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_iaml_ge_zero() const;
  void _internal_set_iaml_ge_zero(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 iaml_lt_zero = 12 [(.mam.xrule) = {
  void clear_iaml_lt_zero();
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_lt_zero() const;
  void set_iaml_lt_zero(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_iaml_lt_zero() const;
  void _internal_set_iaml_lt_zero(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 iaml_le_zero = 13 [(.mam.xrule) = {
  void clear_iaml_le_zero();
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_le_zero() const;
  void set_iaml_le_zero(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_iaml_le_zero() const;
  void _internal_set_iaml_le_zero(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 iaml_ge_lt_zero_left = 14 [(.mam.xrule) = {
  void clear_iaml_ge_lt_zero_left();
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_ge_lt_zero_left() const;
  void set_iaml_ge_lt_zero_left(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_iaml_ge_lt_zero_left() const;
  void _internal_set_iaml_ge_lt_zero_left(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 iaml_ge_lt_zero_right = 15 [(.mam.xrule) = {
  void clear_iaml_ge_lt_zero_right();
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_ge_lt_zero_right() const;
  void set_iaml_ge_lt_zero_right(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_iaml_ge_lt_zero_right() const;
  void _internal_set_iaml_ge_lt_zero_right(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.SceneLong)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_eq_;
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_ne_;
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_gt_;
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_ge_;
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_lt_;
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_le_;
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_ge_lt_;
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_eq_zero_;
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_ne_zero_;
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_gt_zero_;
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_ge_zero_;
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_lt_zero_;
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_le_zero_;
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_ge_lt_zero_left_;
  ::PROTOBUF_NAMESPACE_ID::int64 iaml_ge_lt_zero_right_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fourteenth_2eproto;
};
// -------------------------------------------------------------------

class SceneULong PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.SceneULong) */ {
 public:
  inline SceneULong() : SceneULong(nullptr) {}
  virtual ~SceneULong();

  SceneULong(const SceneULong& from);
  SceneULong(SceneULong&& from) noexcept
    : SceneULong() {
    *this = ::std::move(from);
  }

  inline SceneULong& operator=(const SceneULong& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneULong& operator=(SceneULong&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneULong& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneULong* internal_default_instance() {
    return reinterpret_cast<const SceneULong*>(
               &_SceneULong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SceneULong& a, SceneULong& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneULong* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneULong* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneULong* New() const final {
    return CreateMaybeMessage<SceneULong>(nullptr);
  }

  SceneULong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneULong>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneULong& from);
  void MergeFrom(const SceneULong& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneULong* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.SceneULong";
  }
  protected:
  explicit SceneULong(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fourteenth_2eproto);
    return ::descriptor_table_fourteenth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIamulEqFieldNumber = 1,
    kIamulNeFieldNumber = 2,
    kIamulGtFieldNumber = 3,
    kIamulGeFieldNumber = 4,
    kIamulLtFieldNumber = 5,
    kIamulLeFieldNumber = 6,
    kIamulGeLtFieldNumber = 7,
    kIamulEqZeroFieldNumber = 8,
    kIamulNeZeroFieldNumber = 9,
    kIamulGtZeroFieldNumber = 10,
    kIamulGeZeroFieldNumber = 11,
    kIamulLeZeroFieldNumber = 12,
    kIamulGeLtZeroLeftFieldNumber = 13,
  };
  // uint64 iamul_eq = 1 [(.mam.xrule) = {
  void clear_iamul_eq();
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_eq() const;
  void set_iamul_eq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iamul_eq() const;
  void _internal_set_iamul_eq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 iamul_ne = 2 [(.mam.xrule) = {
  void clear_iamul_ne();
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_ne() const;
  void set_iamul_ne(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iamul_ne() const;
  void _internal_set_iamul_ne(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 iamul_gt = 3 [(.mam.xrule) = {
  void clear_iamul_gt();
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_gt() const;
  void set_iamul_gt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iamul_gt() const;
  void _internal_set_iamul_gt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 iamul_ge = 4 [(.mam.xrule) = {
  void clear_iamul_ge();
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_ge() const;
  void set_iamul_ge(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iamul_ge() const;
  void _internal_set_iamul_ge(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 iamul_lt = 5 [(.mam.xrule) = {
  void clear_iamul_lt();
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_lt() const;
  void set_iamul_lt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iamul_lt() const;
  void _internal_set_iamul_lt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 iamul_le = 6 [(.mam.xrule) = {
  void clear_iamul_le();
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_le() const;
  void set_iamul_le(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iamul_le() const;
  void _internal_set_iamul_le(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 iamul_ge_lt = 7 [(.mam.xrule) = {
  void clear_iamul_ge_lt();
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_ge_lt() const;
  void set_iamul_ge_lt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iamul_ge_lt() const;
  void _internal_set_iamul_ge_lt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 iamul_eq_zero = 8 [(.mam.xrule) = {
  void clear_iamul_eq_zero();
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_eq_zero() const;
  void set_iamul_eq_zero(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iamul_eq_zero() const;
  void _internal_set_iamul_eq_zero(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 iamul_ne_zero = 9 [(.mam.xrule) = {
  void clear_iamul_ne_zero();
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_ne_zero() const;
  void set_iamul_ne_zero(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iamul_ne_zero() const;
  void _internal_set_iamul_ne_zero(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 iamul_gt_zero = 10 [(.mam.xrule) = {
  void clear_iamul_gt_zero();
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_gt_zero() const;
  void set_iamul_gt_zero(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iamul_gt_zero() const;
  void _internal_set_iamul_gt_zero(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 iamul_ge_zero = 11 [(.mam.xrule) = {
  void clear_iamul_ge_zero();
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_ge_zero() const;
  void set_iamul_ge_zero(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iamul_ge_zero() const;
  void _internal_set_iamul_ge_zero(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 iamul_le_zero = 12 [(.mam.xrule) = {
  void clear_iamul_le_zero();
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_le_zero() const;
  void set_iamul_le_zero(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iamul_le_zero() const;
  void _internal_set_iamul_le_zero(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 iamul_ge_lt_zero_left = 13 [(.mam.xrule) = {
  void clear_iamul_ge_lt_zero_left();
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_ge_lt_zero_left() const;
  void set_iamul_ge_lt_zero_left(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iamul_ge_lt_zero_left() const;
  void _internal_set_iamul_ge_lt_zero_left(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.SceneULong)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_eq_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_ne_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_gt_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_ge_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_lt_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_le_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_ge_lt_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_eq_zero_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_ne_zero_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_gt_zero_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_ge_zero_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_le_zero_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iamul_ge_lt_zero_left_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fourteenth_2eproto;
};
// -------------------------------------------------------------------

class SceneFloat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.SceneFloat) */ {
 public:
  inline SceneFloat() : SceneFloat(nullptr) {}
  virtual ~SceneFloat();

  SceneFloat(const SceneFloat& from);
  SceneFloat(SceneFloat&& from) noexcept
    : SceneFloat() {
    *this = ::std::move(from);
  }

  inline SceneFloat& operator=(const SceneFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneFloat& operator=(SceneFloat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneFloat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneFloat* internal_default_instance() {
    return reinterpret_cast<const SceneFloat*>(
               &_SceneFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SceneFloat& a, SceneFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneFloat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneFloat* New() const final {
    return CreateMaybeMessage<SceneFloat>(nullptr);
  }

  SceneFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneFloat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneFloat& from);
  void MergeFrom(const SceneFloat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneFloat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.SceneFloat";
  }
  protected:
  explicit SceneFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fourteenth_2eproto);
    return ::descriptor_table_fourteenth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIamfEqFieldNumber = 1,
    kIamfNeFieldNumber = 2,
    kIamfGtFieldNumber = 3,
    kIamfGeFieldNumber = 4,
    kIamfLtFieldNumber = 5,
    kIamfLeFieldNumber = 6,
    kIamfGeLtFieldNumber = 7,
    kIamfEqZeroFieldNumber = 8,
    kIamfNeZeroFieldNumber = 9,
    kIamfGtZeroFieldNumber = 10,
    kIamfGeZeroFieldNumber = 11,
    kIamfLtZeroFieldNumber = 12,
    kIamfLeZeroFieldNumber = 13,
    kIamfGeLtZeroLeftFieldNumber = 14,
    kIamfGeLtZeroRightFieldNumber = 15,
  };
  // float iamf_eq = 1 [(.mam.xrule) = {
  void clear_iamf_eq();
  float iamf_eq() const;
  void set_iamf_eq(float value);
  private:
  float _internal_iamf_eq() const;
  void _internal_set_iamf_eq(float value);
  public:

  // float iamf_ne = 2 [(.mam.xrule) = {
  void clear_iamf_ne();
  float iamf_ne() const;
  void set_iamf_ne(float value);
  private:
  float _internal_iamf_ne() const;
  void _internal_set_iamf_ne(float value);
  public:

  // float iamf_gt = 3 [(.mam.xrule) = {
  void clear_iamf_gt();
  float iamf_gt() const;
  void set_iamf_gt(float value);
  private:
  float _internal_iamf_gt() const;
  void _internal_set_iamf_gt(float value);
  public:

  // float iamf_ge = 4 [(.mam.xrule) = {
  void clear_iamf_ge();
  float iamf_ge() const;
  void set_iamf_ge(float value);
  private:
  float _internal_iamf_ge() const;
  void _internal_set_iamf_ge(float value);
  public:

  // float iamf_lt = 5 [(.mam.xrule) = {
  void clear_iamf_lt();
  float iamf_lt() const;
  void set_iamf_lt(float value);
  private:
  float _internal_iamf_lt() const;
  void _internal_set_iamf_lt(float value);
  public:

  // float iamf_le = 6 [(.mam.xrule) = {
  void clear_iamf_le();
  float iamf_le() const;
  void set_iamf_le(float value);
  private:
  float _internal_iamf_le() const;
  void _internal_set_iamf_le(float value);
  public:

  // float iamf_ge_lt = 7 [(.mam.xrule) = {
  void clear_iamf_ge_lt();
  float iamf_ge_lt() const;
  void set_iamf_ge_lt(float value);
  private:
  float _internal_iamf_ge_lt() const;
  void _internal_set_iamf_ge_lt(float value);
  public:

  // float iamf_eq_zero = 8 [(.mam.xrule) = {
  void clear_iamf_eq_zero();
  float iamf_eq_zero() const;
  void set_iamf_eq_zero(float value);
  private:
  float _internal_iamf_eq_zero() const;
  void _internal_set_iamf_eq_zero(float value);
  public:

  // float iamf_ne_zero = 9 [(.mam.xrule) = {
  void clear_iamf_ne_zero();
  float iamf_ne_zero() const;
  void set_iamf_ne_zero(float value);
  private:
  float _internal_iamf_ne_zero() const;
  void _internal_set_iamf_ne_zero(float value);
  public:

  // float iamf_gt_zero = 10 [(.mam.xrule) = {
  void clear_iamf_gt_zero();
  float iamf_gt_zero() const;
  void set_iamf_gt_zero(float value);
  private:
  float _internal_iamf_gt_zero() const;
  void _internal_set_iamf_gt_zero(float value);
  public:

  // float iamf_ge_zero = 11 [(.mam.xrule) = {
  void clear_iamf_ge_zero();
  float iamf_ge_zero() const;
  void set_iamf_ge_zero(float value);
  private:
  float _internal_iamf_ge_zero() const;
  void _internal_set_iamf_ge_zero(float value);
  public:

  // float iamf_lt_zero = 12 [(.mam.xrule) = {
  void clear_iamf_lt_zero();
  float iamf_lt_zero() const;
  void set_iamf_lt_zero(float value);
  private:
  float _internal_iamf_lt_zero() const;
  void _internal_set_iamf_lt_zero(float value);
  public:

  // float iamf_le_zero = 13 [(.mam.xrule) = {
  void clear_iamf_le_zero();
  float iamf_le_zero() const;
  void set_iamf_le_zero(float value);
  private:
  float _internal_iamf_le_zero() const;
  void _internal_set_iamf_le_zero(float value);
  public:

  // float iamf_ge_lt_zero_left = 14 [(.mam.xrule) = {
  void clear_iamf_ge_lt_zero_left();
  float iamf_ge_lt_zero_left() const;
  void set_iamf_ge_lt_zero_left(float value);
  private:
  float _internal_iamf_ge_lt_zero_left() const;
  void _internal_set_iamf_ge_lt_zero_left(float value);
  public:

  // float iamf_ge_lt_zero_right = 15 [(.mam.xrule) = {
  void clear_iamf_ge_lt_zero_right();
  float iamf_ge_lt_zero_right() const;
  void set_iamf_ge_lt_zero_right(float value);
  private:
  float _internal_iamf_ge_lt_zero_right() const;
  void _internal_set_iamf_ge_lt_zero_right(float value);
  public:

  // @@protoc_insertion_point(class_scope:mam.SceneFloat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float iamf_eq_;
  float iamf_ne_;
  float iamf_gt_;
  float iamf_ge_;
  float iamf_lt_;
  float iamf_le_;
  float iamf_ge_lt_;
  float iamf_eq_zero_;
  float iamf_ne_zero_;
  float iamf_gt_zero_;
  float iamf_ge_zero_;
  float iamf_lt_zero_;
  float iamf_le_zero_;
  float iamf_ge_lt_zero_left_;
  float iamf_ge_lt_zero_right_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fourteenth_2eproto;
};
// -------------------------------------------------------------------

class SceneDouble PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.SceneDouble) */ {
 public:
  inline SceneDouble() : SceneDouble(nullptr) {}
  virtual ~SceneDouble();

  SceneDouble(const SceneDouble& from);
  SceneDouble(SceneDouble&& from) noexcept
    : SceneDouble() {
    *this = ::std::move(from);
  }

  inline SceneDouble& operator=(const SceneDouble& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneDouble& operator=(SceneDouble&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneDouble& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneDouble* internal_default_instance() {
    return reinterpret_cast<const SceneDouble*>(
               &_SceneDouble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SceneDouble& a, SceneDouble& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneDouble* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneDouble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneDouble* New() const final {
    return CreateMaybeMessage<SceneDouble>(nullptr);
  }

  SceneDouble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneDouble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneDouble& from);
  void MergeFrom(const SceneDouble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneDouble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.SceneDouble";
  }
  protected:
  explicit SceneDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fourteenth_2eproto);
    return ::descriptor_table_fourteenth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIamdEqFieldNumber = 1,
    kIamdNeFieldNumber = 2,
    kIamdGtFieldNumber = 3,
    kIamdGeFieldNumber = 4,
    kIamdLtFieldNumber = 5,
    kIamdLeFieldNumber = 6,
    kIamdGeLtFieldNumber = 7,
    kIamdEqZeroFieldNumber = 8,
    kIamdNeZeroFieldNumber = 9,
    kIamdGtZeroFieldNumber = 10,
    kIamdGeZeroFieldNumber = 11,
    kIamdLtZeroFieldNumber = 12,
    kIamdLeZeroFieldNumber = 13,
    kIamdGeLtZeroLeftFieldNumber = 14,
    kIamdGeLtZeroRightFieldNumber = 15,
  };
  // double iamd_eq = 1 [(.mam.xrule) = {
  void clear_iamd_eq();
  double iamd_eq() const;
  void set_iamd_eq(double value);
  private:
  double _internal_iamd_eq() const;
  void _internal_set_iamd_eq(double value);
  public:

  // double iamd_ne = 2 [(.mam.xrule) = {
  void clear_iamd_ne();
  double iamd_ne() const;
  void set_iamd_ne(double value);
  private:
  double _internal_iamd_ne() const;
  void _internal_set_iamd_ne(double value);
  public:

  // double iamd_gt = 3 [(.mam.xrule) = {
  void clear_iamd_gt();
  double iamd_gt() const;
  void set_iamd_gt(double value);
  private:
  double _internal_iamd_gt() const;
  void _internal_set_iamd_gt(double value);
  public:

  // double iamd_ge = 4 [(.mam.xrule) = {
  void clear_iamd_ge();
  double iamd_ge() const;
  void set_iamd_ge(double value);
  private:
  double _internal_iamd_ge() const;
  void _internal_set_iamd_ge(double value);
  public:

  // double iamd_lt = 5 [(.mam.xrule) = {
  void clear_iamd_lt();
  double iamd_lt() const;
  void set_iamd_lt(double value);
  private:
  double _internal_iamd_lt() const;
  void _internal_set_iamd_lt(double value);
  public:

  // double iamd_le = 6 [(.mam.xrule) = {
  void clear_iamd_le();
  double iamd_le() const;
  void set_iamd_le(double value);
  private:
  double _internal_iamd_le() const;
  void _internal_set_iamd_le(double value);
  public:

  // double iamd_ge_lt = 7 [(.mam.xrule) = {
  void clear_iamd_ge_lt();
  double iamd_ge_lt() const;
  void set_iamd_ge_lt(double value);
  private:
  double _internal_iamd_ge_lt() const;
  void _internal_set_iamd_ge_lt(double value);
  public:

  // double iamd_eq_zero = 8 [(.mam.xrule) = {
  void clear_iamd_eq_zero();
  double iamd_eq_zero() const;
  void set_iamd_eq_zero(double value);
  private:
  double _internal_iamd_eq_zero() const;
  void _internal_set_iamd_eq_zero(double value);
  public:

  // double iamd_ne_zero = 9 [(.mam.xrule) = {
  void clear_iamd_ne_zero();
  double iamd_ne_zero() const;
  void set_iamd_ne_zero(double value);
  private:
  double _internal_iamd_ne_zero() const;
  void _internal_set_iamd_ne_zero(double value);
  public:

  // double iamd_gt_zero = 10 [(.mam.xrule) = {
  void clear_iamd_gt_zero();
  double iamd_gt_zero() const;
  void set_iamd_gt_zero(double value);
  private:
  double _internal_iamd_gt_zero() const;
  void _internal_set_iamd_gt_zero(double value);
  public:

  // double iamd_ge_zero = 11 [(.mam.xrule) = {
  void clear_iamd_ge_zero();
  double iamd_ge_zero() const;
  void set_iamd_ge_zero(double value);
  private:
  double _internal_iamd_ge_zero() const;
  void _internal_set_iamd_ge_zero(double value);
  public:

  // double iamd_lt_zero = 12 [(.mam.xrule) = {
  void clear_iamd_lt_zero();
  double iamd_lt_zero() const;
  void set_iamd_lt_zero(double value);
  private:
  double _internal_iamd_lt_zero() const;
  void _internal_set_iamd_lt_zero(double value);
  public:

  // double iamd_le_zero = 13 [(.mam.xrule) = {
  void clear_iamd_le_zero();
  double iamd_le_zero() const;
  void set_iamd_le_zero(double value);
  private:
  double _internal_iamd_le_zero() const;
  void _internal_set_iamd_le_zero(double value);
  public:

  // double iamd_ge_lt_zero_left = 14 [(.mam.xrule) = {
  void clear_iamd_ge_lt_zero_left();
  double iamd_ge_lt_zero_left() const;
  void set_iamd_ge_lt_zero_left(double value);
  private:
  double _internal_iamd_ge_lt_zero_left() const;
  void _internal_set_iamd_ge_lt_zero_left(double value);
  public:

  // double iamd_ge_lt_zero_right = 15 [(.mam.xrule) = {
  void clear_iamd_ge_lt_zero_right();
  double iamd_ge_lt_zero_right() const;
  void set_iamd_ge_lt_zero_right(double value);
  private:
  double _internal_iamd_ge_lt_zero_right() const;
  void _internal_set_iamd_ge_lt_zero_right(double value);
  public:

  // @@protoc_insertion_point(class_scope:mam.SceneDouble)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double iamd_eq_;
  double iamd_ne_;
  double iamd_gt_;
  double iamd_ge_;
  double iamd_lt_;
  double iamd_le_;
  double iamd_ge_lt_;
  double iamd_eq_zero_;
  double iamd_ne_zero_;
  double iamd_gt_zero_;
  double iamd_ge_zero_;
  double iamd_lt_zero_;
  double iamd_le_zero_;
  double iamd_ge_lt_zero_left_;
  double iamd_ge_lt_zero_right_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fourteenth_2eproto;
};
// -------------------------------------------------------------------

class SceneOther PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.SceneOther) */ {
 public:
  inline SceneOther() : SceneOther(nullptr) {}
  virtual ~SceneOther();

  SceneOther(const SceneOther& from);
  SceneOther(SceneOther&& from) noexcept
    : SceneOther() {
    *this = ::std::move(from);
  }

  inline SceneOther& operator=(const SceneOther& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneOther& operator=(SceneOther&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneOther& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneOther* internal_default_instance() {
    return reinterpret_cast<const SceneOther*>(
               &_SceneOther_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SceneOther& a, SceneOther& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneOther* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneOther* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneOther* New() const final {
    return CreateMaybeMessage<SceneOther>(nullptr);
  }

  SceneOther* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneOther>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneOther& from);
  void MergeFrom(const SceneOther& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneOther* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.SceneOther";
  }
  protected:
  explicit SceneOther(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fourteenth_2eproto);
    return ::descriptor_table_fourteenth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateFieldNumber = 1,
    kServerFieldNumber = 2,
  };
  // double rate = 1 [(.mam.xrule) = {
  void clear_rate();
  double rate() const;
  void set_rate(double value);
  private:
  double _internal_rate() const;
  void _internal_set_rate(double value);
  public:

  // int32 server = 2 [(.mam.xrule) = {
  void clear_server();
  ::PROTOBUF_NAMESPACE_ID::int32 server() const;
  void set_server(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server() const;
  void _internal_set_server(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.SceneOther)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fourteenth_2eproto;
};
// ===================================================================

static const int kXruleFieldNumber = 10086;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mam::FieldRule >, 11, false >
  xrule;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FieldRule

// string str_regex = 1;
inline void FieldRule::clear_str_regex() {
  str_regex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FieldRule::str_regex() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.str_regex)
  return _internal_str_regex();
}
inline void FieldRule::set_str_regex(const std::string& value) {
  _internal_set_str_regex(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.str_regex)
}
inline std::string* FieldRule::mutable_str_regex() {
  // @@protoc_insertion_point(field_mutable:mam.FieldRule.str_regex)
  return _internal_mutable_str_regex();
}
inline const std::string& FieldRule::_internal_str_regex() const {
  return str_regex_.Get();
}
inline void FieldRule::_internal_set_str_regex(const std::string& value) {
  
  str_regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FieldRule::set_str_regex(std::string&& value) {
  
  str_regex_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.FieldRule.str_regex)
}
inline void FieldRule::set_str_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str_regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.FieldRule.str_regex)
}
inline void FieldRule::set_str_regex(const char* value,
    size_t size) {
  
  str_regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.FieldRule.str_regex)
}
inline std::string* FieldRule::_internal_mutable_str_regex() {
  
  return str_regex_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FieldRule::release_str_regex() {
  // @@protoc_insertion_point(field_release:mam.FieldRule.str_regex)
  return str_regex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FieldRule::set_allocated_str_regex(std::string* str_regex) {
  if (str_regex != nullptr) {
    
  } else {
    
  }
  str_regex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_regex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.FieldRule.str_regex)
}

// string str_in = 2;
inline void FieldRule::clear_str_in() {
  str_in_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FieldRule::str_in() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.str_in)
  return _internal_str_in();
}
inline void FieldRule::set_str_in(const std::string& value) {
  _internal_set_str_in(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.str_in)
}
inline std::string* FieldRule::mutable_str_in() {
  // @@protoc_insertion_point(field_mutable:mam.FieldRule.str_in)
  return _internal_mutable_str_in();
}
inline const std::string& FieldRule::_internal_str_in() const {
  return str_in_.Get();
}
inline void FieldRule::_internal_set_str_in(const std::string& value) {
  
  str_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FieldRule::set_str_in(std::string&& value) {
  
  str_in_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.FieldRule.str_in)
}
inline void FieldRule::set_str_in(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.FieldRule.str_in)
}
inline void FieldRule::set_str_in(const char* value,
    size_t size) {
  
  str_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.FieldRule.str_in)
}
inline std::string* FieldRule::_internal_mutable_str_in() {
  
  return str_in_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FieldRule::release_str_in() {
  // @@protoc_insertion_point(field_release:mam.FieldRule.str_in)
  return str_in_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FieldRule::set_allocated_str_in(std::string* str_in) {
  if (str_in != nullptr) {
    
  } else {
    
  }
  str_in_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_in,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.FieldRule.str_in)
}

// string str_nin = 3;
inline void FieldRule::clear_str_nin() {
  str_nin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FieldRule::str_nin() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.str_nin)
  return _internal_str_nin();
}
inline void FieldRule::set_str_nin(const std::string& value) {
  _internal_set_str_nin(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.str_nin)
}
inline std::string* FieldRule::mutable_str_nin() {
  // @@protoc_insertion_point(field_mutable:mam.FieldRule.str_nin)
  return _internal_mutable_str_nin();
}
inline const std::string& FieldRule::_internal_str_nin() const {
  return str_nin_.Get();
}
inline void FieldRule::_internal_set_str_nin(const std::string& value) {
  
  str_nin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FieldRule::set_str_nin(std::string&& value) {
  
  str_nin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.FieldRule.str_nin)
}
inline void FieldRule::set_str_nin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str_nin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.FieldRule.str_nin)
}
inline void FieldRule::set_str_nin(const char* value,
    size_t size) {
  
  str_nin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.FieldRule.str_nin)
}
inline std::string* FieldRule::_internal_mutable_str_nin() {
  
  return str_nin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FieldRule::release_str_nin() {
  // @@protoc_insertion_point(field_release:mam.FieldRule.str_nin)
  return str_nin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FieldRule::set_allocated_str_nin(std::string* str_nin) {
  if (str_nin != nullptr) {
    
  } else {
    
  }
  str_nin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_nin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.FieldRule.str_nin)
}

// string str_eq = 4;
inline void FieldRule::clear_str_eq() {
  str_eq_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FieldRule::str_eq() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.str_eq)
  return _internal_str_eq();
}
inline void FieldRule::set_str_eq(const std::string& value) {
  _internal_set_str_eq(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.str_eq)
}
inline std::string* FieldRule::mutable_str_eq() {
  // @@protoc_insertion_point(field_mutable:mam.FieldRule.str_eq)
  return _internal_mutable_str_eq();
}
inline const std::string& FieldRule::_internal_str_eq() const {
  return str_eq_.Get();
}
inline void FieldRule::_internal_set_str_eq(const std::string& value) {
  
  str_eq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FieldRule::set_str_eq(std::string&& value) {
  
  str_eq_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.FieldRule.str_eq)
}
inline void FieldRule::set_str_eq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str_eq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.FieldRule.str_eq)
}
inline void FieldRule::set_str_eq(const char* value,
    size_t size) {
  
  str_eq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.FieldRule.str_eq)
}
inline std::string* FieldRule::_internal_mutable_str_eq() {
  
  return str_eq_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FieldRule::release_str_eq() {
  // @@protoc_insertion_point(field_release:mam.FieldRule.str_eq)
  return str_eq_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FieldRule::set_allocated_str_eq(std::string* str_eq) {
  if (str_eq != nullptr) {
    
  } else {
    
  }
  str_eq_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_eq,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.FieldRule.str_eq)
}

// string str_ne = 5;
inline void FieldRule::clear_str_ne() {
  str_ne_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FieldRule::str_ne() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.str_ne)
  return _internal_str_ne();
}
inline void FieldRule::set_str_ne(const std::string& value) {
  _internal_set_str_ne(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.str_ne)
}
inline std::string* FieldRule::mutable_str_ne() {
  // @@protoc_insertion_point(field_mutable:mam.FieldRule.str_ne)
  return _internal_mutable_str_ne();
}
inline const std::string& FieldRule::_internal_str_ne() const {
  return str_ne_.Get();
}
inline void FieldRule::_internal_set_str_ne(const std::string& value) {
  
  str_ne_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FieldRule::set_str_ne(std::string&& value) {
  
  str_ne_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.FieldRule.str_ne)
}
inline void FieldRule::set_str_ne(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str_ne_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.FieldRule.str_ne)
}
inline void FieldRule::set_str_ne(const char* value,
    size_t size) {
  
  str_ne_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.FieldRule.str_ne)
}
inline std::string* FieldRule::_internal_mutable_str_ne() {
  
  return str_ne_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FieldRule::release_str_ne() {
  // @@protoc_insertion_point(field_release:mam.FieldRule.str_ne)
  return str_ne_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FieldRule::set_allocated_str_ne(std::string* str_ne) {
  if (str_ne != nullptr) {
    
  } else {
    
  }
  str_ne_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_ne,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.FieldRule.str_ne)
}

// double eq = 11;
inline void FieldRule::clear_eq() {
  eq_ = 0;
}
inline double FieldRule::_internal_eq() const {
  return eq_;
}
inline double FieldRule::eq() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.eq)
  return _internal_eq();
}
inline void FieldRule::_internal_set_eq(double value) {
  
  eq_ = value;
}
inline void FieldRule::set_eq(double value) {
  _internal_set_eq(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.eq)
}

// double ne = 12;
inline void FieldRule::clear_ne() {
  ne_ = 0;
}
inline double FieldRule::_internal_ne() const {
  return ne_;
}
inline double FieldRule::ne() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.ne)
  return _internal_ne();
}
inline void FieldRule::_internal_set_ne(double value) {
  
  ne_ = value;
}
inline void FieldRule::set_ne(double value) {
  _internal_set_ne(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.ne)
}

// double gt = 13;
inline void FieldRule::clear_gt() {
  gt_ = 0;
}
inline double FieldRule::_internal_gt() const {
  return gt_;
}
inline double FieldRule::gt() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.gt)
  return _internal_gt();
}
inline void FieldRule::_internal_set_gt(double value) {
  
  gt_ = value;
}
inline void FieldRule::set_gt(double value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.gt)
}

// double ge = 14;
inline void FieldRule::clear_ge() {
  ge_ = 0;
}
inline double FieldRule::_internal_ge() const {
  return ge_;
}
inline double FieldRule::ge() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.ge)
  return _internal_ge();
}
inline void FieldRule::_internal_set_ge(double value) {
  
  ge_ = value;
}
inline void FieldRule::set_ge(double value) {
  _internal_set_ge(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.ge)
}

// double lt = 15;
inline void FieldRule::clear_lt() {
  lt_ = 0;
}
inline double FieldRule::_internal_lt() const {
  return lt_;
}
inline double FieldRule::lt() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.lt)
  return _internal_lt();
}
inline void FieldRule::_internal_set_lt(double value) {
  
  lt_ = value;
}
inline void FieldRule::set_lt(double value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.lt)
}

// double le = 16;
inline void FieldRule::clear_le() {
  le_ = 0;
}
inline double FieldRule::_internal_le() const {
  return le_;
}
inline double FieldRule::le() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.le)
  return _internal_le();
}
inline void FieldRule::_internal_set_le(double value) {
  
  le_ = value;
}
inline void FieldRule::set_le(double value) {
  _internal_set_le(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.le)
}

// int32 and_true = 21;
inline void FieldRule::clear_and_true() {
  and_true_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldRule::_internal_and_true() const {
  return and_true_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldRule::and_true() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.and_true)
  return _internal_and_true();
}
inline void FieldRule::_internal_set_and_true(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  and_true_ = value;
}
inline void FieldRule::set_and_true(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_and_true(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.and_true)
}

// int32 or_true = 22;
inline void FieldRule::clear_or_true() {
  or_true_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldRule::_internal_or_true() const {
  return or_true_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldRule::or_true() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.or_true)
  return _internal_or_true();
}
inline void FieldRule::_internal_set_or_true(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  or_true_ = value;
}
inline void FieldRule::set_or_true(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_or_true(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.or_true)
}

// int32 xor_true = 23;
inline void FieldRule::clear_xor_true() {
  xor_true_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldRule::_internal_xor_true() const {
  return xor_true_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldRule::xor_true() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.xor_true)
  return _internal_xor_true();
}
inline void FieldRule::_internal_set_xor_true(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xor_true_ = value;
}
inline void FieldRule::set_xor_true(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xor_true(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.xor_true)
}

// int32 and_false = 24;
inline void FieldRule::clear_and_false() {
  and_false_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldRule::_internal_and_false() const {
  return and_false_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldRule::and_false() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.and_false)
  return _internal_and_false();
}
inline void FieldRule::_internal_set_and_false(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  and_false_ = value;
}
inline void FieldRule::set_and_false(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_and_false(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.and_false)
}

// int32 or_false = 25;
inline void FieldRule::clear_or_false() {
  or_false_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldRule::_internal_or_false() const {
  return or_false_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldRule::or_false() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.or_false)
  return _internal_or_false();
}
inline void FieldRule::_internal_set_or_false(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  or_false_ = value;
}
inline void FieldRule::set_or_false(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_or_false(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.or_false)
}

// int32 xor_false = 26;
inline void FieldRule::clear_xor_false() {
  xor_false_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldRule::_internal_xor_false() const {
  return xor_false_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldRule::xor_false() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.xor_false)
  return _internal_xor_false();
}
inline void FieldRule::_internal_set_xor_false(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xor_false_ = value;
}
inline void FieldRule::set_xor_false(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xor_false(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.xor_false)
}

// -------------------------------------------------------------------

// SceneString

// string iams_in = 1 [(.mam.xrule) = {
inline void SceneString::clear_iams_in() {
  iams_in_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneString::iams_in() const {
  // @@protoc_insertion_point(field_get:mam.SceneString.iams_in)
  return _internal_iams_in();
}
inline void SceneString::set_iams_in(const std::string& value) {
  _internal_set_iams_in(value);
  // @@protoc_insertion_point(field_set:mam.SceneString.iams_in)
}
inline std::string* SceneString::mutable_iams_in() {
  // @@protoc_insertion_point(field_mutable:mam.SceneString.iams_in)
  return _internal_mutable_iams_in();
}
inline const std::string& SceneString::_internal_iams_in() const {
  return iams_in_.Get();
}
inline void SceneString::_internal_set_iams_in(const std::string& value) {
  
  iams_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneString::set_iams_in(std::string&& value) {
  
  iams_in_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.SceneString.iams_in)
}
inline void SceneString::set_iams_in(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iams_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.SceneString.iams_in)
}
inline void SceneString::set_iams_in(const char* value,
    size_t size) {
  
  iams_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.SceneString.iams_in)
}
inline std::string* SceneString::_internal_mutable_iams_in() {
  
  return iams_in_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneString::release_iams_in() {
  // @@protoc_insertion_point(field_release:mam.SceneString.iams_in)
  return iams_in_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneString::set_allocated_iams_in(std::string* iams_in) {
  if (iams_in != nullptr) {
    
  } else {
    
  }
  iams_in_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iams_in,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.SceneString.iams_in)
}

// string iams_ins = 2 [(.mam.xrule) = {
inline void SceneString::clear_iams_ins() {
  iams_ins_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneString::iams_ins() const {
  // @@protoc_insertion_point(field_get:mam.SceneString.iams_ins)
  return _internal_iams_ins();
}
inline void SceneString::set_iams_ins(const std::string& value) {
  _internal_set_iams_ins(value);
  // @@protoc_insertion_point(field_set:mam.SceneString.iams_ins)
}
inline std::string* SceneString::mutable_iams_ins() {
  // @@protoc_insertion_point(field_mutable:mam.SceneString.iams_ins)
  return _internal_mutable_iams_ins();
}
inline const std::string& SceneString::_internal_iams_ins() const {
  return iams_ins_.Get();
}
inline void SceneString::_internal_set_iams_ins(const std::string& value) {
  
  iams_ins_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneString::set_iams_ins(std::string&& value) {
  
  iams_ins_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.SceneString.iams_ins)
}
inline void SceneString::set_iams_ins(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iams_ins_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.SceneString.iams_ins)
}
inline void SceneString::set_iams_ins(const char* value,
    size_t size) {
  
  iams_ins_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.SceneString.iams_ins)
}
inline std::string* SceneString::_internal_mutable_iams_ins() {
  
  return iams_ins_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneString::release_iams_ins() {
  // @@protoc_insertion_point(field_release:mam.SceneString.iams_ins)
  return iams_ins_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneString::set_allocated_iams_ins(std::string* iams_ins) {
  if (iams_ins != nullptr) {
    
  } else {
    
  }
  iams_ins_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iams_ins,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.SceneString.iams_ins)
}

// string iams_nin = 3 [(.mam.xrule) = {
inline void SceneString::clear_iams_nin() {
  iams_nin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneString::iams_nin() const {
  // @@protoc_insertion_point(field_get:mam.SceneString.iams_nin)
  return _internal_iams_nin();
}
inline void SceneString::set_iams_nin(const std::string& value) {
  _internal_set_iams_nin(value);
  // @@protoc_insertion_point(field_set:mam.SceneString.iams_nin)
}
inline std::string* SceneString::mutable_iams_nin() {
  // @@protoc_insertion_point(field_mutable:mam.SceneString.iams_nin)
  return _internal_mutable_iams_nin();
}
inline const std::string& SceneString::_internal_iams_nin() const {
  return iams_nin_.Get();
}
inline void SceneString::_internal_set_iams_nin(const std::string& value) {
  
  iams_nin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneString::set_iams_nin(std::string&& value) {
  
  iams_nin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.SceneString.iams_nin)
}
inline void SceneString::set_iams_nin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iams_nin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.SceneString.iams_nin)
}
inline void SceneString::set_iams_nin(const char* value,
    size_t size) {
  
  iams_nin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.SceneString.iams_nin)
}
inline std::string* SceneString::_internal_mutable_iams_nin() {
  
  return iams_nin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneString::release_iams_nin() {
  // @@protoc_insertion_point(field_release:mam.SceneString.iams_nin)
  return iams_nin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneString::set_allocated_iams_nin(std::string* iams_nin) {
  if (iams_nin != nullptr) {
    
  } else {
    
  }
  iams_nin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iams_nin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.SceneString.iams_nin)
}

// string iams_nins = 4 [(.mam.xrule) = {
inline void SceneString::clear_iams_nins() {
  iams_nins_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneString::iams_nins() const {
  // @@protoc_insertion_point(field_get:mam.SceneString.iams_nins)
  return _internal_iams_nins();
}
inline void SceneString::set_iams_nins(const std::string& value) {
  _internal_set_iams_nins(value);
  // @@protoc_insertion_point(field_set:mam.SceneString.iams_nins)
}
inline std::string* SceneString::mutable_iams_nins() {
  // @@protoc_insertion_point(field_mutable:mam.SceneString.iams_nins)
  return _internal_mutable_iams_nins();
}
inline const std::string& SceneString::_internal_iams_nins() const {
  return iams_nins_.Get();
}
inline void SceneString::_internal_set_iams_nins(const std::string& value) {
  
  iams_nins_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneString::set_iams_nins(std::string&& value) {
  
  iams_nins_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.SceneString.iams_nins)
}
inline void SceneString::set_iams_nins(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iams_nins_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.SceneString.iams_nins)
}
inline void SceneString::set_iams_nins(const char* value,
    size_t size) {
  
  iams_nins_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.SceneString.iams_nins)
}
inline std::string* SceneString::_internal_mutable_iams_nins() {
  
  return iams_nins_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneString::release_iams_nins() {
  // @@protoc_insertion_point(field_release:mam.SceneString.iams_nins)
  return iams_nins_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneString::set_allocated_iams_nins(std::string* iams_nins) {
  if (iams_nins != nullptr) {
    
  } else {
    
  }
  iams_nins_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iams_nins,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.SceneString.iams_nins)
}

// string iams_eq = 5 [(.mam.xrule) = {
inline void SceneString::clear_iams_eq() {
  iams_eq_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneString::iams_eq() const {
  // @@protoc_insertion_point(field_get:mam.SceneString.iams_eq)
  return _internal_iams_eq();
}
inline void SceneString::set_iams_eq(const std::string& value) {
  _internal_set_iams_eq(value);
  // @@protoc_insertion_point(field_set:mam.SceneString.iams_eq)
}
inline std::string* SceneString::mutable_iams_eq() {
  // @@protoc_insertion_point(field_mutable:mam.SceneString.iams_eq)
  return _internal_mutable_iams_eq();
}
inline const std::string& SceneString::_internal_iams_eq() const {
  return iams_eq_.Get();
}
inline void SceneString::_internal_set_iams_eq(const std::string& value) {
  
  iams_eq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneString::set_iams_eq(std::string&& value) {
  
  iams_eq_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.SceneString.iams_eq)
}
inline void SceneString::set_iams_eq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iams_eq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.SceneString.iams_eq)
}
inline void SceneString::set_iams_eq(const char* value,
    size_t size) {
  
  iams_eq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.SceneString.iams_eq)
}
inline std::string* SceneString::_internal_mutable_iams_eq() {
  
  return iams_eq_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneString::release_iams_eq() {
  // @@protoc_insertion_point(field_release:mam.SceneString.iams_eq)
  return iams_eq_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneString::set_allocated_iams_eq(std::string* iams_eq) {
  if (iams_eq != nullptr) {
    
  } else {
    
  }
  iams_eq_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iams_eq,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.SceneString.iams_eq)
}

// string iams_eqs = 6 [(.mam.xrule) = {
inline void SceneString::clear_iams_eqs() {
  iams_eqs_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneString::iams_eqs() const {
  // @@protoc_insertion_point(field_get:mam.SceneString.iams_eqs)
  return _internal_iams_eqs();
}
inline void SceneString::set_iams_eqs(const std::string& value) {
  _internal_set_iams_eqs(value);
  // @@protoc_insertion_point(field_set:mam.SceneString.iams_eqs)
}
inline std::string* SceneString::mutable_iams_eqs() {
  // @@protoc_insertion_point(field_mutable:mam.SceneString.iams_eqs)
  return _internal_mutable_iams_eqs();
}
inline const std::string& SceneString::_internal_iams_eqs() const {
  return iams_eqs_.Get();
}
inline void SceneString::_internal_set_iams_eqs(const std::string& value) {
  
  iams_eqs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneString::set_iams_eqs(std::string&& value) {
  
  iams_eqs_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.SceneString.iams_eqs)
}
inline void SceneString::set_iams_eqs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iams_eqs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.SceneString.iams_eqs)
}
inline void SceneString::set_iams_eqs(const char* value,
    size_t size) {
  
  iams_eqs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.SceneString.iams_eqs)
}
inline std::string* SceneString::_internal_mutable_iams_eqs() {
  
  return iams_eqs_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneString::release_iams_eqs() {
  // @@protoc_insertion_point(field_release:mam.SceneString.iams_eqs)
  return iams_eqs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneString::set_allocated_iams_eqs(std::string* iams_eqs) {
  if (iams_eqs != nullptr) {
    
  } else {
    
  }
  iams_eqs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iams_eqs,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.SceneString.iams_eqs)
}

// string iams_eqss = 7 [(.mam.xrule) = {
inline void SceneString::clear_iams_eqss() {
  iams_eqss_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneString::iams_eqss() const {
  // @@protoc_insertion_point(field_get:mam.SceneString.iams_eqss)
  return _internal_iams_eqss();
}
inline void SceneString::set_iams_eqss(const std::string& value) {
  _internal_set_iams_eqss(value);
  // @@protoc_insertion_point(field_set:mam.SceneString.iams_eqss)
}
inline std::string* SceneString::mutable_iams_eqss() {
  // @@protoc_insertion_point(field_mutable:mam.SceneString.iams_eqss)
  return _internal_mutable_iams_eqss();
}
inline const std::string& SceneString::_internal_iams_eqss() const {
  return iams_eqss_.Get();
}
inline void SceneString::_internal_set_iams_eqss(const std::string& value) {
  
  iams_eqss_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneString::set_iams_eqss(std::string&& value) {
  
  iams_eqss_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.SceneString.iams_eqss)
}
inline void SceneString::set_iams_eqss(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iams_eqss_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.SceneString.iams_eqss)
}
inline void SceneString::set_iams_eqss(const char* value,
    size_t size) {
  
  iams_eqss_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.SceneString.iams_eqss)
}
inline std::string* SceneString::_internal_mutable_iams_eqss() {
  
  return iams_eqss_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneString::release_iams_eqss() {
  // @@protoc_insertion_point(field_release:mam.SceneString.iams_eqss)
  return iams_eqss_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneString::set_allocated_iams_eqss(std::string* iams_eqss) {
  if (iams_eqss != nullptr) {
    
  } else {
    
  }
  iams_eqss_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iams_eqss,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.SceneString.iams_eqss)
}

// string iams_ne = 8 [(.mam.xrule) = {
inline void SceneString::clear_iams_ne() {
  iams_ne_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneString::iams_ne() const {
  // @@protoc_insertion_point(field_get:mam.SceneString.iams_ne)
  return _internal_iams_ne();
}
inline void SceneString::set_iams_ne(const std::string& value) {
  _internal_set_iams_ne(value);
  // @@protoc_insertion_point(field_set:mam.SceneString.iams_ne)
}
inline std::string* SceneString::mutable_iams_ne() {
  // @@protoc_insertion_point(field_mutable:mam.SceneString.iams_ne)
  return _internal_mutable_iams_ne();
}
inline const std::string& SceneString::_internal_iams_ne() const {
  return iams_ne_.Get();
}
inline void SceneString::_internal_set_iams_ne(const std::string& value) {
  
  iams_ne_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneString::set_iams_ne(std::string&& value) {
  
  iams_ne_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.SceneString.iams_ne)
}
inline void SceneString::set_iams_ne(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iams_ne_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.SceneString.iams_ne)
}
inline void SceneString::set_iams_ne(const char* value,
    size_t size) {
  
  iams_ne_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.SceneString.iams_ne)
}
inline std::string* SceneString::_internal_mutable_iams_ne() {
  
  return iams_ne_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneString::release_iams_ne() {
  // @@protoc_insertion_point(field_release:mam.SceneString.iams_ne)
  return iams_ne_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneString::set_allocated_iams_ne(std::string* iams_ne) {
  if (iams_ne != nullptr) {
    
  } else {
    
  }
  iams_ne_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iams_ne,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.SceneString.iams_ne)
}

// string iams_nes = 9 [(.mam.xrule) = {
inline void SceneString::clear_iams_nes() {
  iams_nes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneString::iams_nes() const {
  // @@protoc_insertion_point(field_get:mam.SceneString.iams_nes)
  return _internal_iams_nes();
}
inline void SceneString::set_iams_nes(const std::string& value) {
  _internal_set_iams_nes(value);
  // @@protoc_insertion_point(field_set:mam.SceneString.iams_nes)
}
inline std::string* SceneString::mutable_iams_nes() {
  // @@protoc_insertion_point(field_mutable:mam.SceneString.iams_nes)
  return _internal_mutable_iams_nes();
}
inline const std::string& SceneString::_internal_iams_nes() const {
  return iams_nes_.Get();
}
inline void SceneString::_internal_set_iams_nes(const std::string& value) {
  
  iams_nes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneString::set_iams_nes(std::string&& value) {
  
  iams_nes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.SceneString.iams_nes)
}
inline void SceneString::set_iams_nes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iams_nes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.SceneString.iams_nes)
}
inline void SceneString::set_iams_nes(const char* value,
    size_t size) {
  
  iams_nes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.SceneString.iams_nes)
}
inline std::string* SceneString::_internal_mutable_iams_nes() {
  
  return iams_nes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneString::release_iams_nes() {
  // @@protoc_insertion_point(field_release:mam.SceneString.iams_nes)
  return iams_nes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneString::set_allocated_iams_nes(std::string* iams_nes) {
  if (iams_nes != nullptr) {
    
  } else {
    
  }
  iams_nes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iams_nes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.SceneString.iams_nes)
}

// string iams_ness = 10 [(.mam.xrule) = {
inline void SceneString::clear_iams_ness() {
  iams_ness_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneString::iams_ness() const {
  // @@protoc_insertion_point(field_get:mam.SceneString.iams_ness)
  return _internal_iams_ness();
}
inline void SceneString::set_iams_ness(const std::string& value) {
  _internal_set_iams_ness(value);
  // @@protoc_insertion_point(field_set:mam.SceneString.iams_ness)
}
inline std::string* SceneString::mutable_iams_ness() {
  // @@protoc_insertion_point(field_mutable:mam.SceneString.iams_ness)
  return _internal_mutable_iams_ness();
}
inline const std::string& SceneString::_internal_iams_ness() const {
  return iams_ness_.Get();
}
inline void SceneString::_internal_set_iams_ness(const std::string& value) {
  
  iams_ness_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneString::set_iams_ness(std::string&& value) {
  
  iams_ness_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.SceneString.iams_ness)
}
inline void SceneString::set_iams_ness(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iams_ness_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.SceneString.iams_ness)
}
inline void SceneString::set_iams_ness(const char* value,
    size_t size) {
  
  iams_ness_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.SceneString.iams_ness)
}
inline std::string* SceneString::_internal_mutable_iams_ness() {
  
  return iams_ness_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneString::release_iams_ness() {
  // @@protoc_insertion_point(field_release:mam.SceneString.iams_ness)
  return iams_ness_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneString::set_allocated_iams_ness(std::string* iams_ness) {
  if (iams_ness != nullptr) {
    
  } else {
    
  }
  iams_ness_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iams_ness,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.SceneString.iams_ness)
}

// string iams_in_symbol = 11 [(.mam.xrule) = {
inline void SceneString::clear_iams_in_symbol() {
  iams_in_symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneString::iams_in_symbol() const {
  // @@protoc_insertion_point(field_get:mam.SceneString.iams_in_symbol)
  return _internal_iams_in_symbol();
}
inline void SceneString::set_iams_in_symbol(const std::string& value) {
  _internal_set_iams_in_symbol(value);
  // @@protoc_insertion_point(field_set:mam.SceneString.iams_in_symbol)
}
inline std::string* SceneString::mutable_iams_in_symbol() {
  // @@protoc_insertion_point(field_mutable:mam.SceneString.iams_in_symbol)
  return _internal_mutable_iams_in_symbol();
}
inline const std::string& SceneString::_internal_iams_in_symbol() const {
  return iams_in_symbol_.Get();
}
inline void SceneString::_internal_set_iams_in_symbol(const std::string& value) {
  
  iams_in_symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneString::set_iams_in_symbol(std::string&& value) {
  
  iams_in_symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.SceneString.iams_in_symbol)
}
inline void SceneString::set_iams_in_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iams_in_symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.SceneString.iams_in_symbol)
}
inline void SceneString::set_iams_in_symbol(const char* value,
    size_t size) {
  
  iams_in_symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.SceneString.iams_in_symbol)
}
inline std::string* SceneString::_internal_mutable_iams_in_symbol() {
  
  return iams_in_symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneString::release_iams_in_symbol() {
  // @@protoc_insertion_point(field_release:mam.SceneString.iams_in_symbol)
  return iams_in_symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneString::set_allocated_iams_in_symbol(std::string* iams_in_symbol) {
  if (iams_in_symbol != nullptr) {
    
  } else {
    
  }
  iams_in_symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iams_in_symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.SceneString.iams_in_symbol)
}

// string iams_nin_symbol = 12 [(.mam.xrule) = {
inline void SceneString::clear_iams_nin_symbol() {
  iams_nin_symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneString::iams_nin_symbol() const {
  // @@protoc_insertion_point(field_get:mam.SceneString.iams_nin_symbol)
  return _internal_iams_nin_symbol();
}
inline void SceneString::set_iams_nin_symbol(const std::string& value) {
  _internal_set_iams_nin_symbol(value);
  // @@protoc_insertion_point(field_set:mam.SceneString.iams_nin_symbol)
}
inline std::string* SceneString::mutable_iams_nin_symbol() {
  // @@protoc_insertion_point(field_mutable:mam.SceneString.iams_nin_symbol)
  return _internal_mutable_iams_nin_symbol();
}
inline const std::string& SceneString::_internal_iams_nin_symbol() const {
  return iams_nin_symbol_.Get();
}
inline void SceneString::_internal_set_iams_nin_symbol(const std::string& value) {
  
  iams_nin_symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneString::set_iams_nin_symbol(std::string&& value) {
  
  iams_nin_symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.SceneString.iams_nin_symbol)
}
inline void SceneString::set_iams_nin_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iams_nin_symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.SceneString.iams_nin_symbol)
}
inline void SceneString::set_iams_nin_symbol(const char* value,
    size_t size) {
  
  iams_nin_symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.SceneString.iams_nin_symbol)
}
inline std::string* SceneString::_internal_mutable_iams_nin_symbol() {
  
  return iams_nin_symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneString::release_iams_nin_symbol() {
  // @@protoc_insertion_point(field_release:mam.SceneString.iams_nin_symbol)
  return iams_nin_symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneString::set_allocated_iams_nin_symbol(std::string* iams_nin_symbol) {
  if (iams_nin_symbol != nullptr) {
    
  } else {
    
  }
  iams_nin_symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iams_nin_symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.SceneString.iams_nin_symbol)
}

// -------------------------------------------------------------------

// SceneInt

// int32 iami_eq = 1 [(.mam.xrule) = {
inline void SceneInt::clear_iami_eq() {
  iami_eq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::_internal_iami_eq() const {
  return iami_eq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::iami_eq() const {
  // @@protoc_insertion_point(field_get:mam.SceneInt.iami_eq)
  return _internal_iami_eq();
}
inline void SceneInt::_internal_set_iami_eq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iami_eq_ = value;
}
inline void SceneInt::set_iami_eq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iami_eq(value);
  // @@protoc_insertion_point(field_set:mam.SceneInt.iami_eq)
}

// int32 iami_ne = 2 [(.mam.xrule) = {
inline void SceneInt::clear_iami_ne() {
  iami_ne_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::_internal_iami_ne() const {
  return iami_ne_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::iami_ne() const {
  // @@protoc_insertion_point(field_get:mam.SceneInt.iami_ne)
  return _internal_iami_ne();
}
inline void SceneInt::_internal_set_iami_ne(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iami_ne_ = value;
}
inline void SceneInt::set_iami_ne(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iami_ne(value);
  // @@protoc_insertion_point(field_set:mam.SceneInt.iami_ne)
}

// int32 iami_gt = 3 [(.mam.xrule) = {
inline void SceneInt::clear_iami_gt() {
  iami_gt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::_internal_iami_gt() const {
  return iami_gt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::iami_gt() const {
  // @@protoc_insertion_point(field_get:mam.SceneInt.iami_gt)
  return _internal_iami_gt();
}
inline void SceneInt::_internal_set_iami_gt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iami_gt_ = value;
}
inline void SceneInt::set_iami_gt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iami_gt(value);
  // @@protoc_insertion_point(field_set:mam.SceneInt.iami_gt)
}

// int32 iami_ge = 4 [(.mam.xrule) = {
inline void SceneInt::clear_iami_ge() {
  iami_ge_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::_internal_iami_ge() const {
  return iami_ge_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::iami_ge() const {
  // @@protoc_insertion_point(field_get:mam.SceneInt.iami_ge)
  return _internal_iami_ge();
}
inline void SceneInt::_internal_set_iami_ge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iami_ge_ = value;
}
inline void SceneInt::set_iami_ge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iami_ge(value);
  // @@protoc_insertion_point(field_set:mam.SceneInt.iami_ge)
}

// int32 iami_lt = 5 [(.mam.xrule) = {
inline void SceneInt::clear_iami_lt() {
  iami_lt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::_internal_iami_lt() const {
  return iami_lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::iami_lt() const {
  // @@protoc_insertion_point(field_get:mam.SceneInt.iami_lt)
  return _internal_iami_lt();
}
inline void SceneInt::_internal_set_iami_lt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iami_lt_ = value;
}
inline void SceneInt::set_iami_lt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iami_lt(value);
  // @@protoc_insertion_point(field_set:mam.SceneInt.iami_lt)
}

// int32 iami_le = 6 [(.mam.xrule) = {
inline void SceneInt::clear_iami_le() {
  iami_le_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::_internal_iami_le() const {
  return iami_le_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::iami_le() const {
  // @@protoc_insertion_point(field_get:mam.SceneInt.iami_le)
  return _internal_iami_le();
}
inline void SceneInt::_internal_set_iami_le(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iami_le_ = value;
}
inline void SceneInt::set_iami_le(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iami_le(value);
  // @@protoc_insertion_point(field_set:mam.SceneInt.iami_le)
}

// int32 iami_ge_lt = 7 [(.mam.xrule) = {
inline void SceneInt::clear_iami_ge_lt() {
  iami_ge_lt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::_internal_iami_ge_lt() const {
  return iami_ge_lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::iami_ge_lt() const {
  // @@protoc_insertion_point(field_get:mam.SceneInt.iami_ge_lt)
  return _internal_iami_ge_lt();
}
inline void SceneInt::_internal_set_iami_ge_lt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iami_ge_lt_ = value;
}
inline void SceneInt::set_iami_ge_lt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iami_ge_lt(value);
  // @@protoc_insertion_point(field_set:mam.SceneInt.iami_ge_lt)
}

// int32 iami_eq_zero = 8 [(.mam.xrule) = {
inline void SceneInt::clear_iami_eq_zero() {
  iami_eq_zero_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::_internal_iami_eq_zero() const {
  return iami_eq_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::iami_eq_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneInt.iami_eq_zero)
  return _internal_iami_eq_zero();
}
inline void SceneInt::_internal_set_iami_eq_zero(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iami_eq_zero_ = value;
}
inline void SceneInt::set_iami_eq_zero(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iami_eq_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneInt.iami_eq_zero)
}

// int32 iami_ne_zero = 9 [(.mam.xrule) = {
inline void SceneInt::clear_iami_ne_zero() {
  iami_ne_zero_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::_internal_iami_ne_zero() const {
  return iami_ne_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::iami_ne_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneInt.iami_ne_zero)
  return _internal_iami_ne_zero();
}
inline void SceneInt::_internal_set_iami_ne_zero(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iami_ne_zero_ = value;
}
inline void SceneInt::set_iami_ne_zero(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iami_ne_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneInt.iami_ne_zero)
}

// int32 iami_gt_zero = 10 [(.mam.xrule) = {
inline void SceneInt::clear_iami_gt_zero() {
  iami_gt_zero_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::_internal_iami_gt_zero() const {
  return iami_gt_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::iami_gt_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneInt.iami_gt_zero)
  return _internal_iami_gt_zero();
}
inline void SceneInt::_internal_set_iami_gt_zero(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iami_gt_zero_ = value;
}
inline void SceneInt::set_iami_gt_zero(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iami_gt_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneInt.iami_gt_zero)
}

// int32 iami_ge_zero = 11 [(.mam.xrule) = {
inline void SceneInt::clear_iami_ge_zero() {
  iami_ge_zero_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::_internal_iami_ge_zero() const {
  return iami_ge_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::iami_ge_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneInt.iami_ge_zero)
  return _internal_iami_ge_zero();
}
inline void SceneInt::_internal_set_iami_ge_zero(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iami_ge_zero_ = value;
}
inline void SceneInt::set_iami_ge_zero(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iami_ge_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneInt.iami_ge_zero)
}

// int32 iami_lt_zero = 12 [(.mam.xrule) = {
inline void SceneInt::clear_iami_lt_zero() {
  iami_lt_zero_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::_internal_iami_lt_zero() const {
  return iami_lt_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::iami_lt_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneInt.iami_lt_zero)
  return _internal_iami_lt_zero();
}
inline void SceneInt::_internal_set_iami_lt_zero(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iami_lt_zero_ = value;
}
inline void SceneInt::set_iami_lt_zero(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iami_lt_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneInt.iami_lt_zero)
}

// int32 iami_le_zero = 13 [(.mam.xrule) = {
inline void SceneInt::clear_iami_le_zero() {
  iami_le_zero_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::_internal_iami_le_zero() const {
  return iami_le_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::iami_le_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneInt.iami_le_zero)
  return _internal_iami_le_zero();
}
inline void SceneInt::_internal_set_iami_le_zero(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iami_le_zero_ = value;
}
inline void SceneInt::set_iami_le_zero(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iami_le_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneInt.iami_le_zero)
}

// int32 iami_ge_lt_zero_left = 14 [(.mam.xrule) = {
inline void SceneInt::clear_iami_ge_lt_zero_left() {
  iami_ge_lt_zero_left_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::_internal_iami_ge_lt_zero_left() const {
  return iami_ge_lt_zero_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::iami_ge_lt_zero_left() const {
  // @@protoc_insertion_point(field_get:mam.SceneInt.iami_ge_lt_zero_left)
  return _internal_iami_ge_lt_zero_left();
}
inline void SceneInt::_internal_set_iami_ge_lt_zero_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iami_ge_lt_zero_left_ = value;
}
inline void SceneInt::set_iami_ge_lt_zero_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iami_ge_lt_zero_left(value);
  // @@protoc_insertion_point(field_set:mam.SceneInt.iami_ge_lt_zero_left)
}

// int32 iami_ge_lt_zero_right = 15 [(.mam.xrule) = {
inline void SceneInt::clear_iami_ge_lt_zero_right() {
  iami_ge_lt_zero_right_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::_internal_iami_ge_lt_zero_right() const {
  return iami_ge_lt_zero_right_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneInt::iami_ge_lt_zero_right() const {
  // @@protoc_insertion_point(field_get:mam.SceneInt.iami_ge_lt_zero_right)
  return _internal_iami_ge_lt_zero_right();
}
inline void SceneInt::_internal_set_iami_ge_lt_zero_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iami_ge_lt_zero_right_ = value;
}
inline void SceneInt::set_iami_ge_lt_zero_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iami_ge_lt_zero_right(value);
  // @@protoc_insertion_point(field_set:mam.SceneInt.iami_ge_lt_zero_right)
}

// -------------------------------------------------------------------

// SceneUInt

// uint32 iamui_eq = 1 [(.mam.xrule) = {
inline void SceneUInt::clear_iamui_eq() {
  iamui_eq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::_internal_iamui_eq() const {
  return iamui_eq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::iamui_eq() const {
  // @@protoc_insertion_point(field_get:mam.SceneUInt.iamui_eq)
  return _internal_iamui_eq();
}
inline void SceneUInt::_internal_set_iamui_eq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iamui_eq_ = value;
}
inline void SceneUInt::set_iamui_eq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iamui_eq(value);
  // @@protoc_insertion_point(field_set:mam.SceneUInt.iamui_eq)
}

// uint32 iamui_ne = 2 [(.mam.xrule) = {
inline void SceneUInt::clear_iamui_ne() {
  iamui_ne_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::_internal_iamui_ne() const {
  return iamui_ne_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::iamui_ne() const {
  // @@protoc_insertion_point(field_get:mam.SceneUInt.iamui_ne)
  return _internal_iamui_ne();
}
inline void SceneUInt::_internal_set_iamui_ne(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iamui_ne_ = value;
}
inline void SceneUInt::set_iamui_ne(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iamui_ne(value);
  // @@protoc_insertion_point(field_set:mam.SceneUInt.iamui_ne)
}

// uint32 iamui_gt = 3 [(.mam.xrule) = {
inline void SceneUInt::clear_iamui_gt() {
  iamui_gt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::_internal_iamui_gt() const {
  return iamui_gt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::iamui_gt() const {
  // @@protoc_insertion_point(field_get:mam.SceneUInt.iamui_gt)
  return _internal_iamui_gt();
}
inline void SceneUInt::_internal_set_iamui_gt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iamui_gt_ = value;
}
inline void SceneUInt::set_iamui_gt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iamui_gt(value);
  // @@protoc_insertion_point(field_set:mam.SceneUInt.iamui_gt)
}

// uint32 iamui_ge = 4 [(.mam.xrule) = {
inline void SceneUInt::clear_iamui_ge() {
  iamui_ge_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::_internal_iamui_ge() const {
  return iamui_ge_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::iamui_ge() const {
  // @@protoc_insertion_point(field_get:mam.SceneUInt.iamui_ge)
  return _internal_iamui_ge();
}
inline void SceneUInt::_internal_set_iamui_ge(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iamui_ge_ = value;
}
inline void SceneUInt::set_iamui_ge(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iamui_ge(value);
  // @@protoc_insertion_point(field_set:mam.SceneUInt.iamui_ge)
}

// uint32 iamui_lt = 5 [(.mam.xrule) = {
inline void SceneUInt::clear_iamui_lt() {
  iamui_lt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::_internal_iamui_lt() const {
  return iamui_lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::iamui_lt() const {
  // @@protoc_insertion_point(field_get:mam.SceneUInt.iamui_lt)
  return _internal_iamui_lt();
}
inline void SceneUInt::_internal_set_iamui_lt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iamui_lt_ = value;
}
inline void SceneUInt::set_iamui_lt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iamui_lt(value);
  // @@protoc_insertion_point(field_set:mam.SceneUInt.iamui_lt)
}

// uint32 iamui_le = 6 [(.mam.xrule) = {
inline void SceneUInt::clear_iamui_le() {
  iamui_le_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::_internal_iamui_le() const {
  return iamui_le_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::iamui_le() const {
  // @@protoc_insertion_point(field_get:mam.SceneUInt.iamui_le)
  return _internal_iamui_le();
}
inline void SceneUInt::_internal_set_iamui_le(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iamui_le_ = value;
}
inline void SceneUInt::set_iamui_le(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iamui_le(value);
  // @@protoc_insertion_point(field_set:mam.SceneUInt.iamui_le)
}

// uint32 iamui_ge_lt = 7 [(.mam.xrule) = {
inline void SceneUInt::clear_iamui_ge_lt() {
  iamui_ge_lt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::_internal_iamui_ge_lt() const {
  return iamui_ge_lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::iamui_ge_lt() const {
  // @@protoc_insertion_point(field_get:mam.SceneUInt.iamui_ge_lt)
  return _internal_iamui_ge_lt();
}
inline void SceneUInt::_internal_set_iamui_ge_lt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iamui_ge_lt_ = value;
}
inline void SceneUInt::set_iamui_ge_lt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iamui_ge_lt(value);
  // @@protoc_insertion_point(field_set:mam.SceneUInt.iamui_ge_lt)
}

// uint32 iamui_eq_zero = 8 [(.mam.xrule) = {
inline void SceneUInt::clear_iamui_eq_zero() {
  iamui_eq_zero_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::_internal_iamui_eq_zero() const {
  return iamui_eq_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::iamui_eq_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneUInt.iamui_eq_zero)
  return _internal_iamui_eq_zero();
}
inline void SceneUInt::_internal_set_iamui_eq_zero(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iamui_eq_zero_ = value;
}
inline void SceneUInt::set_iamui_eq_zero(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iamui_eq_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneUInt.iamui_eq_zero)
}

// uint32 iamui_ne_zero = 9 [(.mam.xrule) = {
inline void SceneUInt::clear_iamui_ne_zero() {
  iamui_ne_zero_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::_internal_iamui_ne_zero() const {
  return iamui_ne_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::iamui_ne_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneUInt.iamui_ne_zero)
  return _internal_iamui_ne_zero();
}
inline void SceneUInt::_internal_set_iamui_ne_zero(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iamui_ne_zero_ = value;
}
inline void SceneUInt::set_iamui_ne_zero(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iamui_ne_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneUInt.iamui_ne_zero)
}

// uint32 iamui_gt_zero = 10 [(.mam.xrule) = {
inline void SceneUInt::clear_iamui_gt_zero() {
  iamui_gt_zero_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::_internal_iamui_gt_zero() const {
  return iamui_gt_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::iamui_gt_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneUInt.iamui_gt_zero)
  return _internal_iamui_gt_zero();
}
inline void SceneUInt::_internal_set_iamui_gt_zero(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iamui_gt_zero_ = value;
}
inline void SceneUInt::set_iamui_gt_zero(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iamui_gt_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneUInt.iamui_gt_zero)
}

// uint32 iamui_ge_zero = 11 [(.mam.xrule) = {
inline void SceneUInt::clear_iamui_ge_zero() {
  iamui_ge_zero_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::_internal_iamui_ge_zero() const {
  return iamui_ge_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::iamui_ge_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneUInt.iamui_ge_zero)
  return _internal_iamui_ge_zero();
}
inline void SceneUInt::_internal_set_iamui_ge_zero(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iamui_ge_zero_ = value;
}
inline void SceneUInt::set_iamui_ge_zero(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iamui_ge_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneUInt.iamui_ge_zero)
}

// uint32 iamui_le_zero = 12 [(.mam.xrule) = {
inline void SceneUInt::clear_iamui_le_zero() {
  iamui_le_zero_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::_internal_iamui_le_zero() const {
  return iamui_le_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::iamui_le_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneUInt.iamui_le_zero)
  return _internal_iamui_le_zero();
}
inline void SceneUInt::_internal_set_iamui_le_zero(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iamui_le_zero_ = value;
}
inline void SceneUInt::set_iamui_le_zero(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iamui_le_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneUInt.iamui_le_zero)
}

// uint32 iamui_ge_lt_zero_left = 13 [(.mam.xrule) = {
inline void SceneUInt::clear_iamui_ge_lt_zero_left() {
  iamui_ge_lt_zero_left_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::_internal_iamui_ge_lt_zero_left() const {
  return iamui_ge_lt_zero_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneUInt::iamui_ge_lt_zero_left() const {
  // @@protoc_insertion_point(field_get:mam.SceneUInt.iamui_ge_lt_zero_left)
  return _internal_iamui_ge_lt_zero_left();
}
inline void SceneUInt::_internal_set_iamui_ge_lt_zero_left(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iamui_ge_lt_zero_left_ = value;
}
inline void SceneUInt::set_iamui_ge_lt_zero_left(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iamui_ge_lt_zero_left(value);
  // @@protoc_insertion_point(field_set:mam.SceneUInt.iamui_ge_lt_zero_left)
}

// -------------------------------------------------------------------

// SceneLong

// int64 iaml_eq = 1 [(.mam.xrule) = {
inline void SceneLong::clear_iaml_eq() {
  iaml_eq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::_internal_iaml_eq() const {
  return iaml_eq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::iaml_eq() const {
  // @@protoc_insertion_point(field_get:mam.SceneLong.iaml_eq)
  return _internal_iaml_eq();
}
inline void SceneLong::_internal_set_iaml_eq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  iaml_eq_ = value;
}
inline void SceneLong::set_iaml_eq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_iaml_eq(value);
  // @@protoc_insertion_point(field_set:mam.SceneLong.iaml_eq)
}

// int64 iaml_ne = 2 [(.mam.xrule) = {
inline void SceneLong::clear_iaml_ne() {
  iaml_ne_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::_internal_iaml_ne() const {
  return iaml_ne_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::iaml_ne() const {
  // @@protoc_insertion_point(field_get:mam.SceneLong.iaml_ne)
  return _internal_iaml_ne();
}
inline void SceneLong::_internal_set_iaml_ne(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  iaml_ne_ = value;
}
inline void SceneLong::set_iaml_ne(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_iaml_ne(value);
  // @@protoc_insertion_point(field_set:mam.SceneLong.iaml_ne)
}

// int64 iaml_gt = 3 [(.mam.xrule) = {
inline void SceneLong::clear_iaml_gt() {
  iaml_gt_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::_internal_iaml_gt() const {
  return iaml_gt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::iaml_gt() const {
  // @@protoc_insertion_point(field_get:mam.SceneLong.iaml_gt)
  return _internal_iaml_gt();
}
inline void SceneLong::_internal_set_iaml_gt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  iaml_gt_ = value;
}
inline void SceneLong::set_iaml_gt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_iaml_gt(value);
  // @@protoc_insertion_point(field_set:mam.SceneLong.iaml_gt)
}

// int64 iaml_ge = 4 [(.mam.xrule) = {
inline void SceneLong::clear_iaml_ge() {
  iaml_ge_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::_internal_iaml_ge() const {
  return iaml_ge_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::iaml_ge() const {
  // @@protoc_insertion_point(field_get:mam.SceneLong.iaml_ge)
  return _internal_iaml_ge();
}
inline void SceneLong::_internal_set_iaml_ge(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  iaml_ge_ = value;
}
inline void SceneLong::set_iaml_ge(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_iaml_ge(value);
  // @@protoc_insertion_point(field_set:mam.SceneLong.iaml_ge)
}

// int64 iaml_lt = 5 [(.mam.xrule) = {
inline void SceneLong::clear_iaml_lt() {
  iaml_lt_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::_internal_iaml_lt() const {
  return iaml_lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::iaml_lt() const {
  // @@protoc_insertion_point(field_get:mam.SceneLong.iaml_lt)
  return _internal_iaml_lt();
}
inline void SceneLong::_internal_set_iaml_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  iaml_lt_ = value;
}
inline void SceneLong::set_iaml_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_iaml_lt(value);
  // @@protoc_insertion_point(field_set:mam.SceneLong.iaml_lt)
}

// int64 iaml_le = 6 [(.mam.xrule) = {
inline void SceneLong::clear_iaml_le() {
  iaml_le_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::_internal_iaml_le() const {
  return iaml_le_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::iaml_le() const {
  // @@protoc_insertion_point(field_get:mam.SceneLong.iaml_le)
  return _internal_iaml_le();
}
inline void SceneLong::_internal_set_iaml_le(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  iaml_le_ = value;
}
inline void SceneLong::set_iaml_le(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_iaml_le(value);
  // @@protoc_insertion_point(field_set:mam.SceneLong.iaml_le)
}

// int64 iaml_ge_lt = 7 [(.mam.xrule) = {
inline void SceneLong::clear_iaml_ge_lt() {
  iaml_ge_lt_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::_internal_iaml_ge_lt() const {
  return iaml_ge_lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::iaml_ge_lt() const {
  // @@protoc_insertion_point(field_get:mam.SceneLong.iaml_ge_lt)
  return _internal_iaml_ge_lt();
}
inline void SceneLong::_internal_set_iaml_ge_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  iaml_ge_lt_ = value;
}
inline void SceneLong::set_iaml_ge_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_iaml_ge_lt(value);
  // @@protoc_insertion_point(field_set:mam.SceneLong.iaml_ge_lt)
}

// int64 iaml_eq_zero = 8 [(.mam.xrule) = {
inline void SceneLong::clear_iaml_eq_zero() {
  iaml_eq_zero_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::_internal_iaml_eq_zero() const {
  return iaml_eq_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::iaml_eq_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneLong.iaml_eq_zero)
  return _internal_iaml_eq_zero();
}
inline void SceneLong::_internal_set_iaml_eq_zero(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  iaml_eq_zero_ = value;
}
inline void SceneLong::set_iaml_eq_zero(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_iaml_eq_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneLong.iaml_eq_zero)
}

// int64 iaml_ne_zero = 9 [(.mam.xrule) = {
inline void SceneLong::clear_iaml_ne_zero() {
  iaml_ne_zero_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::_internal_iaml_ne_zero() const {
  return iaml_ne_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::iaml_ne_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneLong.iaml_ne_zero)
  return _internal_iaml_ne_zero();
}
inline void SceneLong::_internal_set_iaml_ne_zero(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  iaml_ne_zero_ = value;
}
inline void SceneLong::set_iaml_ne_zero(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_iaml_ne_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneLong.iaml_ne_zero)
}

// int64 iaml_gt_zero = 10 [(.mam.xrule) = {
inline void SceneLong::clear_iaml_gt_zero() {
  iaml_gt_zero_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::_internal_iaml_gt_zero() const {
  return iaml_gt_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::iaml_gt_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneLong.iaml_gt_zero)
  return _internal_iaml_gt_zero();
}
inline void SceneLong::_internal_set_iaml_gt_zero(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  iaml_gt_zero_ = value;
}
inline void SceneLong::set_iaml_gt_zero(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_iaml_gt_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneLong.iaml_gt_zero)
}

// int64 iaml_ge_zero = 11 [(.mam.xrule) = {
inline void SceneLong::clear_iaml_ge_zero() {
  iaml_ge_zero_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::_internal_iaml_ge_zero() const {
  return iaml_ge_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::iaml_ge_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneLong.iaml_ge_zero)
  return _internal_iaml_ge_zero();
}
inline void SceneLong::_internal_set_iaml_ge_zero(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  iaml_ge_zero_ = value;
}
inline void SceneLong::set_iaml_ge_zero(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_iaml_ge_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneLong.iaml_ge_zero)
}

// int64 iaml_lt_zero = 12 [(.mam.xrule) = {
inline void SceneLong::clear_iaml_lt_zero() {
  iaml_lt_zero_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::_internal_iaml_lt_zero() const {
  return iaml_lt_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::iaml_lt_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneLong.iaml_lt_zero)
  return _internal_iaml_lt_zero();
}
inline void SceneLong::_internal_set_iaml_lt_zero(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  iaml_lt_zero_ = value;
}
inline void SceneLong::set_iaml_lt_zero(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_iaml_lt_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneLong.iaml_lt_zero)
}

// int64 iaml_le_zero = 13 [(.mam.xrule) = {
inline void SceneLong::clear_iaml_le_zero() {
  iaml_le_zero_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::_internal_iaml_le_zero() const {
  return iaml_le_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::iaml_le_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneLong.iaml_le_zero)
  return _internal_iaml_le_zero();
}
inline void SceneLong::_internal_set_iaml_le_zero(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  iaml_le_zero_ = value;
}
inline void SceneLong::set_iaml_le_zero(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_iaml_le_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneLong.iaml_le_zero)
}

// int64 iaml_ge_lt_zero_left = 14 [(.mam.xrule) = {
inline void SceneLong::clear_iaml_ge_lt_zero_left() {
  iaml_ge_lt_zero_left_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::_internal_iaml_ge_lt_zero_left() const {
  return iaml_ge_lt_zero_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::iaml_ge_lt_zero_left() const {
  // @@protoc_insertion_point(field_get:mam.SceneLong.iaml_ge_lt_zero_left)
  return _internal_iaml_ge_lt_zero_left();
}
inline void SceneLong::_internal_set_iaml_ge_lt_zero_left(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  iaml_ge_lt_zero_left_ = value;
}
inline void SceneLong::set_iaml_ge_lt_zero_left(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_iaml_ge_lt_zero_left(value);
  // @@protoc_insertion_point(field_set:mam.SceneLong.iaml_ge_lt_zero_left)
}

// int64 iaml_ge_lt_zero_right = 15 [(.mam.xrule) = {
inline void SceneLong::clear_iaml_ge_lt_zero_right() {
  iaml_ge_lt_zero_right_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::_internal_iaml_ge_lt_zero_right() const {
  return iaml_ge_lt_zero_right_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SceneLong::iaml_ge_lt_zero_right() const {
  // @@protoc_insertion_point(field_get:mam.SceneLong.iaml_ge_lt_zero_right)
  return _internal_iaml_ge_lt_zero_right();
}
inline void SceneLong::_internal_set_iaml_ge_lt_zero_right(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  iaml_ge_lt_zero_right_ = value;
}
inline void SceneLong::set_iaml_ge_lt_zero_right(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_iaml_ge_lt_zero_right(value);
  // @@protoc_insertion_point(field_set:mam.SceneLong.iaml_ge_lt_zero_right)
}

// -------------------------------------------------------------------

// SceneULong

// uint64 iamul_eq = 1 [(.mam.xrule) = {
inline void SceneULong::clear_iamul_eq() {
  iamul_eq_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::_internal_iamul_eq() const {
  return iamul_eq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::iamul_eq() const {
  // @@protoc_insertion_point(field_get:mam.SceneULong.iamul_eq)
  return _internal_iamul_eq();
}
inline void SceneULong::_internal_set_iamul_eq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  iamul_eq_ = value;
}
inline void SceneULong::set_iamul_eq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iamul_eq(value);
  // @@protoc_insertion_point(field_set:mam.SceneULong.iamul_eq)
}

// uint64 iamul_ne = 2 [(.mam.xrule) = {
inline void SceneULong::clear_iamul_ne() {
  iamul_ne_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::_internal_iamul_ne() const {
  return iamul_ne_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::iamul_ne() const {
  // @@protoc_insertion_point(field_get:mam.SceneULong.iamul_ne)
  return _internal_iamul_ne();
}
inline void SceneULong::_internal_set_iamul_ne(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  iamul_ne_ = value;
}
inline void SceneULong::set_iamul_ne(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iamul_ne(value);
  // @@protoc_insertion_point(field_set:mam.SceneULong.iamul_ne)
}

// uint64 iamul_gt = 3 [(.mam.xrule) = {
inline void SceneULong::clear_iamul_gt() {
  iamul_gt_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::_internal_iamul_gt() const {
  return iamul_gt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::iamul_gt() const {
  // @@protoc_insertion_point(field_get:mam.SceneULong.iamul_gt)
  return _internal_iamul_gt();
}
inline void SceneULong::_internal_set_iamul_gt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  iamul_gt_ = value;
}
inline void SceneULong::set_iamul_gt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iamul_gt(value);
  // @@protoc_insertion_point(field_set:mam.SceneULong.iamul_gt)
}

// uint64 iamul_ge = 4 [(.mam.xrule) = {
inline void SceneULong::clear_iamul_ge() {
  iamul_ge_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::_internal_iamul_ge() const {
  return iamul_ge_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::iamul_ge() const {
  // @@protoc_insertion_point(field_get:mam.SceneULong.iamul_ge)
  return _internal_iamul_ge();
}
inline void SceneULong::_internal_set_iamul_ge(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  iamul_ge_ = value;
}
inline void SceneULong::set_iamul_ge(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iamul_ge(value);
  // @@protoc_insertion_point(field_set:mam.SceneULong.iamul_ge)
}

// uint64 iamul_lt = 5 [(.mam.xrule) = {
inline void SceneULong::clear_iamul_lt() {
  iamul_lt_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::_internal_iamul_lt() const {
  return iamul_lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::iamul_lt() const {
  // @@protoc_insertion_point(field_get:mam.SceneULong.iamul_lt)
  return _internal_iamul_lt();
}
inline void SceneULong::_internal_set_iamul_lt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  iamul_lt_ = value;
}
inline void SceneULong::set_iamul_lt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iamul_lt(value);
  // @@protoc_insertion_point(field_set:mam.SceneULong.iamul_lt)
}

// uint64 iamul_le = 6 [(.mam.xrule) = {
inline void SceneULong::clear_iamul_le() {
  iamul_le_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::_internal_iamul_le() const {
  return iamul_le_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::iamul_le() const {
  // @@protoc_insertion_point(field_get:mam.SceneULong.iamul_le)
  return _internal_iamul_le();
}
inline void SceneULong::_internal_set_iamul_le(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  iamul_le_ = value;
}
inline void SceneULong::set_iamul_le(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iamul_le(value);
  // @@protoc_insertion_point(field_set:mam.SceneULong.iamul_le)
}

// uint64 iamul_ge_lt = 7 [(.mam.xrule) = {
inline void SceneULong::clear_iamul_ge_lt() {
  iamul_ge_lt_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::_internal_iamul_ge_lt() const {
  return iamul_ge_lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::iamul_ge_lt() const {
  // @@protoc_insertion_point(field_get:mam.SceneULong.iamul_ge_lt)
  return _internal_iamul_ge_lt();
}
inline void SceneULong::_internal_set_iamul_ge_lt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  iamul_ge_lt_ = value;
}
inline void SceneULong::set_iamul_ge_lt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iamul_ge_lt(value);
  // @@protoc_insertion_point(field_set:mam.SceneULong.iamul_ge_lt)
}

// uint64 iamul_eq_zero = 8 [(.mam.xrule) = {
inline void SceneULong::clear_iamul_eq_zero() {
  iamul_eq_zero_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::_internal_iamul_eq_zero() const {
  return iamul_eq_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::iamul_eq_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneULong.iamul_eq_zero)
  return _internal_iamul_eq_zero();
}
inline void SceneULong::_internal_set_iamul_eq_zero(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  iamul_eq_zero_ = value;
}
inline void SceneULong::set_iamul_eq_zero(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iamul_eq_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneULong.iamul_eq_zero)
}

// uint64 iamul_ne_zero = 9 [(.mam.xrule) = {
inline void SceneULong::clear_iamul_ne_zero() {
  iamul_ne_zero_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::_internal_iamul_ne_zero() const {
  return iamul_ne_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::iamul_ne_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneULong.iamul_ne_zero)
  return _internal_iamul_ne_zero();
}
inline void SceneULong::_internal_set_iamul_ne_zero(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  iamul_ne_zero_ = value;
}
inline void SceneULong::set_iamul_ne_zero(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iamul_ne_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneULong.iamul_ne_zero)
}

// uint64 iamul_gt_zero = 10 [(.mam.xrule) = {
inline void SceneULong::clear_iamul_gt_zero() {
  iamul_gt_zero_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::_internal_iamul_gt_zero() const {
  return iamul_gt_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::iamul_gt_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneULong.iamul_gt_zero)
  return _internal_iamul_gt_zero();
}
inline void SceneULong::_internal_set_iamul_gt_zero(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  iamul_gt_zero_ = value;
}
inline void SceneULong::set_iamul_gt_zero(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iamul_gt_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneULong.iamul_gt_zero)
}

// uint64 iamul_ge_zero = 11 [(.mam.xrule) = {
inline void SceneULong::clear_iamul_ge_zero() {
  iamul_ge_zero_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::_internal_iamul_ge_zero() const {
  return iamul_ge_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::iamul_ge_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneULong.iamul_ge_zero)
  return _internal_iamul_ge_zero();
}
inline void SceneULong::_internal_set_iamul_ge_zero(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  iamul_ge_zero_ = value;
}
inline void SceneULong::set_iamul_ge_zero(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iamul_ge_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneULong.iamul_ge_zero)
}

// uint64 iamul_le_zero = 12 [(.mam.xrule) = {
inline void SceneULong::clear_iamul_le_zero() {
  iamul_le_zero_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::_internal_iamul_le_zero() const {
  return iamul_le_zero_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::iamul_le_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneULong.iamul_le_zero)
  return _internal_iamul_le_zero();
}
inline void SceneULong::_internal_set_iamul_le_zero(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  iamul_le_zero_ = value;
}
inline void SceneULong::set_iamul_le_zero(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iamul_le_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneULong.iamul_le_zero)
}

// uint64 iamul_ge_lt_zero_left = 13 [(.mam.xrule) = {
inline void SceneULong::clear_iamul_ge_lt_zero_left() {
  iamul_ge_lt_zero_left_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::_internal_iamul_ge_lt_zero_left() const {
  return iamul_ge_lt_zero_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SceneULong::iamul_ge_lt_zero_left() const {
  // @@protoc_insertion_point(field_get:mam.SceneULong.iamul_ge_lt_zero_left)
  return _internal_iamul_ge_lt_zero_left();
}
inline void SceneULong::_internal_set_iamul_ge_lt_zero_left(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  iamul_ge_lt_zero_left_ = value;
}
inline void SceneULong::set_iamul_ge_lt_zero_left(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iamul_ge_lt_zero_left(value);
  // @@protoc_insertion_point(field_set:mam.SceneULong.iamul_ge_lt_zero_left)
}

// -------------------------------------------------------------------

// SceneFloat

// float iamf_eq = 1 [(.mam.xrule) = {
inline void SceneFloat::clear_iamf_eq() {
  iamf_eq_ = 0;
}
inline float SceneFloat::_internal_iamf_eq() const {
  return iamf_eq_;
}
inline float SceneFloat::iamf_eq() const {
  // @@protoc_insertion_point(field_get:mam.SceneFloat.iamf_eq)
  return _internal_iamf_eq();
}
inline void SceneFloat::_internal_set_iamf_eq(float value) {
  
  iamf_eq_ = value;
}
inline void SceneFloat::set_iamf_eq(float value) {
  _internal_set_iamf_eq(value);
  // @@protoc_insertion_point(field_set:mam.SceneFloat.iamf_eq)
}

// float iamf_ne = 2 [(.mam.xrule) = {
inline void SceneFloat::clear_iamf_ne() {
  iamf_ne_ = 0;
}
inline float SceneFloat::_internal_iamf_ne() const {
  return iamf_ne_;
}
inline float SceneFloat::iamf_ne() const {
  // @@protoc_insertion_point(field_get:mam.SceneFloat.iamf_ne)
  return _internal_iamf_ne();
}
inline void SceneFloat::_internal_set_iamf_ne(float value) {
  
  iamf_ne_ = value;
}
inline void SceneFloat::set_iamf_ne(float value) {
  _internal_set_iamf_ne(value);
  // @@protoc_insertion_point(field_set:mam.SceneFloat.iamf_ne)
}

// float iamf_gt = 3 [(.mam.xrule) = {
inline void SceneFloat::clear_iamf_gt() {
  iamf_gt_ = 0;
}
inline float SceneFloat::_internal_iamf_gt() const {
  return iamf_gt_;
}
inline float SceneFloat::iamf_gt() const {
  // @@protoc_insertion_point(field_get:mam.SceneFloat.iamf_gt)
  return _internal_iamf_gt();
}
inline void SceneFloat::_internal_set_iamf_gt(float value) {
  
  iamf_gt_ = value;
}
inline void SceneFloat::set_iamf_gt(float value) {
  _internal_set_iamf_gt(value);
  // @@protoc_insertion_point(field_set:mam.SceneFloat.iamf_gt)
}

// float iamf_ge = 4 [(.mam.xrule) = {
inline void SceneFloat::clear_iamf_ge() {
  iamf_ge_ = 0;
}
inline float SceneFloat::_internal_iamf_ge() const {
  return iamf_ge_;
}
inline float SceneFloat::iamf_ge() const {
  // @@protoc_insertion_point(field_get:mam.SceneFloat.iamf_ge)
  return _internal_iamf_ge();
}
inline void SceneFloat::_internal_set_iamf_ge(float value) {
  
  iamf_ge_ = value;
}
inline void SceneFloat::set_iamf_ge(float value) {
  _internal_set_iamf_ge(value);
  // @@protoc_insertion_point(field_set:mam.SceneFloat.iamf_ge)
}

// float iamf_lt = 5 [(.mam.xrule) = {
inline void SceneFloat::clear_iamf_lt() {
  iamf_lt_ = 0;
}
inline float SceneFloat::_internal_iamf_lt() const {
  return iamf_lt_;
}
inline float SceneFloat::iamf_lt() const {
  // @@protoc_insertion_point(field_get:mam.SceneFloat.iamf_lt)
  return _internal_iamf_lt();
}
inline void SceneFloat::_internal_set_iamf_lt(float value) {
  
  iamf_lt_ = value;
}
inline void SceneFloat::set_iamf_lt(float value) {
  _internal_set_iamf_lt(value);
  // @@protoc_insertion_point(field_set:mam.SceneFloat.iamf_lt)
}

// float iamf_le = 6 [(.mam.xrule) = {
inline void SceneFloat::clear_iamf_le() {
  iamf_le_ = 0;
}
inline float SceneFloat::_internal_iamf_le() const {
  return iamf_le_;
}
inline float SceneFloat::iamf_le() const {
  // @@protoc_insertion_point(field_get:mam.SceneFloat.iamf_le)
  return _internal_iamf_le();
}
inline void SceneFloat::_internal_set_iamf_le(float value) {
  
  iamf_le_ = value;
}
inline void SceneFloat::set_iamf_le(float value) {
  _internal_set_iamf_le(value);
  // @@protoc_insertion_point(field_set:mam.SceneFloat.iamf_le)
}

// float iamf_ge_lt = 7 [(.mam.xrule) = {
inline void SceneFloat::clear_iamf_ge_lt() {
  iamf_ge_lt_ = 0;
}
inline float SceneFloat::_internal_iamf_ge_lt() const {
  return iamf_ge_lt_;
}
inline float SceneFloat::iamf_ge_lt() const {
  // @@protoc_insertion_point(field_get:mam.SceneFloat.iamf_ge_lt)
  return _internal_iamf_ge_lt();
}
inline void SceneFloat::_internal_set_iamf_ge_lt(float value) {
  
  iamf_ge_lt_ = value;
}
inline void SceneFloat::set_iamf_ge_lt(float value) {
  _internal_set_iamf_ge_lt(value);
  // @@protoc_insertion_point(field_set:mam.SceneFloat.iamf_ge_lt)
}

// float iamf_eq_zero = 8 [(.mam.xrule) = {
inline void SceneFloat::clear_iamf_eq_zero() {
  iamf_eq_zero_ = 0;
}
inline float SceneFloat::_internal_iamf_eq_zero() const {
  return iamf_eq_zero_;
}
inline float SceneFloat::iamf_eq_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneFloat.iamf_eq_zero)
  return _internal_iamf_eq_zero();
}
inline void SceneFloat::_internal_set_iamf_eq_zero(float value) {
  
  iamf_eq_zero_ = value;
}
inline void SceneFloat::set_iamf_eq_zero(float value) {
  _internal_set_iamf_eq_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneFloat.iamf_eq_zero)
}

// float iamf_ne_zero = 9 [(.mam.xrule) = {
inline void SceneFloat::clear_iamf_ne_zero() {
  iamf_ne_zero_ = 0;
}
inline float SceneFloat::_internal_iamf_ne_zero() const {
  return iamf_ne_zero_;
}
inline float SceneFloat::iamf_ne_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneFloat.iamf_ne_zero)
  return _internal_iamf_ne_zero();
}
inline void SceneFloat::_internal_set_iamf_ne_zero(float value) {
  
  iamf_ne_zero_ = value;
}
inline void SceneFloat::set_iamf_ne_zero(float value) {
  _internal_set_iamf_ne_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneFloat.iamf_ne_zero)
}

// float iamf_gt_zero = 10 [(.mam.xrule) = {
inline void SceneFloat::clear_iamf_gt_zero() {
  iamf_gt_zero_ = 0;
}
inline float SceneFloat::_internal_iamf_gt_zero() const {
  return iamf_gt_zero_;
}
inline float SceneFloat::iamf_gt_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneFloat.iamf_gt_zero)
  return _internal_iamf_gt_zero();
}
inline void SceneFloat::_internal_set_iamf_gt_zero(float value) {
  
  iamf_gt_zero_ = value;
}
inline void SceneFloat::set_iamf_gt_zero(float value) {
  _internal_set_iamf_gt_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneFloat.iamf_gt_zero)
}

// float iamf_ge_zero = 11 [(.mam.xrule) = {
inline void SceneFloat::clear_iamf_ge_zero() {
  iamf_ge_zero_ = 0;
}
inline float SceneFloat::_internal_iamf_ge_zero() const {
  return iamf_ge_zero_;
}
inline float SceneFloat::iamf_ge_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneFloat.iamf_ge_zero)
  return _internal_iamf_ge_zero();
}
inline void SceneFloat::_internal_set_iamf_ge_zero(float value) {
  
  iamf_ge_zero_ = value;
}
inline void SceneFloat::set_iamf_ge_zero(float value) {
  _internal_set_iamf_ge_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneFloat.iamf_ge_zero)
}

// float iamf_lt_zero = 12 [(.mam.xrule) = {
inline void SceneFloat::clear_iamf_lt_zero() {
  iamf_lt_zero_ = 0;
}
inline float SceneFloat::_internal_iamf_lt_zero() const {
  return iamf_lt_zero_;
}
inline float SceneFloat::iamf_lt_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneFloat.iamf_lt_zero)
  return _internal_iamf_lt_zero();
}
inline void SceneFloat::_internal_set_iamf_lt_zero(float value) {
  
  iamf_lt_zero_ = value;
}
inline void SceneFloat::set_iamf_lt_zero(float value) {
  _internal_set_iamf_lt_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneFloat.iamf_lt_zero)
}

// float iamf_le_zero = 13 [(.mam.xrule) = {
inline void SceneFloat::clear_iamf_le_zero() {
  iamf_le_zero_ = 0;
}
inline float SceneFloat::_internal_iamf_le_zero() const {
  return iamf_le_zero_;
}
inline float SceneFloat::iamf_le_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneFloat.iamf_le_zero)
  return _internal_iamf_le_zero();
}
inline void SceneFloat::_internal_set_iamf_le_zero(float value) {
  
  iamf_le_zero_ = value;
}
inline void SceneFloat::set_iamf_le_zero(float value) {
  _internal_set_iamf_le_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneFloat.iamf_le_zero)
}

// float iamf_ge_lt_zero_left = 14 [(.mam.xrule) = {
inline void SceneFloat::clear_iamf_ge_lt_zero_left() {
  iamf_ge_lt_zero_left_ = 0;
}
inline float SceneFloat::_internal_iamf_ge_lt_zero_left() const {
  return iamf_ge_lt_zero_left_;
}
inline float SceneFloat::iamf_ge_lt_zero_left() const {
  // @@protoc_insertion_point(field_get:mam.SceneFloat.iamf_ge_lt_zero_left)
  return _internal_iamf_ge_lt_zero_left();
}
inline void SceneFloat::_internal_set_iamf_ge_lt_zero_left(float value) {
  
  iamf_ge_lt_zero_left_ = value;
}
inline void SceneFloat::set_iamf_ge_lt_zero_left(float value) {
  _internal_set_iamf_ge_lt_zero_left(value);
  // @@protoc_insertion_point(field_set:mam.SceneFloat.iamf_ge_lt_zero_left)
}

// float iamf_ge_lt_zero_right = 15 [(.mam.xrule) = {
inline void SceneFloat::clear_iamf_ge_lt_zero_right() {
  iamf_ge_lt_zero_right_ = 0;
}
inline float SceneFloat::_internal_iamf_ge_lt_zero_right() const {
  return iamf_ge_lt_zero_right_;
}
inline float SceneFloat::iamf_ge_lt_zero_right() const {
  // @@protoc_insertion_point(field_get:mam.SceneFloat.iamf_ge_lt_zero_right)
  return _internal_iamf_ge_lt_zero_right();
}
inline void SceneFloat::_internal_set_iamf_ge_lt_zero_right(float value) {
  
  iamf_ge_lt_zero_right_ = value;
}
inline void SceneFloat::set_iamf_ge_lt_zero_right(float value) {
  _internal_set_iamf_ge_lt_zero_right(value);
  // @@protoc_insertion_point(field_set:mam.SceneFloat.iamf_ge_lt_zero_right)
}

// -------------------------------------------------------------------

// SceneDouble

// double iamd_eq = 1 [(.mam.xrule) = {
inline void SceneDouble::clear_iamd_eq() {
  iamd_eq_ = 0;
}
inline double SceneDouble::_internal_iamd_eq() const {
  return iamd_eq_;
}
inline double SceneDouble::iamd_eq() const {
  // @@protoc_insertion_point(field_get:mam.SceneDouble.iamd_eq)
  return _internal_iamd_eq();
}
inline void SceneDouble::_internal_set_iamd_eq(double value) {
  
  iamd_eq_ = value;
}
inline void SceneDouble::set_iamd_eq(double value) {
  _internal_set_iamd_eq(value);
  // @@protoc_insertion_point(field_set:mam.SceneDouble.iamd_eq)
}

// double iamd_ne = 2 [(.mam.xrule) = {
inline void SceneDouble::clear_iamd_ne() {
  iamd_ne_ = 0;
}
inline double SceneDouble::_internal_iamd_ne() const {
  return iamd_ne_;
}
inline double SceneDouble::iamd_ne() const {
  // @@protoc_insertion_point(field_get:mam.SceneDouble.iamd_ne)
  return _internal_iamd_ne();
}
inline void SceneDouble::_internal_set_iamd_ne(double value) {
  
  iamd_ne_ = value;
}
inline void SceneDouble::set_iamd_ne(double value) {
  _internal_set_iamd_ne(value);
  // @@protoc_insertion_point(field_set:mam.SceneDouble.iamd_ne)
}

// double iamd_gt = 3 [(.mam.xrule) = {
inline void SceneDouble::clear_iamd_gt() {
  iamd_gt_ = 0;
}
inline double SceneDouble::_internal_iamd_gt() const {
  return iamd_gt_;
}
inline double SceneDouble::iamd_gt() const {
  // @@protoc_insertion_point(field_get:mam.SceneDouble.iamd_gt)
  return _internal_iamd_gt();
}
inline void SceneDouble::_internal_set_iamd_gt(double value) {
  
  iamd_gt_ = value;
}
inline void SceneDouble::set_iamd_gt(double value) {
  _internal_set_iamd_gt(value);
  // @@protoc_insertion_point(field_set:mam.SceneDouble.iamd_gt)
}

// double iamd_ge = 4 [(.mam.xrule) = {
inline void SceneDouble::clear_iamd_ge() {
  iamd_ge_ = 0;
}
inline double SceneDouble::_internal_iamd_ge() const {
  return iamd_ge_;
}
inline double SceneDouble::iamd_ge() const {
  // @@protoc_insertion_point(field_get:mam.SceneDouble.iamd_ge)
  return _internal_iamd_ge();
}
inline void SceneDouble::_internal_set_iamd_ge(double value) {
  
  iamd_ge_ = value;
}
inline void SceneDouble::set_iamd_ge(double value) {
  _internal_set_iamd_ge(value);
  // @@protoc_insertion_point(field_set:mam.SceneDouble.iamd_ge)
}

// double iamd_lt = 5 [(.mam.xrule) = {
inline void SceneDouble::clear_iamd_lt() {
  iamd_lt_ = 0;
}
inline double SceneDouble::_internal_iamd_lt() const {
  return iamd_lt_;
}
inline double SceneDouble::iamd_lt() const {
  // @@protoc_insertion_point(field_get:mam.SceneDouble.iamd_lt)
  return _internal_iamd_lt();
}
inline void SceneDouble::_internal_set_iamd_lt(double value) {
  
  iamd_lt_ = value;
}
inline void SceneDouble::set_iamd_lt(double value) {
  _internal_set_iamd_lt(value);
  // @@protoc_insertion_point(field_set:mam.SceneDouble.iamd_lt)
}

// double iamd_le = 6 [(.mam.xrule) = {
inline void SceneDouble::clear_iamd_le() {
  iamd_le_ = 0;
}
inline double SceneDouble::_internal_iamd_le() const {
  return iamd_le_;
}
inline double SceneDouble::iamd_le() const {
  // @@protoc_insertion_point(field_get:mam.SceneDouble.iamd_le)
  return _internal_iamd_le();
}
inline void SceneDouble::_internal_set_iamd_le(double value) {
  
  iamd_le_ = value;
}
inline void SceneDouble::set_iamd_le(double value) {
  _internal_set_iamd_le(value);
  // @@protoc_insertion_point(field_set:mam.SceneDouble.iamd_le)
}

// double iamd_ge_lt = 7 [(.mam.xrule) = {
inline void SceneDouble::clear_iamd_ge_lt() {
  iamd_ge_lt_ = 0;
}
inline double SceneDouble::_internal_iamd_ge_lt() const {
  return iamd_ge_lt_;
}
inline double SceneDouble::iamd_ge_lt() const {
  // @@protoc_insertion_point(field_get:mam.SceneDouble.iamd_ge_lt)
  return _internal_iamd_ge_lt();
}
inline void SceneDouble::_internal_set_iamd_ge_lt(double value) {
  
  iamd_ge_lt_ = value;
}
inline void SceneDouble::set_iamd_ge_lt(double value) {
  _internal_set_iamd_ge_lt(value);
  // @@protoc_insertion_point(field_set:mam.SceneDouble.iamd_ge_lt)
}

// double iamd_eq_zero = 8 [(.mam.xrule) = {
inline void SceneDouble::clear_iamd_eq_zero() {
  iamd_eq_zero_ = 0;
}
inline double SceneDouble::_internal_iamd_eq_zero() const {
  return iamd_eq_zero_;
}
inline double SceneDouble::iamd_eq_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneDouble.iamd_eq_zero)
  return _internal_iamd_eq_zero();
}
inline void SceneDouble::_internal_set_iamd_eq_zero(double value) {
  
  iamd_eq_zero_ = value;
}
inline void SceneDouble::set_iamd_eq_zero(double value) {
  _internal_set_iamd_eq_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneDouble.iamd_eq_zero)
}

// double iamd_ne_zero = 9 [(.mam.xrule) = {
inline void SceneDouble::clear_iamd_ne_zero() {
  iamd_ne_zero_ = 0;
}
inline double SceneDouble::_internal_iamd_ne_zero() const {
  return iamd_ne_zero_;
}
inline double SceneDouble::iamd_ne_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneDouble.iamd_ne_zero)
  return _internal_iamd_ne_zero();
}
inline void SceneDouble::_internal_set_iamd_ne_zero(double value) {
  
  iamd_ne_zero_ = value;
}
inline void SceneDouble::set_iamd_ne_zero(double value) {
  _internal_set_iamd_ne_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneDouble.iamd_ne_zero)
}

// double iamd_gt_zero = 10 [(.mam.xrule) = {
inline void SceneDouble::clear_iamd_gt_zero() {
  iamd_gt_zero_ = 0;
}
inline double SceneDouble::_internal_iamd_gt_zero() const {
  return iamd_gt_zero_;
}
inline double SceneDouble::iamd_gt_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneDouble.iamd_gt_zero)
  return _internal_iamd_gt_zero();
}
inline void SceneDouble::_internal_set_iamd_gt_zero(double value) {
  
  iamd_gt_zero_ = value;
}
inline void SceneDouble::set_iamd_gt_zero(double value) {
  _internal_set_iamd_gt_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneDouble.iamd_gt_zero)
}

// double iamd_ge_zero = 11 [(.mam.xrule) = {
inline void SceneDouble::clear_iamd_ge_zero() {
  iamd_ge_zero_ = 0;
}
inline double SceneDouble::_internal_iamd_ge_zero() const {
  return iamd_ge_zero_;
}
inline double SceneDouble::iamd_ge_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneDouble.iamd_ge_zero)
  return _internal_iamd_ge_zero();
}
inline void SceneDouble::_internal_set_iamd_ge_zero(double value) {
  
  iamd_ge_zero_ = value;
}
inline void SceneDouble::set_iamd_ge_zero(double value) {
  _internal_set_iamd_ge_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneDouble.iamd_ge_zero)
}

// double iamd_lt_zero = 12 [(.mam.xrule) = {
inline void SceneDouble::clear_iamd_lt_zero() {
  iamd_lt_zero_ = 0;
}
inline double SceneDouble::_internal_iamd_lt_zero() const {
  return iamd_lt_zero_;
}
inline double SceneDouble::iamd_lt_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneDouble.iamd_lt_zero)
  return _internal_iamd_lt_zero();
}
inline void SceneDouble::_internal_set_iamd_lt_zero(double value) {
  
  iamd_lt_zero_ = value;
}
inline void SceneDouble::set_iamd_lt_zero(double value) {
  _internal_set_iamd_lt_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneDouble.iamd_lt_zero)
}

// double iamd_le_zero = 13 [(.mam.xrule) = {
inline void SceneDouble::clear_iamd_le_zero() {
  iamd_le_zero_ = 0;
}
inline double SceneDouble::_internal_iamd_le_zero() const {
  return iamd_le_zero_;
}
inline double SceneDouble::iamd_le_zero() const {
  // @@protoc_insertion_point(field_get:mam.SceneDouble.iamd_le_zero)
  return _internal_iamd_le_zero();
}
inline void SceneDouble::_internal_set_iamd_le_zero(double value) {
  
  iamd_le_zero_ = value;
}
inline void SceneDouble::set_iamd_le_zero(double value) {
  _internal_set_iamd_le_zero(value);
  // @@protoc_insertion_point(field_set:mam.SceneDouble.iamd_le_zero)
}

// double iamd_ge_lt_zero_left = 14 [(.mam.xrule) = {
inline void SceneDouble::clear_iamd_ge_lt_zero_left() {
  iamd_ge_lt_zero_left_ = 0;
}
inline double SceneDouble::_internal_iamd_ge_lt_zero_left() const {
  return iamd_ge_lt_zero_left_;
}
inline double SceneDouble::iamd_ge_lt_zero_left() const {
  // @@protoc_insertion_point(field_get:mam.SceneDouble.iamd_ge_lt_zero_left)
  return _internal_iamd_ge_lt_zero_left();
}
inline void SceneDouble::_internal_set_iamd_ge_lt_zero_left(double value) {
  
  iamd_ge_lt_zero_left_ = value;
}
inline void SceneDouble::set_iamd_ge_lt_zero_left(double value) {
  _internal_set_iamd_ge_lt_zero_left(value);
  // @@protoc_insertion_point(field_set:mam.SceneDouble.iamd_ge_lt_zero_left)
}

// double iamd_ge_lt_zero_right = 15 [(.mam.xrule) = {
inline void SceneDouble::clear_iamd_ge_lt_zero_right() {
  iamd_ge_lt_zero_right_ = 0;
}
inline double SceneDouble::_internal_iamd_ge_lt_zero_right() const {
  return iamd_ge_lt_zero_right_;
}
inline double SceneDouble::iamd_ge_lt_zero_right() const {
  // @@protoc_insertion_point(field_get:mam.SceneDouble.iamd_ge_lt_zero_right)
  return _internal_iamd_ge_lt_zero_right();
}
inline void SceneDouble::_internal_set_iamd_ge_lt_zero_right(double value) {
  
  iamd_ge_lt_zero_right_ = value;
}
inline void SceneDouble::set_iamd_ge_lt_zero_right(double value) {
  _internal_set_iamd_ge_lt_zero_right(value);
  // @@protoc_insertion_point(field_set:mam.SceneDouble.iamd_ge_lt_zero_right)
}

// -------------------------------------------------------------------

// SceneOther

// double rate = 1 [(.mam.xrule) = {
inline void SceneOther::clear_rate() {
  rate_ = 0;
}
inline double SceneOther::_internal_rate() const {
  return rate_;
}
inline double SceneOther::rate() const {
  // @@protoc_insertion_point(field_get:mam.SceneOther.rate)
  return _internal_rate();
}
inline void SceneOther::_internal_set_rate(double value) {
  
  rate_ = value;
}
inline void SceneOther::set_rate(double value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:mam.SceneOther.rate)
}

// int32 server = 2 [(.mam.xrule) = {
inline void SceneOther::clear_server() {
  server_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneOther::_internal_server() const {
  return server_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneOther::server() const {
  // @@protoc_insertion_point(field_get:mam.SceneOther.server)
  return _internal_server();
}
inline void SceneOther::_internal_set_server(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_ = value;
}
inline void SceneOther::set_server(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server(value);
  // @@protoc_insertion_point(field_set:mam.SceneOther.server)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fourteenth_2eproto
