// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fourteenth.proto

#include "fourteenth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_fourteenth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldRule_fourteenth_2eproto;
namespace mam {
class FieldRuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldRule> _instance;
} _FieldRule_default_instance_;
class SceneStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SceneString> _instance;
} _SceneString_default_instance_;
class SceneIntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SceneInt> _instance;
} _SceneInt_default_instance_;
class SceneUIntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SceneUInt> _instance;
} _SceneUInt_default_instance_;
class SceneLongDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SceneLong> _instance;
} _SceneLong_default_instance_;
class SceneULongDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SceneULong> _instance;
} _SceneULong_default_instance_;
class SceneFloatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SceneFloat> _instance;
} _SceneFloat_default_instance_;
class SceneDoubleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SceneDouble> _instance;
} _SceneDouble_default_instance_;
class SceneOtherDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SceneOther> _instance;
} _SceneOther_default_instance_;
}  // namespace mam
static void InitDefaultsscc_info_FieldRule_fourteenth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_FieldRule_default_instance_;
    new (ptr) ::mam::FieldRule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::FieldRule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldRule_fourteenth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FieldRule_fourteenth_2eproto}, {}};

static void InitDefaultsscc_info_SceneDouble_fourteenth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_SceneDouble_default_instance_;
    new (ptr) ::mam::SceneDouble();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::SceneDouble::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SceneDouble_fourteenth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SceneDouble_fourteenth_2eproto}, {}};

static void InitDefaultsscc_info_SceneFloat_fourteenth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_SceneFloat_default_instance_;
    new (ptr) ::mam::SceneFloat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::SceneFloat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SceneFloat_fourteenth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SceneFloat_fourteenth_2eproto}, {}};

static void InitDefaultsscc_info_SceneInt_fourteenth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_SceneInt_default_instance_;
    new (ptr) ::mam::SceneInt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::SceneInt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SceneInt_fourteenth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SceneInt_fourteenth_2eproto}, {}};

static void InitDefaultsscc_info_SceneLong_fourteenth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_SceneLong_default_instance_;
    new (ptr) ::mam::SceneLong();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::SceneLong::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SceneLong_fourteenth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SceneLong_fourteenth_2eproto}, {}};

static void InitDefaultsscc_info_SceneOther_fourteenth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_SceneOther_default_instance_;
    new (ptr) ::mam::SceneOther();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::SceneOther::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SceneOther_fourteenth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SceneOther_fourteenth_2eproto}, {}};

static void InitDefaultsscc_info_SceneString_fourteenth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_SceneString_default_instance_;
    new (ptr) ::mam::SceneString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::SceneString::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SceneString_fourteenth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SceneString_fourteenth_2eproto}, {}};

static void InitDefaultsscc_info_SceneUInt_fourteenth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_SceneUInt_default_instance_;
    new (ptr) ::mam::SceneUInt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::SceneUInt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SceneUInt_fourteenth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SceneUInt_fourteenth_2eproto}, {}};

static void InitDefaultsscc_info_SceneULong_fourteenth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_SceneULong_default_instance_;
    new (ptr) ::mam::SceneULong();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::SceneULong::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SceneULong_fourteenth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SceneULong_fourteenth_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fourteenth_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_fourteenth_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fourteenth_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fourteenth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, str_regex_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, str_in_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, str_nin_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, str_eq_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, str_ne_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, eq_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, ne_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, gt_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, ge_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, lt_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, le_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, and_true_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, or_true_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, xor_true_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, and_false_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, or_false_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, xor_false_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::SceneString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::SceneString, iams_in_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneString, iams_ins_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneString, iams_nin_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneString, iams_nins_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneString, iams_eq_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneString, iams_eqs_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneString, iams_eqss_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneString, iams_ne_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneString, iams_nes_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneString, iams_ness_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneString, iams_in_symbol_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneString, iams_nin_symbol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::SceneInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::SceneInt, iami_eq_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneInt, iami_ne_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneInt, iami_gt_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneInt, iami_ge_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneInt, iami_lt_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneInt, iami_le_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneInt, iami_ge_lt_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneInt, iami_eq_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneInt, iami_ne_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneInt, iami_gt_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneInt, iami_ge_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneInt, iami_lt_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneInt, iami_le_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneInt, iami_ge_lt_zero_left_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneInt, iami_ge_lt_zero_right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::SceneUInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::SceneUInt, iamui_eq_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneUInt, iamui_ne_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneUInt, iamui_gt_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneUInt, iamui_ge_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneUInt, iamui_lt_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneUInt, iamui_le_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneUInt, iamui_ge_lt_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneUInt, iamui_eq_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneUInt, iamui_ne_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneUInt, iamui_gt_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneUInt, iamui_ge_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneUInt, iamui_le_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneUInt, iamui_ge_lt_zero_left_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::SceneLong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::SceneLong, iaml_eq_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneLong, iaml_ne_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneLong, iaml_gt_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneLong, iaml_ge_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneLong, iaml_lt_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneLong, iaml_le_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneLong, iaml_ge_lt_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneLong, iaml_eq_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneLong, iaml_ne_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneLong, iaml_gt_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneLong, iaml_ge_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneLong, iaml_lt_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneLong, iaml_le_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneLong, iaml_ge_lt_zero_left_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneLong, iaml_ge_lt_zero_right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::SceneULong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::SceneULong, iamul_eq_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneULong, iamul_ne_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneULong, iamul_gt_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneULong, iamul_ge_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneULong, iamul_lt_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneULong, iamul_le_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneULong, iamul_ge_lt_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneULong, iamul_eq_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneULong, iamul_ne_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneULong, iamul_gt_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneULong, iamul_ge_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneULong, iamul_le_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneULong, iamul_ge_lt_zero_left_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::SceneFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::SceneFloat, iamf_eq_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneFloat, iamf_ne_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneFloat, iamf_gt_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneFloat, iamf_ge_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneFloat, iamf_lt_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneFloat, iamf_le_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneFloat, iamf_ge_lt_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneFloat, iamf_eq_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneFloat, iamf_ne_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneFloat, iamf_gt_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneFloat, iamf_ge_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneFloat, iamf_lt_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneFloat, iamf_le_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneFloat, iamf_ge_lt_zero_left_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneFloat, iamf_ge_lt_zero_right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::SceneDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::SceneDouble, iamd_eq_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneDouble, iamd_ne_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneDouble, iamd_gt_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneDouble, iamd_ge_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneDouble, iamd_lt_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneDouble, iamd_le_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneDouble, iamd_ge_lt_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneDouble, iamd_eq_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneDouble, iamd_ne_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneDouble, iamd_gt_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneDouble, iamd_ge_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneDouble, iamd_lt_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneDouble, iamd_le_zero_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneDouble, iamd_ge_lt_zero_left_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneDouble, iamd_ge_lt_zero_right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::SceneOther, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::SceneOther, rate_),
  PROTOBUF_FIELD_OFFSET(::mam::SceneOther, server_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mam::FieldRule)},
  { 22, -1, sizeof(::mam::SceneString)},
  { 39, -1, sizeof(::mam::SceneInt)},
  { 59, -1, sizeof(::mam::SceneUInt)},
  { 77, -1, sizeof(::mam::SceneLong)},
  { 97, -1, sizeof(::mam::SceneULong)},
  { 115, -1, sizeof(::mam::SceneFloat)},
  { 135, -1, sizeof(::mam::SceneDouble)},
  { 155, -1, sizeof(::mam::SceneOther)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_FieldRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_SceneString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_SceneInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_SceneUInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_SceneLong_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_SceneULong_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_SceneFloat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_SceneDouble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_SceneOther_default_instance_),
};

const char descriptor_table_protodef_fourteenth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020fourteenth.proto\022\003mam\032 google/protobuf"
  "/descriptor.proto\"\224\002\n\tFieldRule\022\021\n\tstr_r"
  "egex\030\001 \001(\t\022\016\n\006str_in\030\002 \001(\t\022\017\n\007str_nin\030\003 "
  "\001(\t\022\016\n\006str_eq\030\004 \001(\t\022\016\n\006str_ne\030\005 \001(\t\022\n\n\002e"
  "q\030\013 \001(\001\022\n\n\002ne\030\014 \001(\001\022\n\n\002gt\030\r \001(\001\022\n\n\002ge\030\016 "
  "\001(\001\022\n\n\002lt\030\017 \001(\001\022\n\n\002le\030\020 \001(\001\022\020\n\010and_true\030"
  "\025 \001(\005\022\017\n\007or_true\030\026 \001(\005\022\020\n\010xor_true\030\027 \001(\005"
  "\022\021\n\tand_false\030\030 \001(\005\022\020\n\010or_false\030\031 \001(\005\022\021\n"
  "\txor_false\030\032 \001(\005\"\362\002\n\013SceneString\022\030\n\007iams"
  "_in\030\001 \001(\tB\007\262\366\004\003\022\001x\022\032\n\010iams_ins\030\002 \001(\tB\010\262\366"
  "\004\004\022\002er\022\031\n\010iams_nin\030\003 \001(\tB\007\262\366\004\003\032\001y\022\033\n\tiam"
  "s_nins\030\004 \001(\tB\010\262\366\004\004\032\002xr\022\030\n\007iams_eq\030\005 \001(\tB"
  "\007\262\366\004\003\"\001l\022\032\n\010iams_eqs\030\006 \001(\tB\010\262\366\004\004\"\002li\022$\n\t"
  "iams_eqss\030\007 \001(\tB\021\262\366\004\r\"\013hello world\022\030\n\007ia"
  "ms_ne\030\010 \001(\tB\007\262\366\004\003*\001o\022\032\n\010iams_nes\030\t \001(\tB\010"
  "\262\366\004\004*\002oo\022 \n\tiams_ness\030\n \001(\tB\r\262\366\004\t*\007grok "
  "it\022\037\n\016iams_in_symbol\030\013 \001(\tB\007\262\366\004\003\022\001_\022 \n\017i"
  "ams_nin_symbol\030\014 \001(\tB\007\262\366\004\003\032\001_\"\303\004\n\010SceneI"
  "nt\022\036\n\007iami_eq\030\001 \001(\005B\r\262\366\004\tY\000\000\000\000\000\360\236@\022\036\n\007ia"
  "mi_ne\030\002 \001(\005B\r\262\366\004\ta\000\000\000\000\200\010\301\300\022\036\n\007iami_gt\030\003 "
  "\001(\005B\r\262\366\004\ti\000\000\000\000\000\340\233@\022\036\n\007iami_ge\030\004 \001(\005B\r\262\366\004"
  "\tq\000\000\000\000\000\252\247\300\022\036\n\007iami_lt\030\005 \001(\005B\r\262\366\004\ty\000\000\000\000\000\347"
  "\300\300\022\037\n\007iami_le\030\006 \001(\005B\016\262\366\004\n\201\001\000\000\000\374\203\327\227A\022*\n\ni"
  "ami_ge_lt\030\007 \001(\005B\026\262\366\004\022q\000\000\000\000\000\300\222@y\000\000\000\000\000$\303@\022"
  "#\n\014iami_eq_zero\030\010 \001(\005B\r\262\366\004\tY\215\355\265\240\367\306\260>\022#\n\014"
  "iami_ne_zero\030\t \001(\005B\r\262\366\004\ta\215\355\265\240\367\306\260\276\022#\n\014iam"
  "i_gt_zero\030\n \001(\005B\r\262\366\004\ti\215\355\265\240\367\306\260>\022#\n\014iami_g"
  "e_zero\030\013 \001(\005B\r\262\366\004\tq\215\355\265\240\367\306\260\276\022#\n\014iami_lt_z"
  "ero\030\014 \001(\005B\r\262\366\004\ty\215\355\265\240\367\306\260>\022$\n\014iami_le_zero"
  "\030\r \001(\005B\016\262\366\004\n\201\001\215\355\265\240\367\306\260\276\0224\n\024iami_ge_lt_zer"
  "o_left\030\016 \001(\005B\026\262\366\004\022q\215\355\265\240\367\306\260>y\000\000\000\000\000$\303@\0225\n\025"
  "iami_ge_lt_zero_right\030\017 \001(\005B\026\262\366\004\022q\000\000\000\000\000\370"
  "\241\300y\215\355\265\240\367\306\260\276\"\365\003\n\tSceneUInt\022\037\n\010iamui_eq\030\001 "
  "\001(\rB\r\262\366\004\tY\000\000\000\000\000\360\236@\022\037\n\010iamui_ne\030\002 \001(\rB\r\262\366"
  "\004\ta\000\000\000\000\200\010\301@\022\037\n\010iamui_gt\030\003 \001(\rB\r\262\366\004\ti\000\000\000\000"
  "\000\340\233@\022\037\n\010iamui_ge\030\004 \001(\rB\r\262\366\004\tq\000\000\000\000\000\252\247@\022\037\n"
  "\010iamui_lt\030\005 \001(\rB\r\262\366\004\ty\000\000\000\000\000\347\300@\022 \n\010iamui_"
  "le\030\006 \001(\rB\016\262\366\004\n\201\001\000\000\000\374\203\327\227A\022+\n\013iamui_ge_lt\030"
  "\007 \001(\rB\026\262\366\004\022q\000\000\000\000\000\300\222@y\000\000\000\000\000$\303@\022$\n\riamui_e"
  "q_zero\030\010 \001(\rB\r\262\366\004\tY\215\355\265\240\367\306\260>\022$\n\riamui_ne_"
  "zero\030\t \001(\rB\r\262\366\004\ta\215\355\265\240\367\306\260\276\022$\n\riamui_gt_ze"
  "ro\030\n \001(\rB\r\262\366\004\ti\215\355\265\240\367\306\260>\022$\n\riamui_ge_zero"
  "\030\013 \001(\rB\r\262\366\004\tq\215\355\265\240\367\306\260\276\022%\n\riamui_le_zero\030\014"
  " \001(\rB\016\262\366\004\n\201\001\215\355\265\240\367\306\260\276\0225\n\025iamui_ge_lt_zero"
  "_left\030\r \001(\rB\026\262\366\004\022q\215\355\265\240\367\306\260>y\000\000\000\000\000$\303@\"\304\004\n\t"
  "SceneLong\022\036\n\007iaml_eq\030\001 \001(\003B\r\262\366\004\tY\000\000\000\000\000\360\236"
  "@\022\036\n\007iaml_ne\030\002 \001(\003B\r\262\366\004\ta\000\000\000\000\200\010\301\300\022\036\n\007iam"
  "l_gt\030\003 \001(\003B\r\262\366\004\ti\000\000\000\000\000\340\233@\022\036\n\007iaml_ge\030\004 \001"
  "(\003B\r\262\366\004\tq\000\000\000\000\000\252\247\300\022\036\n\007iaml_lt\030\005 \001(\003B\r\262\366\004\t"
  "y\000\000\000\000\000\347\300\300\022\037\n\007iaml_le\030\006 \001(\003B\016\262\366\004\n\201\001\000\000\000\374\203\327"
  "\227A\022*\n\niaml_ge_lt\030\007 \001(\003B\026\262\366\004\022q\000\000\000\000\000\300\222@y\000\000"
  "\000\000\000$\303@\022#\n\014iaml_eq_zero\030\010 \001(\003B\r\262\366\004\tY\215\355\265\240\367"
  "\306\260>\022#\n\014iaml_ne_zero\030\t \001(\003B\r\262\366\004\ta\215\355\265\240\367\306\260\276"
  "\022#\n\014iaml_gt_zero\030\n \001(\003B\r\262\366\004\ti\215\355\265\240\367\306\260>\022#\n"
  "\014iaml_ge_zero\030\013 \001(\003B\r\262\366\004\tq\215\355\265\240\367\306\260\276\022#\n\014ia"
  "ml_lt_zero\030\014 \001(\003B\r\262\366\004\ty\215\355\265\240\367\306\260>\022$\n\014iaml_"
  "le_zero\030\r \001(\003B\016\262\366\004\n\201\001\215\355\265\240\367\306\260\276\0224\n\024iaml_ge"
  "_lt_zero_left\030\016 \001(\003B\026\262\366\004\022q\215\355\265\240\367\306\260>y\000\000\000\000\000"
  "$\303@\0225\n\025iaml_ge_lt_zero_right\030\017 \001(\003B\026\262\366\004\022"
  "q\000\000\000\000\000\370\241\300y\215\355\265\240\367\306\260\276\"\366\003\n\nSceneULong\022\037\n\010iam"
  "ul_eq\030\001 \001(\004B\r\262\366\004\tY\000\000\000\000\000\360\236@\022\037\n\010iamul_ne\030\002"
  " \001(\004B\r\262\366\004\ta\000\000\000\000\200\010\301@\022\037\n\010iamul_gt\030\003 \001(\004B\r\262"
  "\366\004\ti\000\000\000\000\000\340\233@\022\037\n\010iamul_ge\030\004 \001(\004B\r\262\366\004\tq\000\000\000"
  "\000\000\252\247@\022\037\n\010iamul_lt\030\005 \001(\004B\r\262\366\004\ty\000\000\000\000\000\347\300@\022 "
  "\n\010iamul_le\030\006 \001(\004B\016\262\366\004\n\201\001\000\000\000\374\203\327\227A\022+\n\013iamu"
  "l_ge_lt\030\007 \001(\004B\026\262\366\004\022q\000\000\000\000\000\300\222@y\000\000\000\000\000$\303@\022$\n"
  "\riamul_eq_zero\030\010 \001(\004B\r\262\366\004\tY\215\355\265\240\367\306\260>\022$\n\ri"
  "amul_ne_zero\030\t \001(\004B\r\262\366\004\ta\215\355\265\240\367\306\260\276\022$\n\riam"
  "ul_gt_zero\030\n \001(\004B\r\262\366\004\ti\215\355\265\240\367\306\260>\022$\n\riamul"
  "_ge_zero\030\013 \001(\004B\r\262\366\004\tq\215\355\265\240\367\306\260\276\022%\n\riamul_l"
  "e_zero\030\014 \001(\004B\016\262\366\004\n\201\001\215\355\265\240\367\306\260\276\0225\n\025iamul_ge"
  "_lt_zero_left\030\r \001(\004B\026\262\366\004\022q\215\355\265\240\367\306\260>y\000\000\000\000\000"
  "$\303@\"\305\004\n\nSceneFloat\022\036\n\007iamf_eq\030\001 \001(\002B\r\262\366\004"
  "\tY\242E\266\363}\360\236@\022\036\n\007iamf_ne\030\002 \001(\002B\r\262\366\004\ta}\?5^\272\010"
  "\301\300\022\036\n\007iamf_gt\030\003 \001(\002B\r\262\366\004\ti-\262\235\357\'\343\233@\022\036\n\007ia"
  "mf_ge\030\004 \001(\002B\r\262\366\004\tq\321\"\333\371>\252\247\300\022\036\n\007iamf_lt\030\005 "
  "\001(\002B\r\262\366\004\ty}\?5^:\347\300\300\022\037\n\007iamf_le\030\006 \001(\002B\016\262\366\004"
  "\n\201\001\236\357\'\377\203\327\227A\022*\n\niamf_ge_lt\030\007 \001(\002B\026\262\366\004\022q\242E"
  "\266\363}\300\222@y}\?5^:$\303@\022#\n\014iamf_eq_zero\030\010 \001(\002B\r\262"
  "\366\004\tY\215\355\265\240\367\306\260>\022#\n\014iamf_ne_zero\030\t \001(\002B\r\262\366\004\t"
  "a\215\355\265\240\367\306\260\276\022#\n\014iamf_gt_zero\030\n \001(\002B\r\262\366\004\ti\215\355"
  "\265\240\367\306\260>\022#\n\014iamf_ge_zero\030\013 \001(\002B\r\262\366\004\tq\215\355\265\240\367"
  "\306\260\276\022#\n\014iamf_lt_zero\030\014 \001(\002B\r\262\366\004\ty\215\355\265\240\367\306\260>"
  "\022$\n\014iamf_le_zero\030\r \001(\002B\016\262\366\004\n\201\001\215\355\265\240\367\306\260\276\0224"
  "\n\024iamf_ge_lt_zero_left\030\016 \001(\002B\026\262\366\004\022q\215\355\265\240\367"
  "\306\260>y\264\310v\276\017$\303@\0225\n\025iamf_ge_lt_zero_right\030\017 "
  "\001(\002B\026\262\366\004\022q\364\375\324x\351\370\241\300y\215\355\265\240\367\306\260\276\"\306\004\n\013SceneDou"
  "ble\022\036\n\007iamd_eq\030\001 \001(\001B\r\262\366\004\tY\242E\266\363}\360\236@\022\036\n\007i"
  "amd_ne\030\002 \001(\001B\r\262\366\004\ta}\?5^\272\010\301\300\022\036\n\007iamd_gt\030\003"
  " \001(\001B\r\262\366\004\ti-\262\235\357\'\343\233@\022\036\n\007iamd_ge\030\004 \001(\001B\r\262\366"
  "\004\tq\321\"\333\371>\252\247\300\022\036\n\007iamd_lt\030\005 \001(\001B\r\262\366\004\ty}\?5^:"
  "\347\300\300\022\037\n\007iamd_le\030\006 \001(\001B\016\262\366\004\n\201\001\236\357\'\377\203\327\227A\022*\n\n"
  "iamd_ge_lt\030\007 \001(\001B\026\262\366\004\022q\242E\266\363}\300\222@y}\?5^:$\303@"
  "\022#\n\014iamd_eq_zero\030\010 \001(\001B\r\262\366\004\tY\215\355\265\240\367\306\260>\022#\n"
  "\014iamd_ne_zero\030\t \001(\001B\r\262\366\004\ta\215\355\265\240\367\306\260\276\022#\n\014ia"
  "md_gt_zero\030\n \001(\001B\r\262\366\004\ti\215\355\265\240\367\306\260>\022#\n\014iamd_"
  "ge_zero\030\013 \001(\001B\r\262\366\004\tq\215\355\265\240\367\306\260\276\022#\n\014iamd_lt_"
  "zero\030\014 \001(\001B\r\262\366\004\ty\215\355\265\240\367\306\260>\022$\n\014iamd_le_zer"
  "o\030\r \001(\001B\016\262\366\004\n\201\001\215\355\265\240\367\306\260\276\0224\n\024iamd_ge_lt_ze"
  "ro_left\030\016 \001(\001B\026\262\366\004\022q\215\355\265\240\367\306\260>y\264\310v\276\017$\303@\0225\n"
  "\025iamd_ge_lt_zero_right\030\017 \001(\001B\026\262\366\004\022q\364\375\324x\351"
  "\370\241\300y\215\355\265\240\367\306\260\276\"\\\n\nSceneOther\022%\n\004rate\030\001 \001(\001"
  "B\027\262\366\004\023q\215\355\265\240\367\306\260>\201\001\000\000\000\000\000\000\360\?\022\'\n\006server\030\002 \001("
  "\005B\027\262\366\004\023q\000\000\000\000\000\000\360\?\201\001\000\000\000\000\000\300X@:=\n\005xrule\022\035.go"
  "ogle.protobuf.FieldOptions\030\346N \001(\0132\016.mam."
  "FieldRuleb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_fourteenth_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_fourteenth_2eproto_sccs[9] = {
  &scc_info_FieldRule_fourteenth_2eproto.base,
  &scc_info_SceneDouble_fourteenth_2eproto.base,
  &scc_info_SceneFloat_fourteenth_2eproto.base,
  &scc_info_SceneInt_fourteenth_2eproto.base,
  &scc_info_SceneLong_fourteenth_2eproto.base,
  &scc_info_SceneOther_fourteenth_2eproto.base,
  &scc_info_SceneString_fourteenth_2eproto.base,
  &scc_info_SceneUInt_fourteenth_2eproto.base,
  &scc_info_SceneULong_fourteenth_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fourteenth_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fourteenth_2eproto = {
  false, false, descriptor_table_protodef_fourteenth_2eproto, "fourteenth.proto", 4217,
  &descriptor_table_fourteenth_2eproto_once, descriptor_table_fourteenth_2eproto_sccs, descriptor_table_fourteenth_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_fourteenth_2eproto::offsets,
  file_level_metadata_fourteenth_2eproto, 9, file_level_enum_descriptors_fourteenth_2eproto, file_level_service_descriptors_fourteenth_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fourteenth_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_fourteenth_2eproto)), true);
namespace mam {

// ===================================================================

void FieldRule::InitAsDefaultInstance() {
}
class FieldRule::_Internal {
 public:
};

FieldRule::FieldRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.FieldRule)
}
FieldRule::FieldRule(const FieldRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  str_regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str_regex().empty()) {
    str_regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_str_regex(),
      GetArena());
  }
  str_in_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str_in().empty()) {
    str_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_str_in(),
      GetArena());
  }
  str_nin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str_nin().empty()) {
    str_nin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_str_nin(),
      GetArena());
  }
  str_eq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str_eq().empty()) {
    str_eq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_str_eq(),
      GetArena());
  }
  str_ne_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str_ne().empty()) {
    str_ne_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_str_ne(),
      GetArena());
  }
  ::memcpy(&eq_, &from.eq_,
    static_cast<size_t>(reinterpret_cast<char*>(&xor_false_) -
    reinterpret_cast<char*>(&eq_)) + sizeof(xor_false_));
  // @@protoc_insertion_point(copy_constructor:mam.FieldRule)
}

void FieldRule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldRule_fourteenth_2eproto.base);
  str_regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_in_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_nin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_eq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_ne_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&eq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xor_false_) -
      reinterpret_cast<char*>(&eq_)) + sizeof(xor_false_));
}

FieldRule::~FieldRule() {
  // @@protoc_insertion_point(destructor:mam.FieldRule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FieldRule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  str_regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_in_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_nin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_eq_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_ne_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FieldRule::ArenaDtor(void* object) {
  FieldRule* _this = reinterpret_cast< FieldRule* >(object);
  (void)_this;
}
void FieldRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FieldRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldRule& FieldRule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldRule_fourteenth_2eproto.base);
  return *internal_default_instance();
}


void FieldRule::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.FieldRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str_regex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  str_in_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  str_nin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  str_eq_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  str_ne_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&eq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xor_false_) -
      reinterpret_cast<char*>(&eq_)) + sizeof(xor_false_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string str_regex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_str_regex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.FieldRule.str_regex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str_in = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_str_in();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.FieldRule.str_in"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str_nin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_str_nin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.FieldRule.str_nin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str_eq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_str_eq();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.FieldRule.str_eq"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str_ne = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_str_ne();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.FieldRule.str_ne"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double eq = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          eq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ne = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          ne_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gt = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          gt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ge = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          ge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lt = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          lt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double le = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          le_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 and_true = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          and_true_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 or_true = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          or_true_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 xor_true = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          xor_true_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 and_false = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          and_false_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 or_false = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          or_false_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 xor_false = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          xor_false_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.FieldRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string str_regex = 1;
  if (this->str_regex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str_regex().data(), static_cast<int>(this->_internal_str_regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.FieldRule.str_regex");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_str_regex(), target);
  }

  // string str_in = 2;
  if (this->str_in().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str_in().data(), static_cast<int>(this->_internal_str_in().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.FieldRule.str_in");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_str_in(), target);
  }

  // string str_nin = 3;
  if (this->str_nin().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str_nin().data(), static_cast<int>(this->_internal_str_nin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.FieldRule.str_nin");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_str_nin(), target);
  }

  // string str_eq = 4;
  if (this->str_eq().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str_eq().data(), static_cast<int>(this->_internal_str_eq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.FieldRule.str_eq");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_str_eq(), target);
  }

  // string str_ne = 5;
  if (this->str_ne().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str_ne().data(), static_cast<int>(this->_internal_str_ne().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.FieldRule.str_ne");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_str_ne(), target);
  }

  // double eq = 11;
  if (!(this->eq() <= 0 && this->eq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_eq(), target);
  }

  // double ne = 12;
  if (!(this->ne() <= 0 && this->ne() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_ne(), target);
  }

  // double gt = 13;
  if (!(this->gt() <= 0 && this->gt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_gt(), target);
  }

  // double ge = 14;
  if (!(this->ge() <= 0 && this->ge() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_ge(), target);
  }

  // double lt = 15;
  if (!(this->lt() <= 0 && this->lt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_lt(), target);
  }

  // double le = 16;
  if (!(this->le() <= 0 && this->le() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_le(), target);
  }

  // int32 and_true = 21;
  if (this->and_true() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_and_true(), target);
  }

  // int32 or_true = 22;
  if (this->or_true() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_or_true(), target);
  }

  // int32 xor_true = 23;
  if (this->xor_true() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_xor_true(), target);
  }

  // int32 and_false = 24;
  if (this->and_false() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_and_false(), target);
  }

  // int32 or_false = 25;
  if (this->or_false() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_or_false(), target);
  }

  // int32 xor_false = 26;
  if (this->xor_false() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_xor_false(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.FieldRule)
  return target;
}

size_t FieldRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.FieldRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string str_regex = 1;
  if (this->str_regex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str_regex());
  }

  // string str_in = 2;
  if (this->str_in().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str_in());
  }

  // string str_nin = 3;
  if (this->str_nin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str_nin());
  }

  // string str_eq = 4;
  if (this->str_eq().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str_eq());
  }

  // string str_ne = 5;
  if (this->str_ne().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str_ne());
  }

  // double eq = 11;
  if (!(this->eq() <= 0 && this->eq() >= 0)) {
    total_size += 1 + 8;
  }

  // double ne = 12;
  if (!(this->ne() <= 0 && this->ne() >= 0)) {
    total_size += 1 + 8;
  }

  // double gt = 13;
  if (!(this->gt() <= 0 && this->gt() >= 0)) {
    total_size += 1 + 8;
  }

  // double ge = 14;
  if (!(this->ge() <= 0 && this->ge() >= 0)) {
    total_size += 1 + 8;
  }

  // double lt = 15;
  if (!(this->lt() <= 0 && this->lt() >= 0)) {
    total_size += 1 + 8;
  }

  // double le = 16;
  if (!(this->le() <= 0 && this->le() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 and_true = 21;
  if (this->and_true() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_and_true());
  }

  // int32 or_true = 22;
  if (this->or_true() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_or_true());
  }

  // int32 xor_true = 23;
  if (this->xor_true() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_xor_true());
  }

  // int32 and_false = 24;
  if (this->and_false() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_and_false());
  }

  // int32 or_false = 25;
  if (this->or_false() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_or_false());
  }

  // int32 xor_false = 26;
  if (this->xor_false() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_xor_false());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldRule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.FieldRule)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldRule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.FieldRule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.FieldRule)
    MergeFrom(*source);
  }
}

void FieldRule::MergeFrom(const FieldRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.FieldRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.str_regex().size() > 0) {
    _internal_set_str_regex(from._internal_str_regex());
  }
  if (from.str_in().size() > 0) {
    _internal_set_str_in(from._internal_str_in());
  }
  if (from.str_nin().size() > 0) {
    _internal_set_str_nin(from._internal_str_nin());
  }
  if (from.str_eq().size() > 0) {
    _internal_set_str_eq(from._internal_str_eq());
  }
  if (from.str_ne().size() > 0) {
    _internal_set_str_ne(from._internal_str_ne());
  }
  if (!(from.eq() <= 0 && from.eq() >= 0)) {
    _internal_set_eq(from._internal_eq());
  }
  if (!(from.ne() <= 0 && from.ne() >= 0)) {
    _internal_set_ne(from._internal_ne());
  }
  if (!(from.gt() <= 0 && from.gt() >= 0)) {
    _internal_set_gt(from._internal_gt());
  }
  if (!(from.ge() <= 0 && from.ge() >= 0)) {
    _internal_set_ge(from._internal_ge());
  }
  if (!(from.lt() <= 0 && from.lt() >= 0)) {
    _internal_set_lt(from._internal_lt());
  }
  if (!(from.le() <= 0 && from.le() >= 0)) {
    _internal_set_le(from._internal_le());
  }
  if (from.and_true() != 0) {
    _internal_set_and_true(from._internal_and_true());
  }
  if (from.or_true() != 0) {
    _internal_set_or_true(from._internal_or_true());
  }
  if (from.xor_true() != 0) {
    _internal_set_xor_true(from._internal_xor_true());
  }
  if (from.and_false() != 0) {
    _internal_set_and_false(from._internal_and_false());
  }
  if (from.or_false() != 0) {
    _internal_set_or_false(from._internal_or_false());
  }
  if (from.xor_false() != 0) {
    _internal_set_xor_false(from._internal_xor_false());
  }
}

void FieldRule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.FieldRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldRule::CopyFrom(const FieldRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.FieldRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldRule::IsInitialized() const {
  return true;
}

void FieldRule::InternalSwap(FieldRule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  str_regex_.Swap(&other->str_regex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  str_in_.Swap(&other->str_in_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  str_nin_.Swap(&other->str_nin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  str_eq_.Swap(&other->str_eq_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  str_ne_.Swap(&other->str_ne_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FieldRule, xor_false_)
      + sizeof(FieldRule::xor_false_)
      - PROTOBUF_FIELD_OFFSET(FieldRule, eq_)>(
          reinterpret_cast<char*>(&eq_),
          reinterpret_cast<char*>(&other->eq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldRule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SceneString::InitAsDefaultInstance() {
}
class SceneString::_Internal {
 public:
};

SceneString::SceneString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.SceneString)
}
SceneString::SceneString(const SceneString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  iams_in_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iams_in().empty()) {
    iams_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_iams_in(),
      GetArena());
  }
  iams_ins_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iams_ins().empty()) {
    iams_ins_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_iams_ins(),
      GetArena());
  }
  iams_nin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iams_nin().empty()) {
    iams_nin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_iams_nin(),
      GetArena());
  }
  iams_nins_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iams_nins().empty()) {
    iams_nins_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_iams_nins(),
      GetArena());
  }
  iams_eq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iams_eq().empty()) {
    iams_eq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_iams_eq(),
      GetArena());
  }
  iams_eqs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iams_eqs().empty()) {
    iams_eqs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_iams_eqs(),
      GetArena());
  }
  iams_eqss_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iams_eqss().empty()) {
    iams_eqss_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_iams_eqss(),
      GetArena());
  }
  iams_ne_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iams_ne().empty()) {
    iams_ne_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_iams_ne(),
      GetArena());
  }
  iams_nes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iams_nes().empty()) {
    iams_nes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_iams_nes(),
      GetArena());
  }
  iams_ness_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iams_ness().empty()) {
    iams_ness_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_iams_ness(),
      GetArena());
  }
  iams_in_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iams_in_symbol().empty()) {
    iams_in_symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_iams_in_symbol(),
      GetArena());
  }
  iams_nin_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iams_nin_symbol().empty()) {
    iams_nin_symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_iams_nin_symbol(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mam.SceneString)
}

void SceneString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SceneString_fourteenth_2eproto.base);
  iams_in_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_ins_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_nin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_nins_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_eq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_eqs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_eqss_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_ne_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_nes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_ness_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_in_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_nin_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SceneString::~SceneString() {
  // @@protoc_insertion_point(destructor:mam.SceneString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SceneString::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  iams_in_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_ins_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_nin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_nins_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_eq_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_eqs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_eqss_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_ne_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_nes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_ness_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_in_symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iams_nin_symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SceneString::ArenaDtor(void* object) {
  SceneString* _this = reinterpret_cast< SceneString* >(object);
  (void)_this;
}
void SceneString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SceneString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SceneString& SceneString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SceneString_fourteenth_2eproto.base);
  return *internal_default_instance();
}


void SceneString::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.SceneString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iams_in_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_ins_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_nin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_nins_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_eq_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_eqs_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_eqss_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_ne_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_nes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_ness_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_in_symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_nin_symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string iams_in = 1 [(.mam.xrule) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_iams_in();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.SceneString.iams_in"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iams_ins = 2 [(.mam.xrule) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_iams_ins();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.SceneString.iams_ins"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iams_nin = 3 [(.mam.xrule) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_iams_nin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.SceneString.iams_nin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iams_nins = 4 [(.mam.xrule) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_iams_nins();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.SceneString.iams_nins"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iams_eq = 5 [(.mam.xrule) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_iams_eq();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.SceneString.iams_eq"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iams_eqs = 6 [(.mam.xrule) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_iams_eqs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.SceneString.iams_eqs"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iams_eqss = 7 [(.mam.xrule) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_iams_eqss();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.SceneString.iams_eqss"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iams_ne = 8 [(.mam.xrule) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_iams_ne();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.SceneString.iams_ne"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iams_nes = 9 [(.mam.xrule) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_iams_nes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.SceneString.iams_nes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iams_ness = 10 [(.mam.xrule) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_iams_ness();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.SceneString.iams_ness"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iams_in_symbol = 11 [(.mam.xrule) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_iams_in_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.SceneString.iams_in_symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iams_nin_symbol = 12 [(.mam.xrule) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_iams_nin_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.SceneString.iams_nin_symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SceneString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.SceneString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string iams_in = 1 [(.mam.xrule) = {
  if (this->iams_in().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iams_in().data(), static_cast<int>(this->_internal_iams_in().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.SceneString.iams_in");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_iams_in(), target);
  }

  // string iams_ins = 2 [(.mam.xrule) = {
  if (this->iams_ins().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iams_ins().data(), static_cast<int>(this->_internal_iams_ins().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.SceneString.iams_ins");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_iams_ins(), target);
  }

  // string iams_nin = 3 [(.mam.xrule) = {
  if (this->iams_nin().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iams_nin().data(), static_cast<int>(this->_internal_iams_nin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.SceneString.iams_nin");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_iams_nin(), target);
  }

  // string iams_nins = 4 [(.mam.xrule) = {
  if (this->iams_nins().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iams_nins().data(), static_cast<int>(this->_internal_iams_nins().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.SceneString.iams_nins");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_iams_nins(), target);
  }

  // string iams_eq = 5 [(.mam.xrule) = {
  if (this->iams_eq().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iams_eq().data(), static_cast<int>(this->_internal_iams_eq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.SceneString.iams_eq");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_iams_eq(), target);
  }

  // string iams_eqs = 6 [(.mam.xrule) = {
  if (this->iams_eqs().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iams_eqs().data(), static_cast<int>(this->_internal_iams_eqs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.SceneString.iams_eqs");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_iams_eqs(), target);
  }

  // string iams_eqss = 7 [(.mam.xrule) = {
  if (this->iams_eqss().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iams_eqss().data(), static_cast<int>(this->_internal_iams_eqss().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.SceneString.iams_eqss");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_iams_eqss(), target);
  }

  // string iams_ne = 8 [(.mam.xrule) = {
  if (this->iams_ne().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iams_ne().data(), static_cast<int>(this->_internal_iams_ne().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.SceneString.iams_ne");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_iams_ne(), target);
  }

  // string iams_nes = 9 [(.mam.xrule) = {
  if (this->iams_nes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iams_nes().data(), static_cast<int>(this->_internal_iams_nes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.SceneString.iams_nes");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_iams_nes(), target);
  }

  // string iams_ness = 10 [(.mam.xrule) = {
  if (this->iams_ness().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iams_ness().data(), static_cast<int>(this->_internal_iams_ness().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.SceneString.iams_ness");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_iams_ness(), target);
  }

  // string iams_in_symbol = 11 [(.mam.xrule) = {
  if (this->iams_in_symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iams_in_symbol().data(), static_cast<int>(this->_internal_iams_in_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.SceneString.iams_in_symbol");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_iams_in_symbol(), target);
  }

  // string iams_nin_symbol = 12 [(.mam.xrule) = {
  if (this->iams_nin_symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iams_nin_symbol().data(), static_cast<int>(this->_internal_iams_nin_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.SceneString.iams_nin_symbol");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_iams_nin_symbol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.SceneString)
  return target;
}

size_t SceneString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.SceneString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string iams_in = 1 [(.mam.xrule) = {
  if (this->iams_in().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iams_in());
  }

  // string iams_ins = 2 [(.mam.xrule) = {
  if (this->iams_ins().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iams_ins());
  }

  // string iams_nin = 3 [(.mam.xrule) = {
  if (this->iams_nin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iams_nin());
  }

  // string iams_nins = 4 [(.mam.xrule) = {
  if (this->iams_nins().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iams_nins());
  }

  // string iams_eq = 5 [(.mam.xrule) = {
  if (this->iams_eq().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iams_eq());
  }

  // string iams_eqs = 6 [(.mam.xrule) = {
  if (this->iams_eqs().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iams_eqs());
  }

  // string iams_eqss = 7 [(.mam.xrule) = {
  if (this->iams_eqss().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iams_eqss());
  }

  // string iams_ne = 8 [(.mam.xrule) = {
  if (this->iams_ne().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iams_ne());
  }

  // string iams_nes = 9 [(.mam.xrule) = {
  if (this->iams_nes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iams_nes());
  }

  // string iams_ness = 10 [(.mam.xrule) = {
  if (this->iams_ness().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iams_ness());
  }

  // string iams_in_symbol = 11 [(.mam.xrule) = {
  if (this->iams_in_symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iams_in_symbol());
  }

  // string iams_nin_symbol = 12 [(.mam.xrule) = {
  if (this->iams_nin_symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iams_nin_symbol());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SceneString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.SceneString)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SceneString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.SceneString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.SceneString)
    MergeFrom(*source);
  }
}

void SceneString::MergeFrom(const SceneString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.SceneString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iams_in().size() > 0) {
    _internal_set_iams_in(from._internal_iams_in());
  }
  if (from.iams_ins().size() > 0) {
    _internal_set_iams_ins(from._internal_iams_ins());
  }
  if (from.iams_nin().size() > 0) {
    _internal_set_iams_nin(from._internal_iams_nin());
  }
  if (from.iams_nins().size() > 0) {
    _internal_set_iams_nins(from._internal_iams_nins());
  }
  if (from.iams_eq().size() > 0) {
    _internal_set_iams_eq(from._internal_iams_eq());
  }
  if (from.iams_eqs().size() > 0) {
    _internal_set_iams_eqs(from._internal_iams_eqs());
  }
  if (from.iams_eqss().size() > 0) {
    _internal_set_iams_eqss(from._internal_iams_eqss());
  }
  if (from.iams_ne().size() > 0) {
    _internal_set_iams_ne(from._internal_iams_ne());
  }
  if (from.iams_nes().size() > 0) {
    _internal_set_iams_nes(from._internal_iams_nes());
  }
  if (from.iams_ness().size() > 0) {
    _internal_set_iams_ness(from._internal_iams_ness());
  }
  if (from.iams_in_symbol().size() > 0) {
    _internal_set_iams_in_symbol(from._internal_iams_in_symbol());
  }
  if (from.iams_nin_symbol().size() > 0) {
    _internal_set_iams_nin_symbol(from._internal_iams_nin_symbol());
  }
}

void SceneString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.SceneString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneString::CopyFrom(const SceneString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.SceneString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneString::IsInitialized() const {
  return true;
}

void SceneString::InternalSwap(SceneString* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  iams_in_.Swap(&other->iams_in_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_ins_.Swap(&other->iams_ins_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_nin_.Swap(&other->iams_nin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_nins_.Swap(&other->iams_nins_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_eq_.Swap(&other->iams_eq_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_eqs_.Swap(&other->iams_eqs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_eqss_.Swap(&other->iams_eqss_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_ne_.Swap(&other->iams_ne_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_nes_.Swap(&other->iams_nes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_ness_.Swap(&other->iams_ness_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_in_symbol_.Swap(&other->iams_in_symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iams_nin_symbol_.Swap(&other->iams_nin_symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SceneInt::InitAsDefaultInstance() {
}
class SceneInt::_Internal {
 public:
};

SceneInt::SceneInt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.SceneInt)
}
SceneInt::SceneInt(const SceneInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iami_eq_, &from.iami_eq_,
    static_cast<size_t>(reinterpret_cast<char*>(&iami_ge_lt_zero_right_) -
    reinterpret_cast<char*>(&iami_eq_)) + sizeof(iami_ge_lt_zero_right_));
  // @@protoc_insertion_point(copy_constructor:mam.SceneInt)
}

void SceneInt::SharedCtor() {
  ::memset(&iami_eq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iami_ge_lt_zero_right_) -
      reinterpret_cast<char*>(&iami_eq_)) + sizeof(iami_ge_lt_zero_right_));
}

SceneInt::~SceneInt() {
  // @@protoc_insertion_point(destructor:mam.SceneInt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SceneInt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SceneInt::ArenaDtor(void* object) {
  SceneInt* _this = reinterpret_cast< SceneInt* >(object);
  (void)_this;
}
void SceneInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SceneInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SceneInt& SceneInt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SceneInt_fourteenth_2eproto.base);
  return *internal_default_instance();
}


void SceneInt::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.SceneInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iami_eq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iami_ge_lt_zero_right_) -
      reinterpret_cast<char*>(&iami_eq_)) + sizeof(iami_ge_lt_zero_right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 iami_eq = 1 [(.mam.xrule) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iami_eq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iami_ne = 2 [(.mam.xrule) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          iami_ne_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iami_gt = 3 [(.mam.xrule) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          iami_gt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iami_ge = 4 [(.mam.xrule) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          iami_ge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iami_lt = 5 [(.mam.xrule) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          iami_lt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iami_le = 6 [(.mam.xrule) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          iami_le_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iami_ge_lt = 7 [(.mam.xrule) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          iami_ge_lt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iami_eq_zero = 8 [(.mam.xrule) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          iami_eq_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iami_ne_zero = 9 [(.mam.xrule) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          iami_ne_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iami_gt_zero = 10 [(.mam.xrule) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          iami_gt_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iami_ge_zero = 11 [(.mam.xrule) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          iami_ge_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iami_lt_zero = 12 [(.mam.xrule) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          iami_lt_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iami_le_zero = 13 [(.mam.xrule) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          iami_le_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iami_ge_lt_zero_left = 14 [(.mam.xrule) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          iami_ge_lt_zero_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iami_ge_lt_zero_right = 15 [(.mam.xrule) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          iami_ge_lt_zero_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SceneInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.SceneInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iami_eq = 1 [(.mam.xrule) = {
  if (this->iami_eq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iami_eq(), target);
  }

  // int32 iami_ne = 2 [(.mam.xrule) = {
  if (this->iami_ne() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_iami_ne(), target);
  }

  // int32 iami_gt = 3 [(.mam.xrule) = {
  if (this->iami_gt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_iami_gt(), target);
  }

  // int32 iami_ge = 4 [(.mam.xrule) = {
  if (this->iami_ge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_iami_ge(), target);
  }

  // int32 iami_lt = 5 [(.mam.xrule) = {
  if (this->iami_lt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_iami_lt(), target);
  }

  // int32 iami_le = 6 [(.mam.xrule) = {
  if (this->iami_le() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_iami_le(), target);
  }

  // int32 iami_ge_lt = 7 [(.mam.xrule) = {
  if (this->iami_ge_lt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_iami_ge_lt(), target);
  }

  // int32 iami_eq_zero = 8 [(.mam.xrule) = {
  if (this->iami_eq_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_iami_eq_zero(), target);
  }

  // int32 iami_ne_zero = 9 [(.mam.xrule) = {
  if (this->iami_ne_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_iami_ne_zero(), target);
  }

  // int32 iami_gt_zero = 10 [(.mam.xrule) = {
  if (this->iami_gt_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_iami_gt_zero(), target);
  }

  // int32 iami_ge_zero = 11 [(.mam.xrule) = {
  if (this->iami_ge_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_iami_ge_zero(), target);
  }

  // int32 iami_lt_zero = 12 [(.mam.xrule) = {
  if (this->iami_lt_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_iami_lt_zero(), target);
  }

  // int32 iami_le_zero = 13 [(.mam.xrule) = {
  if (this->iami_le_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_iami_le_zero(), target);
  }

  // int32 iami_ge_lt_zero_left = 14 [(.mam.xrule) = {
  if (this->iami_ge_lt_zero_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_iami_ge_lt_zero_left(), target);
  }

  // int32 iami_ge_lt_zero_right = 15 [(.mam.xrule) = {
  if (this->iami_ge_lt_zero_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_iami_ge_lt_zero_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.SceneInt)
  return target;
}

size_t SceneInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.SceneInt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 iami_eq = 1 [(.mam.xrule) = {
  if (this->iami_eq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iami_eq());
  }

  // int32 iami_ne = 2 [(.mam.xrule) = {
  if (this->iami_ne() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iami_ne());
  }

  // int32 iami_gt = 3 [(.mam.xrule) = {
  if (this->iami_gt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iami_gt());
  }

  // int32 iami_ge = 4 [(.mam.xrule) = {
  if (this->iami_ge() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iami_ge());
  }

  // int32 iami_lt = 5 [(.mam.xrule) = {
  if (this->iami_lt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iami_lt());
  }

  // int32 iami_le = 6 [(.mam.xrule) = {
  if (this->iami_le() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iami_le());
  }

  // int32 iami_ge_lt = 7 [(.mam.xrule) = {
  if (this->iami_ge_lt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iami_ge_lt());
  }

  // int32 iami_eq_zero = 8 [(.mam.xrule) = {
  if (this->iami_eq_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iami_eq_zero());
  }

  // int32 iami_ne_zero = 9 [(.mam.xrule) = {
  if (this->iami_ne_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iami_ne_zero());
  }

  // int32 iami_gt_zero = 10 [(.mam.xrule) = {
  if (this->iami_gt_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iami_gt_zero());
  }

  // int32 iami_ge_zero = 11 [(.mam.xrule) = {
  if (this->iami_ge_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iami_ge_zero());
  }

  // int32 iami_lt_zero = 12 [(.mam.xrule) = {
  if (this->iami_lt_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iami_lt_zero());
  }

  // int32 iami_le_zero = 13 [(.mam.xrule) = {
  if (this->iami_le_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iami_le_zero());
  }

  // int32 iami_ge_lt_zero_left = 14 [(.mam.xrule) = {
  if (this->iami_ge_lt_zero_left() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iami_ge_lt_zero_left());
  }

  // int32 iami_ge_lt_zero_right = 15 [(.mam.xrule) = {
  if (this->iami_ge_lt_zero_right() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iami_ge_lt_zero_right());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SceneInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.SceneInt)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SceneInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.SceneInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.SceneInt)
    MergeFrom(*source);
  }
}

void SceneInt::MergeFrom(const SceneInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.SceneInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iami_eq() != 0) {
    _internal_set_iami_eq(from._internal_iami_eq());
  }
  if (from.iami_ne() != 0) {
    _internal_set_iami_ne(from._internal_iami_ne());
  }
  if (from.iami_gt() != 0) {
    _internal_set_iami_gt(from._internal_iami_gt());
  }
  if (from.iami_ge() != 0) {
    _internal_set_iami_ge(from._internal_iami_ge());
  }
  if (from.iami_lt() != 0) {
    _internal_set_iami_lt(from._internal_iami_lt());
  }
  if (from.iami_le() != 0) {
    _internal_set_iami_le(from._internal_iami_le());
  }
  if (from.iami_ge_lt() != 0) {
    _internal_set_iami_ge_lt(from._internal_iami_ge_lt());
  }
  if (from.iami_eq_zero() != 0) {
    _internal_set_iami_eq_zero(from._internal_iami_eq_zero());
  }
  if (from.iami_ne_zero() != 0) {
    _internal_set_iami_ne_zero(from._internal_iami_ne_zero());
  }
  if (from.iami_gt_zero() != 0) {
    _internal_set_iami_gt_zero(from._internal_iami_gt_zero());
  }
  if (from.iami_ge_zero() != 0) {
    _internal_set_iami_ge_zero(from._internal_iami_ge_zero());
  }
  if (from.iami_lt_zero() != 0) {
    _internal_set_iami_lt_zero(from._internal_iami_lt_zero());
  }
  if (from.iami_le_zero() != 0) {
    _internal_set_iami_le_zero(from._internal_iami_le_zero());
  }
  if (from.iami_ge_lt_zero_left() != 0) {
    _internal_set_iami_ge_lt_zero_left(from._internal_iami_ge_lt_zero_left());
  }
  if (from.iami_ge_lt_zero_right() != 0) {
    _internal_set_iami_ge_lt_zero_right(from._internal_iami_ge_lt_zero_right());
  }
}

void SceneInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.SceneInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneInt::CopyFrom(const SceneInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.SceneInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneInt::IsInitialized() const {
  return true;
}

void SceneInt::InternalSwap(SceneInt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneInt, iami_ge_lt_zero_right_)
      + sizeof(SceneInt::iami_ge_lt_zero_right_)
      - PROTOBUF_FIELD_OFFSET(SceneInt, iami_eq_)>(
          reinterpret_cast<char*>(&iami_eq_),
          reinterpret_cast<char*>(&other->iami_eq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneInt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SceneUInt::InitAsDefaultInstance() {
}
class SceneUInt::_Internal {
 public:
};

SceneUInt::SceneUInt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.SceneUInt)
}
SceneUInt::SceneUInt(const SceneUInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iamui_eq_, &from.iamui_eq_,
    static_cast<size_t>(reinterpret_cast<char*>(&iamui_ge_lt_zero_left_) -
    reinterpret_cast<char*>(&iamui_eq_)) + sizeof(iamui_ge_lt_zero_left_));
  // @@protoc_insertion_point(copy_constructor:mam.SceneUInt)
}

void SceneUInt::SharedCtor() {
  ::memset(&iamui_eq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iamui_ge_lt_zero_left_) -
      reinterpret_cast<char*>(&iamui_eq_)) + sizeof(iamui_ge_lt_zero_left_));
}

SceneUInt::~SceneUInt() {
  // @@protoc_insertion_point(destructor:mam.SceneUInt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SceneUInt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SceneUInt::ArenaDtor(void* object) {
  SceneUInt* _this = reinterpret_cast< SceneUInt* >(object);
  (void)_this;
}
void SceneUInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SceneUInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SceneUInt& SceneUInt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SceneUInt_fourteenth_2eproto.base);
  return *internal_default_instance();
}


void SceneUInt::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.SceneUInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iamui_eq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iamui_ge_lt_zero_left_) -
      reinterpret_cast<char*>(&iamui_eq_)) + sizeof(iamui_ge_lt_zero_left_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneUInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 iamui_eq = 1 [(.mam.xrule) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iamui_eq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iamui_ne = 2 [(.mam.xrule) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          iamui_ne_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iamui_gt = 3 [(.mam.xrule) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          iamui_gt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iamui_ge = 4 [(.mam.xrule) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          iamui_ge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iamui_lt = 5 [(.mam.xrule) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          iamui_lt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iamui_le = 6 [(.mam.xrule) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          iamui_le_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iamui_ge_lt = 7 [(.mam.xrule) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          iamui_ge_lt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iamui_eq_zero = 8 [(.mam.xrule) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          iamui_eq_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iamui_ne_zero = 9 [(.mam.xrule) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          iamui_ne_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iamui_gt_zero = 10 [(.mam.xrule) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          iamui_gt_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iamui_ge_zero = 11 [(.mam.xrule) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          iamui_ge_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iamui_le_zero = 12 [(.mam.xrule) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          iamui_le_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iamui_ge_lt_zero_left = 13 [(.mam.xrule) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          iamui_ge_lt_zero_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SceneUInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.SceneUInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 iamui_eq = 1 [(.mam.xrule) = {
  if (this->iamui_eq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_iamui_eq(), target);
  }

  // uint32 iamui_ne = 2 [(.mam.xrule) = {
  if (this->iamui_ne() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_iamui_ne(), target);
  }

  // uint32 iamui_gt = 3 [(.mam.xrule) = {
  if (this->iamui_gt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_iamui_gt(), target);
  }

  // uint32 iamui_ge = 4 [(.mam.xrule) = {
  if (this->iamui_ge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_iamui_ge(), target);
  }

  // uint32 iamui_lt = 5 [(.mam.xrule) = {
  if (this->iamui_lt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_iamui_lt(), target);
  }

  // uint32 iamui_le = 6 [(.mam.xrule) = {
  if (this->iamui_le() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_iamui_le(), target);
  }

  // uint32 iamui_ge_lt = 7 [(.mam.xrule) = {
  if (this->iamui_ge_lt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_iamui_ge_lt(), target);
  }

  // uint32 iamui_eq_zero = 8 [(.mam.xrule) = {
  if (this->iamui_eq_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_iamui_eq_zero(), target);
  }

  // uint32 iamui_ne_zero = 9 [(.mam.xrule) = {
  if (this->iamui_ne_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_iamui_ne_zero(), target);
  }

  // uint32 iamui_gt_zero = 10 [(.mam.xrule) = {
  if (this->iamui_gt_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_iamui_gt_zero(), target);
  }

  // uint32 iamui_ge_zero = 11 [(.mam.xrule) = {
  if (this->iamui_ge_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_iamui_ge_zero(), target);
  }

  // uint32 iamui_le_zero = 12 [(.mam.xrule) = {
  if (this->iamui_le_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_iamui_le_zero(), target);
  }

  // uint32 iamui_ge_lt_zero_left = 13 [(.mam.xrule) = {
  if (this->iamui_ge_lt_zero_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_iamui_ge_lt_zero_left(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.SceneUInt)
  return target;
}

size_t SceneUInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.SceneUInt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 iamui_eq = 1 [(.mam.xrule) = {
  if (this->iamui_eq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iamui_eq());
  }

  // uint32 iamui_ne = 2 [(.mam.xrule) = {
  if (this->iamui_ne() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iamui_ne());
  }

  // uint32 iamui_gt = 3 [(.mam.xrule) = {
  if (this->iamui_gt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iamui_gt());
  }

  // uint32 iamui_ge = 4 [(.mam.xrule) = {
  if (this->iamui_ge() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iamui_ge());
  }

  // uint32 iamui_lt = 5 [(.mam.xrule) = {
  if (this->iamui_lt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iamui_lt());
  }

  // uint32 iamui_le = 6 [(.mam.xrule) = {
  if (this->iamui_le() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iamui_le());
  }

  // uint32 iamui_ge_lt = 7 [(.mam.xrule) = {
  if (this->iamui_ge_lt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iamui_ge_lt());
  }

  // uint32 iamui_eq_zero = 8 [(.mam.xrule) = {
  if (this->iamui_eq_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iamui_eq_zero());
  }

  // uint32 iamui_ne_zero = 9 [(.mam.xrule) = {
  if (this->iamui_ne_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iamui_ne_zero());
  }

  // uint32 iamui_gt_zero = 10 [(.mam.xrule) = {
  if (this->iamui_gt_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iamui_gt_zero());
  }

  // uint32 iamui_ge_zero = 11 [(.mam.xrule) = {
  if (this->iamui_ge_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iamui_ge_zero());
  }

  // uint32 iamui_le_zero = 12 [(.mam.xrule) = {
  if (this->iamui_le_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iamui_le_zero());
  }

  // uint32 iamui_ge_lt_zero_left = 13 [(.mam.xrule) = {
  if (this->iamui_ge_lt_zero_left() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iamui_ge_lt_zero_left());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SceneUInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.SceneUInt)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneUInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SceneUInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.SceneUInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.SceneUInt)
    MergeFrom(*source);
  }
}

void SceneUInt::MergeFrom(const SceneUInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.SceneUInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iamui_eq() != 0) {
    _internal_set_iamui_eq(from._internal_iamui_eq());
  }
  if (from.iamui_ne() != 0) {
    _internal_set_iamui_ne(from._internal_iamui_ne());
  }
  if (from.iamui_gt() != 0) {
    _internal_set_iamui_gt(from._internal_iamui_gt());
  }
  if (from.iamui_ge() != 0) {
    _internal_set_iamui_ge(from._internal_iamui_ge());
  }
  if (from.iamui_lt() != 0) {
    _internal_set_iamui_lt(from._internal_iamui_lt());
  }
  if (from.iamui_le() != 0) {
    _internal_set_iamui_le(from._internal_iamui_le());
  }
  if (from.iamui_ge_lt() != 0) {
    _internal_set_iamui_ge_lt(from._internal_iamui_ge_lt());
  }
  if (from.iamui_eq_zero() != 0) {
    _internal_set_iamui_eq_zero(from._internal_iamui_eq_zero());
  }
  if (from.iamui_ne_zero() != 0) {
    _internal_set_iamui_ne_zero(from._internal_iamui_ne_zero());
  }
  if (from.iamui_gt_zero() != 0) {
    _internal_set_iamui_gt_zero(from._internal_iamui_gt_zero());
  }
  if (from.iamui_ge_zero() != 0) {
    _internal_set_iamui_ge_zero(from._internal_iamui_ge_zero());
  }
  if (from.iamui_le_zero() != 0) {
    _internal_set_iamui_le_zero(from._internal_iamui_le_zero());
  }
  if (from.iamui_ge_lt_zero_left() != 0) {
    _internal_set_iamui_ge_lt_zero_left(from._internal_iamui_ge_lt_zero_left());
  }
}

void SceneUInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.SceneUInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneUInt::CopyFrom(const SceneUInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.SceneUInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneUInt::IsInitialized() const {
  return true;
}

void SceneUInt::InternalSwap(SceneUInt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneUInt, iamui_ge_lt_zero_left_)
      + sizeof(SceneUInt::iamui_ge_lt_zero_left_)
      - PROTOBUF_FIELD_OFFSET(SceneUInt, iamui_eq_)>(
          reinterpret_cast<char*>(&iamui_eq_),
          reinterpret_cast<char*>(&other->iamui_eq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneUInt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SceneLong::InitAsDefaultInstance() {
}
class SceneLong::_Internal {
 public:
};

SceneLong::SceneLong(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.SceneLong)
}
SceneLong::SceneLong(const SceneLong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iaml_eq_, &from.iaml_eq_,
    static_cast<size_t>(reinterpret_cast<char*>(&iaml_ge_lt_zero_right_) -
    reinterpret_cast<char*>(&iaml_eq_)) + sizeof(iaml_ge_lt_zero_right_));
  // @@protoc_insertion_point(copy_constructor:mam.SceneLong)
}

void SceneLong::SharedCtor() {
  ::memset(&iaml_eq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iaml_ge_lt_zero_right_) -
      reinterpret_cast<char*>(&iaml_eq_)) + sizeof(iaml_ge_lt_zero_right_));
}

SceneLong::~SceneLong() {
  // @@protoc_insertion_point(destructor:mam.SceneLong)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SceneLong::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SceneLong::ArenaDtor(void* object) {
  SceneLong* _this = reinterpret_cast< SceneLong* >(object);
  (void)_this;
}
void SceneLong::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SceneLong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SceneLong& SceneLong::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SceneLong_fourteenth_2eproto.base);
  return *internal_default_instance();
}


void SceneLong::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.SceneLong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iaml_eq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iaml_ge_lt_zero_right_) -
      reinterpret_cast<char*>(&iaml_eq_)) + sizeof(iaml_ge_lt_zero_right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneLong::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 iaml_eq = 1 [(.mam.xrule) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iaml_eq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 iaml_ne = 2 [(.mam.xrule) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          iaml_ne_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 iaml_gt = 3 [(.mam.xrule) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          iaml_gt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 iaml_ge = 4 [(.mam.xrule) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          iaml_ge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 iaml_lt = 5 [(.mam.xrule) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          iaml_lt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 iaml_le = 6 [(.mam.xrule) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          iaml_le_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 iaml_ge_lt = 7 [(.mam.xrule) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          iaml_ge_lt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 iaml_eq_zero = 8 [(.mam.xrule) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          iaml_eq_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 iaml_ne_zero = 9 [(.mam.xrule) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          iaml_ne_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 iaml_gt_zero = 10 [(.mam.xrule) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          iaml_gt_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 iaml_ge_zero = 11 [(.mam.xrule) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          iaml_ge_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 iaml_lt_zero = 12 [(.mam.xrule) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          iaml_lt_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 iaml_le_zero = 13 [(.mam.xrule) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          iaml_le_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 iaml_ge_lt_zero_left = 14 [(.mam.xrule) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          iaml_ge_lt_zero_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 iaml_ge_lt_zero_right = 15 [(.mam.xrule) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          iaml_ge_lt_zero_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SceneLong::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.SceneLong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 iaml_eq = 1 [(.mam.xrule) = {
  if (this->iaml_eq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_iaml_eq(), target);
  }

  // int64 iaml_ne = 2 [(.mam.xrule) = {
  if (this->iaml_ne() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_iaml_ne(), target);
  }

  // int64 iaml_gt = 3 [(.mam.xrule) = {
  if (this->iaml_gt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_iaml_gt(), target);
  }

  // int64 iaml_ge = 4 [(.mam.xrule) = {
  if (this->iaml_ge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_iaml_ge(), target);
  }

  // int64 iaml_lt = 5 [(.mam.xrule) = {
  if (this->iaml_lt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_iaml_lt(), target);
  }

  // int64 iaml_le = 6 [(.mam.xrule) = {
  if (this->iaml_le() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_iaml_le(), target);
  }

  // int64 iaml_ge_lt = 7 [(.mam.xrule) = {
  if (this->iaml_ge_lt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_iaml_ge_lt(), target);
  }

  // int64 iaml_eq_zero = 8 [(.mam.xrule) = {
  if (this->iaml_eq_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_iaml_eq_zero(), target);
  }

  // int64 iaml_ne_zero = 9 [(.mam.xrule) = {
  if (this->iaml_ne_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_iaml_ne_zero(), target);
  }

  // int64 iaml_gt_zero = 10 [(.mam.xrule) = {
  if (this->iaml_gt_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_iaml_gt_zero(), target);
  }

  // int64 iaml_ge_zero = 11 [(.mam.xrule) = {
  if (this->iaml_ge_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_iaml_ge_zero(), target);
  }

  // int64 iaml_lt_zero = 12 [(.mam.xrule) = {
  if (this->iaml_lt_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_iaml_lt_zero(), target);
  }

  // int64 iaml_le_zero = 13 [(.mam.xrule) = {
  if (this->iaml_le_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_iaml_le_zero(), target);
  }

  // int64 iaml_ge_lt_zero_left = 14 [(.mam.xrule) = {
  if (this->iaml_ge_lt_zero_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_iaml_ge_lt_zero_left(), target);
  }

  // int64 iaml_ge_lt_zero_right = 15 [(.mam.xrule) = {
  if (this->iaml_ge_lt_zero_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_iaml_ge_lt_zero_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.SceneLong)
  return target;
}

size_t SceneLong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.SceneLong)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 iaml_eq = 1 [(.mam.xrule) = {
  if (this->iaml_eq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_iaml_eq());
  }

  // int64 iaml_ne = 2 [(.mam.xrule) = {
  if (this->iaml_ne() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_iaml_ne());
  }

  // int64 iaml_gt = 3 [(.mam.xrule) = {
  if (this->iaml_gt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_iaml_gt());
  }

  // int64 iaml_ge = 4 [(.mam.xrule) = {
  if (this->iaml_ge() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_iaml_ge());
  }

  // int64 iaml_lt = 5 [(.mam.xrule) = {
  if (this->iaml_lt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_iaml_lt());
  }

  // int64 iaml_le = 6 [(.mam.xrule) = {
  if (this->iaml_le() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_iaml_le());
  }

  // int64 iaml_ge_lt = 7 [(.mam.xrule) = {
  if (this->iaml_ge_lt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_iaml_ge_lt());
  }

  // int64 iaml_eq_zero = 8 [(.mam.xrule) = {
  if (this->iaml_eq_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_iaml_eq_zero());
  }

  // int64 iaml_ne_zero = 9 [(.mam.xrule) = {
  if (this->iaml_ne_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_iaml_ne_zero());
  }

  // int64 iaml_gt_zero = 10 [(.mam.xrule) = {
  if (this->iaml_gt_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_iaml_gt_zero());
  }

  // int64 iaml_ge_zero = 11 [(.mam.xrule) = {
  if (this->iaml_ge_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_iaml_ge_zero());
  }

  // int64 iaml_lt_zero = 12 [(.mam.xrule) = {
  if (this->iaml_lt_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_iaml_lt_zero());
  }

  // int64 iaml_le_zero = 13 [(.mam.xrule) = {
  if (this->iaml_le_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_iaml_le_zero());
  }

  // int64 iaml_ge_lt_zero_left = 14 [(.mam.xrule) = {
  if (this->iaml_ge_lt_zero_left() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_iaml_ge_lt_zero_left());
  }

  // int64 iaml_ge_lt_zero_right = 15 [(.mam.xrule) = {
  if (this->iaml_ge_lt_zero_right() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_iaml_ge_lt_zero_right());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SceneLong::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.SceneLong)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneLong* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SceneLong>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.SceneLong)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.SceneLong)
    MergeFrom(*source);
  }
}

void SceneLong::MergeFrom(const SceneLong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.SceneLong)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iaml_eq() != 0) {
    _internal_set_iaml_eq(from._internal_iaml_eq());
  }
  if (from.iaml_ne() != 0) {
    _internal_set_iaml_ne(from._internal_iaml_ne());
  }
  if (from.iaml_gt() != 0) {
    _internal_set_iaml_gt(from._internal_iaml_gt());
  }
  if (from.iaml_ge() != 0) {
    _internal_set_iaml_ge(from._internal_iaml_ge());
  }
  if (from.iaml_lt() != 0) {
    _internal_set_iaml_lt(from._internal_iaml_lt());
  }
  if (from.iaml_le() != 0) {
    _internal_set_iaml_le(from._internal_iaml_le());
  }
  if (from.iaml_ge_lt() != 0) {
    _internal_set_iaml_ge_lt(from._internal_iaml_ge_lt());
  }
  if (from.iaml_eq_zero() != 0) {
    _internal_set_iaml_eq_zero(from._internal_iaml_eq_zero());
  }
  if (from.iaml_ne_zero() != 0) {
    _internal_set_iaml_ne_zero(from._internal_iaml_ne_zero());
  }
  if (from.iaml_gt_zero() != 0) {
    _internal_set_iaml_gt_zero(from._internal_iaml_gt_zero());
  }
  if (from.iaml_ge_zero() != 0) {
    _internal_set_iaml_ge_zero(from._internal_iaml_ge_zero());
  }
  if (from.iaml_lt_zero() != 0) {
    _internal_set_iaml_lt_zero(from._internal_iaml_lt_zero());
  }
  if (from.iaml_le_zero() != 0) {
    _internal_set_iaml_le_zero(from._internal_iaml_le_zero());
  }
  if (from.iaml_ge_lt_zero_left() != 0) {
    _internal_set_iaml_ge_lt_zero_left(from._internal_iaml_ge_lt_zero_left());
  }
  if (from.iaml_ge_lt_zero_right() != 0) {
    _internal_set_iaml_ge_lt_zero_right(from._internal_iaml_ge_lt_zero_right());
  }
}

void SceneLong::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.SceneLong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneLong::CopyFrom(const SceneLong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.SceneLong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneLong::IsInitialized() const {
  return true;
}

void SceneLong::InternalSwap(SceneLong* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneLong, iaml_ge_lt_zero_right_)
      + sizeof(SceneLong::iaml_ge_lt_zero_right_)
      - PROTOBUF_FIELD_OFFSET(SceneLong, iaml_eq_)>(
          reinterpret_cast<char*>(&iaml_eq_),
          reinterpret_cast<char*>(&other->iaml_eq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneLong::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SceneULong::InitAsDefaultInstance() {
}
class SceneULong::_Internal {
 public:
};

SceneULong::SceneULong(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.SceneULong)
}
SceneULong::SceneULong(const SceneULong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iamul_eq_, &from.iamul_eq_,
    static_cast<size_t>(reinterpret_cast<char*>(&iamul_ge_lt_zero_left_) -
    reinterpret_cast<char*>(&iamul_eq_)) + sizeof(iamul_ge_lt_zero_left_));
  // @@protoc_insertion_point(copy_constructor:mam.SceneULong)
}

void SceneULong::SharedCtor() {
  ::memset(&iamul_eq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iamul_ge_lt_zero_left_) -
      reinterpret_cast<char*>(&iamul_eq_)) + sizeof(iamul_ge_lt_zero_left_));
}

SceneULong::~SceneULong() {
  // @@protoc_insertion_point(destructor:mam.SceneULong)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SceneULong::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SceneULong::ArenaDtor(void* object) {
  SceneULong* _this = reinterpret_cast< SceneULong* >(object);
  (void)_this;
}
void SceneULong::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SceneULong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SceneULong& SceneULong::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SceneULong_fourteenth_2eproto.base);
  return *internal_default_instance();
}


void SceneULong::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.SceneULong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iamul_eq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iamul_ge_lt_zero_left_) -
      reinterpret_cast<char*>(&iamul_eq_)) + sizeof(iamul_ge_lt_zero_left_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneULong::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 iamul_eq = 1 [(.mam.xrule) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iamul_eq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 iamul_ne = 2 [(.mam.xrule) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          iamul_ne_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 iamul_gt = 3 [(.mam.xrule) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          iamul_gt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 iamul_ge = 4 [(.mam.xrule) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          iamul_ge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 iamul_lt = 5 [(.mam.xrule) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          iamul_lt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 iamul_le = 6 [(.mam.xrule) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          iamul_le_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 iamul_ge_lt = 7 [(.mam.xrule) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          iamul_ge_lt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 iamul_eq_zero = 8 [(.mam.xrule) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          iamul_eq_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 iamul_ne_zero = 9 [(.mam.xrule) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          iamul_ne_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 iamul_gt_zero = 10 [(.mam.xrule) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          iamul_gt_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 iamul_ge_zero = 11 [(.mam.xrule) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          iamul_ge_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 iamul_le_zero = 12 [(.mam.xrule) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          iamul_le_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 iamul_ge_lt_zero_left = 13 [(.mam.xrule) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          iamul_ge_lt_zero_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SceneULong::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.SceneULong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 iamul_eq = 1 [(.mam.xrule) = {
  if (this->iamul_eq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_iamul_eq(), target);
  }

  // uint64 iamul_ne = 2 [(.mam.xrule) = {
  if (this->iamul_ne() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_iamul_ne(), target);
  }

  // uint64 iamul_gt = 3 [(.mam.xrule) = {
  if (this->iamul_gt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_iamul_gt(), target);
  }

  // uint64 iamul_ge = 4 [(.mam.xrule) = {
  if (this->iamul_ge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_iamul_ge(), target);
  }

  // uint64 iamul_lt = 5 [(.mam.xrule) = {
  if (this->iamul_lt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_iamul_lt(), target);
  }

  // uint64 iamul_le = 6 [(.mam.xrule) = {
  if (this->iamul_le() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_iamul_le(), target);
  }

  // uint64 iamul_ge_lt = 7 [(.mam.xrule) = {
  if (this->iamul_ge_lt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_iamul_ge_lt(), target);
  }

  // uint64 iamul_eq_zero = 8 [(.mam.xrule) = {
  if (this->iamul_eq_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_iamul_eq_zero(), target);
  }

  // uint64 iamul_ne_zero = 9 [(.mam.xrule) = {
  if (this->iamul_ne_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_iamul_ne_zero(), target);
  }

  // uint64 iamul_gt_zero = 10 [(.mam.xrule) = {
  if (this->iamul_gt_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_iamul_gt_zero(), target);
  }

  // uint64 iamul_ge_zero = 11 [(.mam.xrule) = {
  if (this->iamul_ge_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_iamul_ge_zero(), target);
  }

  // uint64 iamul_le_zero = 12 [(.mam.xrule) = {
  if (this->iamul_le_zero() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_iamul_le_zero(), target);
  }

  // uint64 iamul_ge_lt_zero_left = 13 [(.mam.xrule) = {
  if (this->iamul_ge_lt_zero_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_iamul_ge_lt_zero_left(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.SceneULong)
  return target;
}

size_t SceneULong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.SceneULong)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 iamul_eq = 1 [(.mam.xrule) = {
  if (this->iamul_eq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_iamul_eq());
  }

  // uint64 iamul_ne = 2 [(.mam.xrule) = {
  if (this->iamul_ne() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_iamul_ne());
  }

  // uint64 iamul_gt = 3 [(.mam.xrule) = {
  if (this->iamul_gt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_iamul_gt());
  }

  // uint64 iamul_ge = 4 [(.mam.xrule) = {
  if (this->iamul_ge() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_iamul_ge());
  }

  // uint64 iamul_lt = 5 [(.mam.xrule) = {
  if (this->iamul_lt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_iamul_lt());
  }

  // uint64 iamul_le = 6 [(.mam.xrule) = {
  if (this->iamul_le() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_iamul_le());
  }

  // uint64 iamul_ge_lt = 7 [(.mam.xrule) = {
  if (this->iamul_ge_lt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_iamul_ge_lt());
  }

  // uint64 iamul_eq_zero = 8 [(.mam.xrule) = {
  if (this->iamul_eq_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_iamul_eq_zero());
  }

  // uint64 iamul_ne_zero = 9 [(.mam.xrule) = {
  if (this->iamul_ne_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_iamul_ne_zero());
  }

  // uint64 iamul_gt_zero = 10 [(.mam.xrule) = {
  if (this->iamul_gt_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_iamul_gt_zero());
  }

  // uint64 iamul_ge_zero = 11 [(.mam.xrule) = {
  if (this->iamul_ge_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_iamul_ge_zero());
  }

  // uint64 iamul_le_zero = 12 [(.mam.xrule) = {
  if (this->iamul_le_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_iamul_le_zero());
  }

  // uint64 iamul_ge_lt_zero_left = 13 [(.mam.xrule) = {
  if (this->iamul_ge_lt_zero_left() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_iamul_ge_lt_zero_left());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SceneULong::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.SceneULong)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneULong* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SceneULong>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.SceneULong)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.SceneULong)
    MergeFrom(*source);
  }
}

void SceneULong::MergeFrom(const SceneULong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.SceneULong)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iamul_eq() != 0) {
    _internal_set_iamul_eq(from._internal_iamul_eq());
  }
  if (from.iamul_ne() != 0) {
    _internal_set_iamul_ne(from._internal_iamul_ne());
  }
  if (from.iamul_gt() != 0) {
    _internal_set_iamul_gt(from._internal_iamul_gt());
  }
  if (from.iamul_ge() != 0) {
    _internal_set_iamul_ge(from._internal_iamul_ge());
  }
  if (from.iamul_lt() != 0) {
    _internal_set_iamul_lt(from._internal_iamul_lt());
  }
  if (from.iamul_le() != 0) {
    _internal_set_iamul_le(from._internal_iamul_le());
  }
  if (from.iamul_ge_lt() != 0) {
    _internal_set_iamul_ge_lt(from._internal_iamul_ge_lt());
  }
  if (from.iamul_eq_zero() != 0) {
    _internal_set_iamul_eq_zero(from._internal_iamul_eq_zero());
  }
  if (from.iamul_ne_zero() != 0) {
    _internal_set_iamul_ne_zero(from._internal_iamul_ne_zero());
  }
  if (from.iamul_gt_zero() != 0) {
    _internal_set_iamul_gt_zero(from._internal_iamul_gt_zero());
  }
  if (from.iamul_ge_zero() != 0) {
    _internal_set_iamul_ge_zero(from._internal_iamul_ge_zero());
  }
  if (from.iamul_le_zero() != 0) {
    _internal_set_iamul_le_zero(from._internal_iamul_le_zero());
  }
  if (from.iamul_ge_lt_zero_left() != 0) {
    _internal_set_iamul_ge_lt_zero_left(from._internal_iamul_ge_lt_zero_left());
  }
}

void SceneULong::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.SceneULong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneULong::CopyFrom(const SceneULong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.SceneULong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneULong::IsInitialized() const {
  return true;
}

void SceneULong::InternalSwap(SceneULong* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneULong, iamul_ge_lt_zero_left_)
      + sizeof(SceneULong::iamul_ge_lt_zero_left_)
      - PROTOBUF_FIELD_OFFSET(SceneULong, iamul_eq_)>(
          reinterpret_cast<char*>(&iamul_eq_),
          reinterpret_cast<char*>(&other->iamul_eq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneULong::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SceneFloat::InitAsDefaultInstance() {
}
class SceneFloat::_Internal {
 public:
};

SceneFloat::SceneFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.SceneFloat)
}
SceneFloat::SceneFloat(const SceneFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iamf_eq_, &from.iamf_eq_,
    static_cast<size_t>(reinterpret_cast<char*>(&iamf_ge_lt_zero_right_) -
    reinterpret_cast<char*>(&iamf_eq_)) + sizeof(iamf_ge_lt_zero_right_));
  // @@protoc_insertion_point(copy_constructor:mam.SceneFloat)
}

void SceneFloat::SharedCtor() {
  ::memset(&iamf_eq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iamf_ge_lt_zero_right_) -
      reinterpret_cast<char*>(&iamf_eq_)) + sizeof(iamf_ge_lt_zero_right_));
}

SceneFloat::~SceneFloat() {
  // @@protoc_insertion_point(destructor:mam.SceneFloat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SceneFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SceneFloat::ArenaDtor(void* object) {
  SceneFloat* _this = reinterpret_cast< SceneFloat* >(object);
  (void)_this;
}
void SceneFloat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SceneFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SceneFloat& SceneFloat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SceneFloat_fourteenth_2eproto.base);
  return *internal_default_instance();
}


void SceneFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.SceneFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iamf_eq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iamf_ge_lt_zero_right_) -
      reinterpret_cast<char*>(&iamf_eq_)) + sizeof(iamf_ge_lt_zero_right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneFloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float iamf_eq = 1 [(.mam.xrule) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          iamf_eq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float iamf_ne = 2 [(.mam.xrule) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          iamf_ne_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float iamf_gt = 3 [(.mam.xrule) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          iamf_gt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float iamf_ge = 4 [(.mam.xrule) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          iamf_ge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float iamf_lt = 5 [(.mam.xrule) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          iamf_lt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float iamf_le = 6 [(.mam.xrule) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          iamf_le_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float iamf_ge_lt = 7 [(.mam.xrule) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          iamf_ge_lt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float iamf_eq_zero = 8 [(.mam.xrule) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          iamf_eq_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float iamf_ne_zero = 9 [(.mam.xrule) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          iamf_ne_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float iamf_gt_zero = 10 [(.mam.xrule) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          iamf_gt_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float iamf_ge_zero = 11 [(.mam.xrule) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          iamf_ge_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float iamf_lt_zero = 12 [(.mam.xrule) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          iamf_lt_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float iamf_le_zero = 13 [(.mam.xrule) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          iamf_le_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float iamf_ge_lt_zero_left = 14 [(.mam.xrule) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          iamf_ge_lt_zero_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float iamf_ge_lt_zero_right = 15 [(.mam.xrule) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          iamf_ge_lt_zero_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SceneFloat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.SceneFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float iamf_eq = 1 [(.mam.xrule) = {
  if (!(this->iamf_eq() <= 0 && this->iamf_eq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_iamf_eq(), target);
  }

  // float iamf_ne = 2 [(.mam.xrule) = {
  if (!(this->iamf_ne() <= 0 && this->iamf_ne() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_iamf_ne(), target);
  }

  // float iamf_gt = 3 [(.mam.xrule) = {
  if (!(this->iamf_gt() <= 0 && this->iamf_gt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_iamf_gt(), target);
  }

  // float iamf_ge = 4 [(.mam.xrule) = {
  if (!(this->iamf_ge() <= 0 && this->iamf_ge() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_iamf_ge(), target);
  }

  // float iamf_lt = 5 [(.mam.xrule) = {
  if (!(this->iamf_lt() <= 0 && this->iamf_lt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_iamf_lt(), target);
  }

  // float iamf_le = 6 [(.mam.xrule) = {
  if (!(this->iamf_le() <= 0 && this->iamf_le() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_iamf_le(), target);
  }

  // float iamf_ge_lt = 7 [(.mam.xrule) = {
  if (!(this->iamf_ge_lt() <= 0 && this->iamf_ge_lt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_iamf_ge_lt(), target);
  }

  // float iamf_eq_zero = 8 [(.mam.xrule) = {
  if (!(this->iamf_eq_zero() <= 0 && this->iamf_eq_zero() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_iamf_eq_zero(), target);
  }

  // float iamf_ne_zero = 9 [(.mam.xrule) = {
  if (!(this->iamf_ne_zero() <= 0 && this->iamf_ne_zero() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_iamf_ne_zero(), target);
  }

  // float iamf_gt_zero = 10 [(.mam.xrule) = {
  if (!(this->iamf_gt_zero() <= 0 && this->iamf_gt_zero() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_iamf_gt_zero(), target);
  }

  // float iamf_ge_zero = 11 [(.mam.xrule) = {
  if (!(this->iamf_ge_zero() <= 0 && this->iamf_ge_zero() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_iamf_ge_zero(), target);
  }

  // float iamf_lt_zero = 12 [(.mam.xrule) = {
  if (!(this->iamf_lt_zero() <= 0 && this->iamf_lt_zero() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_iamf_lt_zero(), target);
  }

  // float iamf_le_zero = 13 [(.mam.xrule) = {
  if (!(this->iamf_le_zero() <= 0 && this->iamf_le_zero() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_iamf_le_zero(), target);
  }

  // float iamf_ge_lt_zero_left = 14 [(.mam.xrule) = {
  if (!(this->iamf_ge_lt_zero_left() <= 0 && this->iamf_ge_lt_zero_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_iamf_ge_lt_zero_left(), target);
  }

  // float iamf_ge_lt_zero_right = 15 [(.mam.xrule) = {
  if (!(this->iamf_ge_lt_zero_right() <= 0 && this->iamf_ge_lt_zero_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_iamf_ge_lt_zero_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.SceneFloat)
  return target;
}

size_t SceneFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.SceneFloat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float iamf_eq = 1 [(.mam.xrule) = {
  if (!(this->iamf_eq() <= 0 && this->iamf_eq() >= 0)) {
    total_size += 1 + 4;
  }

  // float iamf_ne = 2 [(.mam.xrule) = {
  if (!(this->iamf_ne() <= 0 && this->iamf_ne() >= 0)) {
    total_size += 1 + 4;
  }

  // float iamf_gt = 3 [(.mam.xrule) = {
  if (!(this->iamf_gt() <= 0 && this->iamf_gt() >= 0)) {
    total_size += 1 + 4;
  }

  // float iamf_ge = 4 [(.mam.xrule) = {
  if (!(this->iamf_ge() <= 0 && this->iamf_ge() >= 0)) {
    total_size += 1 + 4;
  }

  // float iamf_lt = 5 [(.mam.xrule) = {
  if (!(this->iamf_lt() <= 0 && this->iamf_lt() >= 0)) {
    total_size += 1 + 4;
  }

  // float iamf_le = 6 [(.mam.xrule) = {
  if (!(this->iamf_le() <= 0 && this->iamf_le() >= 0)) {
    total_size += 1 + 4;
  }

  // float iamf_ge_lt = 7 [(.mam.xrule) = {
  if (!(this->iamf_ge_lt() <= 0 && this->iamf_ge_lt() >= 0)) {
    total_size += 1 + 4;
  }

  // float iamf_eq_zero = 8 [(.mam.xrule) = {
  if (!(this->iamf_eq_zero() <= 0 && this->iamf_eq_zero() >= 0)) {
    total_size += 1 + 4;
  }

  // float iamf_ne_zero = 9 [(.mam.xrule) = {
  if (!(this->iamf_ne_zero() <= 0 && this->iamf_ne_zero() >= 0)) {
    total_size += 1 + 4;
  }

  // float iamf_gt_zero = 10 [(.mam.xrule) = {
  if (!(this->iamf_gt_zero() <= 0 && this->iamf_gt_zero() >= 0)) {
    total_size += 1 + 4;
  }

  // float iamf_ge_zero = 11 [(.mam.xrule) = {
  if (!(this->iamf_ge_zero() <= 0 && this->iamf_ge_zero() >= 0)) {
    total_size += 1 + 4;
  }

  // float iamf_lt_zero = 12 [(.mam.xrule) = {
  if (!(this->iamf_lt_zero() <= 0 && this->iamf_lt_zero() >= 0)) {
    total_size += 1 + 4;
  }

  // float iamf_le_zero = 13 [(.mam.xrule) = {
  if (!(this->iamf_le_zero() <= 0 && this->iamf_le_zero() >= 0)) {
    total_size += 1 + 4;
  }

  // float iamf_ge_lt_zero_left = 14 [(.mam.xrule) = {
  if (!(this->iamf_ge_lt_zero_left() <= 0 && this->iamf_ge_lt_zero_left() >= 0)) {
    total_size += 1 + 4;
  }

  // float iamf_ge_lt_zero_right = 15 [(.mam.xrule) = {
  if (!(this->iamf_ge_lt_zero_right() <= 0 && this->iamf_ge_lt_zero_right() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SceneFloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.SceneFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneFloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SceneFloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.SceneFloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.SceneFloat)
    MergeFrom(*source);
  }
}

void SceneFloat::MergeFrom(const SceneFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.SceneFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.iamf_eq() <= 0 && from.iamf_eq() >= 0)) {
    _internal_set_iamf_eq(from._internal_iamf_eq());
  }
  if (!(from.iamf_ne() <= 0 && from.iamf_ne() >= 0)) {
    _internal_set_iamf_ne(from._internal_iamf_ne());
  }
  if (!(from.iamf_gt() <= 0 && from.iamf_gt() >= 0)) {
    _internal_set_iamf_gt(from._internal_iamf_gt());
  }
  if (!(from.iamf_ge() <= 0 && from.iamf_ge() >= 0)) {
    _internal_set_iamf_ge(from._internal_iamf_ge());
  }
  if (!(from.iamf_lt() <= 0 && from.iamf_lt() >= 0)) {
    _internal_set_iamf_lt(from._internal_iamf_lt());
  }
  if (!(from.iamf_le() <= 0 && from.iamf_le() >= 0)) {
    _internal_set_iamf_le(from._internal_iamf_le());
  }
  if (!(from.iamf_ge_lt() <= 0 && from.iamf_ge_lt() >= 0)) {
    _internal_set_iamf_ge_lt(from._internal_iamf_ge_lt());
  }
  if (!(from.iamf_eq_zero() <= 0 && from.iamf_eq_zero() >= 0)) {
    _internal_set_iamf_eq_zero(from._internal_iamf_eq_zero());
  }
  if (!(from.iamf_ne_zero() <= 0 && from.iamf_ne_zero() >= 0)) {
    _internal_set_iamf_ne_zero(from._internal_iamf_ne_zero());
  }
  if (!(from.iamf_gt_zero() <= 0 && from.iamf_gt_zero() >= 0)) {
    _internal_set_iamf_gt_zero(from._internal_iamf_gt_zero());
  }
  if (!(from.iamf_ge_zero() <= 0 && from.iamf_ge_zero() >= 0)) {
    _internal_set_iamf_ge_zero(from._internal_iamf_ge_zero());
  }
  if (!(from.iamf_lt_zero() <= 0 && from.iamf_lt_zero() >= 0)) {
    _internal_set_iamf_lt_zero(from._internal_iamf_lt_zero());
  }
  if (!(from.iamf_le_zero() <= 0 && from.iamf_le_zero() >= 0)) {
    _internal_set_iamf_le_zero(from._internal_iamf_le_zero());
  }
  if (!(from.iamf_ge_lt_zero_left() <= 0 && from.iamf_ge_lt_zero_left() >= 0)) {
    _internal_set_iamf_ge_lt_zero_left(from._internal_iamf_ge_lt_zero_left());
  }
  if (!(from.iamf_ge_lt_zero_right() <= 0 && from.iamf_ge_lt_zero_right() >= 0)) {
    _internal_set_iamf_ge_lt_zero_right(from._internal_iamf_ge_lt_zero_right());
  }
}

void SceneFloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.SceneFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneFloat::CopyFrom(const SceneFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.SceneFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneFloat::IsInitialized() const {
  return true;
}

void SceneFloat::InternalSwap(SceneFloat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneFloat, iamf_ge_lt_zero_right_)
      + sizeof(SceneFloat::iamf_ge_lt_zero_right_)
      - PROTOBUF_FIELD_OFFSET(SceneFloat, iamf_eq_)>(
          reinterpret_cast<char*>(&iamf_eq_),
          reinterpret_cast<char*>(&other->iamf_eq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneFloat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SceneDouble::InitAsDefaultInstance() {
}
class SceneDouble::_Internal {
 public:
};

SceneDouble::SceneDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.SceneDouble)
}
SceneDouble::SceneDouble(const SceneDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iamd_eq_, &from.iamd_eq_,
    static_cast<size_t>(reinterpret_cast<char*>(&iamd_ge_lt_zero_right_) -
    reinterpret_cast<char*>(&iamd_eq_)) + sizeof(iamd_ge_lt_zero_right_));
  // @@protoc_insertion_point(copy_constructor:mam.SceneDouble)
}

void SceneDouble::SharedCtor() {
  ::memset(&iamd_eq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iamd_ge_lt_zero_right_) -
      reinterpret_cast<char*>(&iamd_eq_)) + sizeof(iamd_ge_lt_zero_right_));
}

SceneDouble::~SceneDouble() {
  // @@protoc_insertion_point(destructor:mam.SceneDouble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SceneDouble::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SceneDouble::ArenaDtor(void* object) {
  SceneDouble* _this = reinterpret_cast< SceneDouble* >(object);
  (void)_this;
}
void SceneDouble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SceneDouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SceneDouble& SceneDouble::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SceneDouble_fourteenth_2eproto.base);
  return *internal_default_instance();
}


void SceneDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.SceneDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iamd_eq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iamd_ge_lt_zero_right_) -
      reinterpret_cast<char*>(&iamd_eq_)) + sizeof(iamd_ge_lt_zero_right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneDouble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double iamd_eq = 1 [(.mam.xrule) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          iamd_eq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double iamd_ne = 2 [(.mam.xrule) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          iamd_ne_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double iamd_gt = 3 [(.mam.xrule) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          iamd_gt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double iamd_ge = 4 [(.mam.xrule) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          iamd_ge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double iamd_lt = 5 [(.mam.xrule) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          iamd_lt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double iamd_le = 6 [(.mam.xrule) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          iamd_le_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double iamd_ge_lt = 7 [(.mam.xrule) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          iamd_ge_lt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double iamd_eq_zero = 8 [(.mam.xrule) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          iamd_eq_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double iamd_ne_zero = 9 [(.mam.xrule) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          iamd_ne_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double iamd_gt_zero = 10 [(.mam.xrule) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          iamd_gt_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double iamd_ge_zero = 11 [(.mam.xrule) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          iamd_ge_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double iamd_lt_zero = 12 [(.mam.xrule) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          iamd_lt_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double iamd_le_zero = 13 [(.mam.xrule) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          iamd_le_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double iamd_ge_lt_zero_left = 14 [(.mam.xrule) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          iamd_ge_lt_zero_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double iamd_ge_lt_zero_right = 15 [(.mam.xrule) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          iamd_ge_lt_zero_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SceneDouble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.SceneDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double iamd_eq = 1 [(.mam.xrule) = {
  if (!(this->iamd_eq() <= 0 && this->iamd_eq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_iamd_eq(), target);
  }

  // double iamd_ne = 2 [(.mam.xrule) = {
  if (!(this->iamd_ne() <= 0 && this->iamd_ne() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_iamd_ne(), target);
  }

  // double iamd_gt = 3 [(.mam.xrule) = {
  if (!(this->iamd_gt() <= 0 && this->iamd_gt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_iamd_gt(), target);
  }

  // double iamd_ge = 4 [(.mam.xrule) = {
  if (!(this->iamd_ge() <= 0 && this->iamd_ge() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_iamd_ge(), target);
  }

  // double iamd_lt = 5 [(.mam.xrule) = {
  if (!(this->iamd_lt() <= 0 && this->iamd_lt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_iamd_lt(), target);
  }

  // double iamd_le = 6 [(.mam.xrule) = {
  if (!(this->iamd_le() <= 0 && this->iamd_le() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_iamd_le(), target);
  }

  // double iamd_ge_lt = 7 [(.mam.xrule) = {
  if (!(this->iamd_ge_lt() <= 0 && this->iamd_ge_lt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_iamd_ge_lt(), target);
  }

  // double iamd_eq_zero = 8 [(.mam.xrule) = {
  if (!(this->iamd_eq_zero() <= 0 && this->iamd_eq_zero() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_iamd_eq_zero(), target);
  }

  // double iamd_ne_zero = 9 [(.mam.xrule) = {
  if (!(this->iamd_ne_zero() <= 0 && this->iamd_ne_zero() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_iamd_ne_zero(), target);
  }

  // double iamd_gt_zero = 10 [(.mam.xrule) = {
  if (!(this->iamd_gt_zero() <= 0 && this->iamd_gt_zero() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_iamd_gt_zero(), target);
  }

  // double iamd_ge_zero = 11 [(.mam.xrule) = {
  if (!(this->iamd_ge_zero() <= 0 && this->iamd_ge_zero() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_iamd_ge_zero(), target);
  }

  // double iamd_lt_zero = 12 [(.mam.xrule) = {
  if (!(this->iamd_lt_zero() <= 0 && this->iamd_lt_zero() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_iamd_lt_zero(), target);
  }

  // double iamd_le_zero = 13 [(.mam.xrule) = {
  if (!(this->iamd_le_zero() <= 0 && this->iamd_le_zero() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_iamd_le_zero(), target);
  }

  // double iamd_ge_lt_zero_left = 14 [(.mam.xrule) = {
  if (!(this->iamd_ge_lt_zero_left() <= 0 && this->iamd_ge_lt_zero_left() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_iamd_ge_lt_zero_left(), target);
  }

  // double iamd_ge_lt_zero_right = 15 [(.mam.xrule) = {
  if (!(this->iamd_ge_lt_zero_right() <= 0 && this->iamd_ge_lt_zero_right() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_iamd_ge_lt_zero_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.SceneDouble)
  return target;
}

size_t SceneDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.SceneDouble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double iamd_eq = 1 [(.mam.xrule) = {
  if (!(this->iamd_eq() <= 0 && this->iamd_eq() >= 0)) {
    total_size += 1 + 8;
  }

  // double iamd_ne = 2 [(.mam.xrule) = {
  if (!(this->iamd_ne() <= 0 && this->iamd_ne() >= 0)) {
    total_size += 1 + 8;
  }

  // double iamd_gt = 3 [(.mam.xrule) = {
  if (!(this->iamd_gt() <= 0 && this->iamd_gt() >= 0)) {
    total_size += 1 + 8;
  }

  // double iamd_ge = 4 [(.mam.xrule) = {
  if (!(this->iamd_ge() <= 0 && this->iamd_ge() >= 0)) {
    total_size += 1 + 8;
  }

  // double iamd_lt = 5 [(.mam.xrule) = {
  if (!(this->iamd_lt() <= 0 && this->iamd_lt() >= 0)) {
    total_size += 1 + 8;
  }

  // double iamd_le = 6 [(.mam.xrule) = {
  if (!(this->iamd_le() <= 0 && this->iamd_le() >= 0)) {
    total_size += 1 + 8;
  }

  // double iamd_ge_lt = 7 [(.mam.xrule) = {
  if (!(this->iamd_ge_lt() <= 0 && this->iamd_ge_lt() >= 0)) {
    total_size += 1 + 8;
  }

  // double iamd_eq_zero = 8 [(.mam.xrule) = {
  if (!(this->iamd_eq_zero() <= 0 && this->iamd_eq_zero() >= 0)) {
    total_size += 1 + 8;
  }

  // double iamd_ne_zero = 9 [(.mam.xrule) = {
  if (!(this->iamd_ne_zero() <= 0 && this->iamd_ne_zero() >= 0)) {
    total_size += 1 + 8;
  }

  // double iamd_gt_zero = 10 [(.mam.xrule) = {
  if (!(this->iamd_gt_zero() <= 0 && this->iamd_gt_zero() >= 0)) {
    total_size += 1 + 8;
  }

  // double iamd_ge_zero = 11 [(.mam.xrule) = {
  if (!(this->iamd_ge_zero() <= 0 && this->iamd_ge_zero() >= 0)) {
    total_size += 1 + 8;
  }

  // double iamd_lt_zero = 12 [(.mam.xrule) = {
  if (!(this->iamd_lt_zero() <= 0 && this->iamd_lt_zero() >= 0)) {
    total_size += 1 + 8;
  }

  // double iamd_le_zero = 13 [(.mam.xrule) = {
  if (!(this->iamd_le_zero() <= 0 && this->iamd_le_zero() >= 0)) {
    total_size += 1 + 8;
  }

  // double iamd_ge_lt_zero_left = 14 [(.mam.xrule) = {
  if (!(this->iamd_ge_lt_zero_left() <= 0 && this->iamd_ge_lt_zero_left() >= 0)) {
    total_size += 1 + 8;
  }

  // double iamd_ge_lt_zero_right = 15 [(.mam.xrule) = {
  if (!(this->iamd_ge_lt_zero_right() <= 0 && this->iamd_ge_lt_zero_right() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SceneDouble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.SceneDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneDouble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SceneDouble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.SceneDouble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.SceneDouble)
    MergeFrom(*source);
  }
}

void SceneDouble::MergeFrom(const SceneDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.SceneDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.iamd_eq() <= 0 && from.iamd_eq() >= 0)) {
    _internal_set_iamd_eq(from._internal_iamd_eq());
  }
  if (!(from.iamd_ne() <= 0 && from.iamd_ne() >= 0)) {
    _internal_set_iamd_ne(from._internal_iamd_ne());
  }
  if (!(from.iamd_gt() <= 0 && from.iamd_gt() >= 0)) {
    _internal_set_iamd_gt(from._internal_iamd_gt());
  }
  if (!(from.iamd_ge() <= 0 && from.iamd_ge() >= 0)) {
    _internal_set_iamd_ge(from._internal_iamd_ge());
  }
  if (!(from.iamd_lt() <= 0 && from.iamd_lt() >= 0)) {
    _internal_set_iamd_lt(from._internal_iamd_lt());
  }
  if (!(from.iamd_le() <= 0 && from.iamd_le() >= 0)) {
    _internal_set_iamd_le(from._internal_iamd_le());
  }
  if (!(from.iamd_ge_lt() <= 0 && from.iamd_ge_lt() >= 0)) {
    _internal_set_iamd_ge_lt(from._internal_iamd_ge_lt());
  }
  if (!(from.iamd_eq_zero() <= 0 && from.iamd_eq_zero() >= 0)) {
    _internal_set_iamd_eq_zero(from._internal_iamd_eq_zero());
  }
  if (!(from.iamd_ne_zero() <= 0 && from.iamd_ne_zero() >= 0)) {
    _internal_set_iamd_ne_zero(from._internal_iamd_ne_zero());
  }
  if (!(from.iamd_gt_zero() <= 0 && from.iamd_gt_zero() >= 0)) {
    _internal_set_iamd_gt_zero(from._internal_iamd_gt_zero());
  }
  if (!(from.iamd_ge_zero() <= 0 && from.iamd_ge_zero() >= 0)) {
    _internal_set_iamd_ge_zero(from._internal_iamd_ge_zero());
  }
  if (!(from.iamd_lt_zero() <= 0 && from.iamd_lt_zero() >= 0)) {
    _internal_set_iamd_lt_zero(from._internal_iamd_lt_zero());
  }
  if (!(from.iamd_le_zero() <= 0 && from.iamd_le_zero() >= 0)) {
    _internal_set_iamd_le_zero(from._internal_iamd_le_zero());
  }
  if (!(from.iamd_ge_lt_zero_left() <= 0 && from.iamd_ge_lt_zero_left() >= 0)) {
    _internal_set_iamd_ge_lt_zero_left(from._internal_iamd_ge_lt_zero_left());
  }
  if (!(from.iamd_ge_lt_zero_right() <= 0 && from.iamd_ge_lt_zero_right() >= 0)) {
    _internal_set_iamd_ge_lt_zero_right(from._internal_iamd_ge_lt_zero_right());
  }
}

void SceneDouble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.SceneDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneDouble::CopyFrom(const SceneDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.SceneDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneDouble::IsInitialized() const {
  return true;
}

void SceneDouble::InternalSwap(SceneDouble* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneDouble, iamd_ge_lt_zero_right_)
      + sizeof(SceneDouble::iamd_ge_lt_zero_right_)
      - PROTOBUF_FIELD_OFFSET(SceneDouble, iamd_eq_)>(
          reinterpret_cast<char*>(&iamd_eq_),
          reinterpret_cast<char*>(&other->iamd_eq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneDouble::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SceneOther::InitAsDefaultInstance() {
}
class SceneOther::_Internal {
 public:
};

SceneOther::SceneOther(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.SceneOther)
}
SceneOther::SceneOther(const SceneOther& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rate_, &from.rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_) -
    reinterpret_cast<char*>(&rate_)) + sizeof(server_));
  // @@protoc_insertion_point(copy_constructor:mam.SceneOther)
}

void SceneOther::SharedCtor() {
  ::memset(&rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_) -
      reinterpret_cast<char*>(&rate_)) + sizeof(server_));
}

SceneOther::~SceneOther() {
  // @@protoc_insertion_point(destructor:mam.SceneOther)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SceneOther::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SceneOther::ArenaDtor(void* object) {
  SceneOther* _this = reinterpret_cast< SceneOther* >(object);
  (void)_this;
}
void SceneOther::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SceneOther::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SceneOther& SceneOther::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SceneOther_fourteenth_2eproto.base);
  return *internal_default_instance();
}


void SceneOther::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.SceneOther)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_) -
      reinterpret_cast<char*>(&rate_)) + sizeof(server_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneOther::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate = 1 [(.mam.xrule) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 server = 2 [(.mam.xrule) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SceneOther::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.SceneOther)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate = 1 [(.mam.xrule) = {
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate(), target);
  }

  // int32 server = 2 [(.mam.xrule) = {
  if (this->server() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_server(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.SceneOther)
  return target;
}

size_t SceneOther::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.SceneOther)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate = 1 [(.mam.xrule) = {
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 server = 2 [(.mam.xrule) = {
  if (this->server() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SceneOther::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.SceneOther)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneOther* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SceneOther>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.SceneOther)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.SceneOther)
    MergeFrom(*source);
  }
}

void SceneOther::MergeFrom(const SceneOther& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.SceneOther)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate() <= 0 && from.rate() >= 0)) {
    _internal_set_rate(from._internal_rate());
  }
  if (from.server() != 0) {
    _internal_set_server(from._internal_server());
  }
}

void SceneOther::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.SceneOther)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneOther::CopyFrom(const SceneOther& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.SceneOther)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneOther::IsInitialized() const {
  return true;
}

void SceneOther::InternalSwap(SceneOther* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneOther, server_)
      + sizeof(SceneOther::server_)
      - PROTOBUF_FIELD_OFFSET(SceneOther, rate_)>(
          reinterpret_cast<char*>(&rate_),
          reinterpret_cast<char*>(&other->rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneOther::GetMetadata() const {
  return GetMetadataStatic();
}

::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mam::FieldRule >, 11, false >
  xrule(kXruleFieldNumber, ::mam::FieldRule::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mam::FieldRule* Arena::CreateMaybeMessage< ::mam::FieldRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::FieldRule >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::SceneString* Arena::CreateMaybeMessage< ::mam::SceneString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::SceneString >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::SceneInt* Arena::CreateMaybeMessage< ::mam::SceneInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::SceneInt >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::SceneUInt* Arena::CreateMaybeMessage< ::mam::SceneUInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::SceneUInt >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::SceneLong* Arena::CreateMaybeMessage< ::mam::SceneLong >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::SceneLong >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::SceneULong* Arena::CreateMaybeMessage< ::mam::SceneULong >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::SceneULong >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::SceneFloat* Arena::CreateMaybeMessage< ::mam::SceneFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::SceneFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::SceneDouble* Arena::CreateMaybeMessage< ::mam::SceneDouble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::SceneDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::SceneOther* Arena::CreateMaybeMessage< ::mam::SceneOther >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::SceneOther >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
