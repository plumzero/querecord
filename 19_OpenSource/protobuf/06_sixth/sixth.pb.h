// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sixth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sixth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sixth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sixth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sixth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sixth_2eproto;
namespace mam {
class ForCheckMsg;
class ForCheckMsgDefaultTypeInternal;
extern ForCheckMsgDefaultTypeInternal _ForCheckMsg_default_instance_;
class ForCheckMsg_DicEntry_DoNotUse;
class ForCheckMsg_DicEntry_DoNotUseDefaultTypeInternal;
extern ForCheckMsg_DicEntry_DoNotUseDefaultTypeInternal _ForCheckMsg_DicEntry_DoNotUse_default_instance_;
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> ::mam::ForCheckMsg* Arena::CreateMaybeMessage<::mam::ForCheckMsg>(Arena*);
template<> ::mam::ForCheckMsg_DicEntry_DoNotUse* Arena::CreateMaybeMessage<::mam::ForCheckMsg_DicEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mam {

enum ShouldType : int {
  NoneType = 0,
  NameType = 1,
  TimeType = 2,
  ShouldType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ShouldType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ShouldType_IsValid(int value);
constexpr ShouldType ShouldType_MIN = NoneType;
constexpr ShouldType ShouldType_MAX = TimeType;
constexpr int ShouldType_ARRAYSIZE = ShouldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShouldType_descriptor();
template<typename T>
inline const std::string& ShouldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ShouldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ShouldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ShouldType_descriptor(), enum_t_value);
}
inline bool ShouldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ShouldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShouldType>(
    ShouldType_descriptor(), name, value);
}
// ===================================================================

class ForCheckMsg_DicEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ForCheckMsg_DicEntry_DoNotUse, 
    std::string, ::mam::ShouldType,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ForCheckMsg_DicEntry_DoNotUse, 
    std::string, ::mam::ShouldType,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
    0 > SuperType;
  ForCheckMsg_DicEntry_DoNotUse();
  explicit ForCheckMsg_DicEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ForCheckMsg_DicEntry_DoNotUse& other);
  static const ForCheckMsg_DicEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ForCheckMsg_DicEntry_DoNotUse*>(&_ForCheckMsg_DicEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "mam.ForCheckMsg.DicEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sixth_2eproto);
    return ::descriptor_table_sixth_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class ForCheckMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.ForCheckMsg) */ {
 public:
  inline ForCheckMsg() : ForCheckMsg(nullptr) {}
  virtual ~ForCheckMsg();

  ForCheckMsg(const ForCheckMsg& from);
  ForCheckMsg(ForCheckMsg&& from) noexcept
    : ForCheckMsg() {
    *this = ::std::move(from);
  }

  inline ForCheckMsg& operator=(const ForCheckMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForCheckMsg& operator=(ForCheckMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForCheckMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForCheckMsg* internal_default_instance() {
    return reinterpret_cast<const ForCheckMsg*>(
               &_ForCheckMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ForCheckMsg& a, ForCheckMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ForCheckMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForCheckMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForCheckMsg* New() const final {
    return CreateMaybeMessage<ForCheckMsg>(nullptr);
  }

  ForCheckMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForCheckMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForCheckMsg& from);
  void MergeFrom(const ForCheckMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForCheckMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.ForCheckMsg";
  }
  protected:
  explicit ForCheckMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sixth_2eproto);
    return ::descriptor_table_sixth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDicFieldNumber = 3,
    kNameFieldNumber = 1,
    kTimeFieldNumber = 2,
    kIdFieldNumber = 4,
  };
  // map<string, .mam.ShouldType> dic = 3;
  int dic_size() const;
  private:
  int _internal_dic_size() const;
  public:
  void clear_dic();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ShouldType >&
      _internal_dic() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ShouldType >*
      _internal_mutable_dic();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ShouldType >&
      dic() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ShouldType >*
      mutable_dic();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 4;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.ForCheckMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ForCheckMsg_DicEntry_DoNotUse,
      std::string, ::mam::ShouldType,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
      0 > dic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sixth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ForCheckMsg

// string name = 1;
inline void ForCheckMsg::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ForCheckMsg::name() const {
  // @@protoc_insertion_point(field_get:mam.ForCheckMsg.name)
  return _internal_name();
}
inline void ForCheckMsg::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mam.ForCheckMsg.name)
}
inline std::string* ForCheckMsg::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mam.ForCheckMsg.name)
  return _internal_mutable_name();
}
inline const std::string& ForCheckMsg::_internal_name() const {
  return name_.Get();
}
inline void ForCheckMsg::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ForCheckMsg::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.ForCheckMsg.name)
}
inline void ForCheckMsg::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.ForCheckMsg.name)
}
inline void ForCheckMsg::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.ForCheckMsg.name)
}
inline std::string* ForCheckMsg::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ForCheckMsg::release_name() {
  // @@protoc_insertion_point(field_release:mam.ForCheckMsg.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ForCheckMsg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.ForCheckMsg.name)
}

// int32 time = 2;
inline void ForCheckMsg::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ForCheckMsg::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ForCheckMsg::time() const {
  // @@protoc_insertion_point(field_get:mam.ForCheckMsg.time)
  return _internal_time();
}
inline void ForCheckMsg::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void ForCheckMsg::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:mam.ForCheckMsg.time)
}

// map<string, .mam.ShouldType> dic = 3;
inline int ForCheckMsg::_internal_dic_size() const {
  return dic_.size();
}
inline int ForCheckMsg::dic_size() const {
  return _internal_dic_size();
}
inline void ForCheckMsg::clear_dic() {
  dic_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ShouldType >&
ForCheckMsg::_internal_dic() const {
  return dic_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ShouldType >&
ForCheckMsg::dic() const {
  // @@protoc_insertion_point(field_map:mam.ForCheckMsg.dic)
  return _internal_dic();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ShouldType >*
ForCheckMsg::_internal_mutable_dic() {
  return dic_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ShouldType >*
ForCheckMsg::mutable_dic() {
  // @@protoc_insertion_point(field_mutable_map:mam.ForCheckMsg.dic)
  return _internal_mutable_dic();
}

// int32 id = 4;
inline void ForCheckMsg::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ForCheckMsg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ForCheckMsg::id() const {
  // @@protoc_insertion_point(field_get:mam.ForCheckMsg.id)
  return _internal_id();
}
inline void ForCheckMsg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ForCheckMsg::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mam.ForCheckMsg.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mam

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mam::ShouldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mam::ShouldType>() {
  return ::mam::ShouldType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sixth_2eproto
