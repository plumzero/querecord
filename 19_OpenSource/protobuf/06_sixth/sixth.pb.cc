// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sixth.proto

#include "sixth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sixth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForCheckMsg_DicEntry_DoNotUse_sixth_2eproto;
namespace mam {
class ForCheckMsg_DicEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForCheckMsg_DicEntry_DoNotUse> _instance;
} _ForCheckMsg_DicEntry_DoNotUse_default_instance_;
class ForCheckMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForCheckMsg> _instance;
} _ForCheckMsg_default_instance_;
}  // namespace mam
static void InitDefaultsscc_info_ForCheckMsg_sixth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_ForCheckMsg_default_instance_;
    new (ptr) ::mam::ForCheckMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::ForCheckMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ForCheckMsg_sixth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ForCheckMsg_sixth_2eproto}, {
      &scc_info_ForCheckMsg_DicEntry_DoNotUse_sixth_2eproto.base,}};

static void InitDefaultsscc_info_ForCheckMsg_DicEntry_DoNotUse_sixth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_ForCheckMsg_DicEntry_DoNotUse_default_instance_;
    new (ptr) ::mam::ForCheckMsg_DicEntry_DoNotUse();
  }
  ::mam::ForCheckMsg_DicEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForCheckMsg_DicEntry_DoNotUse_sixth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ForCheckMsg_DicEntry_DoNotUse_sixth_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sixth_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sixth_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sixth_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sixth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mam::ForCheckMsg_DicEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mam::ForCheckMsg_DicEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::ForCheckMsg_DicEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mam::ForCheckMsg_DicEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::ForCheckMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::ForCheckMsg, name_),
  PROTOBUF_FIELD_OFFSET(::mam::ForCheckMsg, time_),
  PROTOBUF_FIELD_OFFSET(::mam::ForCheckMsg, dic_),
  PROTOBUF_FIELD_OFFSET(::mam::ForCheckMsg, id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::mam::ForCheckMsg_DicEntry_DoNotUse)},
  { 9, -1, sizeof(::mam::ForCheckMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_ForCheckMsg_DicEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_ForCheckMsg_default_instance_),
};

const char descriptor_table_protodef_sixth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013sixth.proto\022\003mam\"\232\001\n\013ForCheckMsg\022\014\n\004na"
  "me\030\001 \001(\t\022\014\n\004time\030\002 \001(\005\022&\n\003dic\030\003 \003(\0132\031.ma"
  "m.ForCheckMsg.DicEntry\022\n\n\002id\030\004 \001(\005\032;\n\010Di"
  "cEntry\022\013\n\003key\030\001 \001(\t\022\036\n\005value\030\002 \001(\0162\017.mam"
  ".ShouldType:\0028\001*6\n\nShouldType\022\014\n\010NoneTyp"
  "e\020\000\022\014\n\010NameType\020\001\022\014\n\010TimeType\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sixth_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sixth_2eproto_sccs[2] = {
  &scc_info_ForCheckMsg_sixth_2eproto.base,
  &scc_info_ForCheckMsg_DicEntry_DoNotUse_sixth_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sixth_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sixth_2eproto = {
  false, false, descriptor_table_protodef_sixth_2eproto, "sixth.proto", 239,
  &descriptor_table_sixth_2eproto_once, descriptor_table_sixth_2eproto_sccs, descriptor_table_sixth_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_sixth_2eproto::offsets,
  file_level_metadata_sixth_2eproto, 2, file_level_enum_descriptors_sixth_2eproto, file_level_service_descriptors_sixth_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sixth_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sixth_2eproto)), true);
namespace mam {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShouldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sixth_2eproto);
  return file_level_enum_descriptors_sixth_2eproto[0];
}
bool ShouldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

ForCheckMsg_DicEntry_DoNotUse::ForCheckMsg_DicEntry_DoNotUse() {}
ForCheckMsg_DicEntry_DoNotUse::ForCheckMsg_DicEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ForCheckMsg_DicEntry_DoNotUse::MergeFrom(const ForCheckMsg_DicEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ForCheckMsg_DicEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ForCheckMsg_DicEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ForCheckMsg::InitAsDefaultInstance() {
}
class ForCheckMsg::_Internal {
 public:
};

ForCheckMsg::ForCheckMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dic_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.ForCheckMsg)
}
ForCheckMsg::ForCheckMsg(const ForCheckMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dic_.MergeFrom(from.dic_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:mam.ForCheckMsg)
}

void ForCheckMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ForCheckMsg_sixth_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(id_));
}

ForCheckMsg::~ForCheckMsg() {
  // @@protoc_insertion_point(destructor:mam.ForCheckMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ForCheckMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ForCheckMsg::ArenaDtor(void* object) {
  ForCheckMsg* _this = reinterpret_cast< ForCheckMsg* >(object);
  (void)_this;
}
void ForCheckMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForCheckMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForCheckMsg& ForCheckMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForCheckMsg_sixth_2eproto.base);
  return *internal_default_instance();
}


void ForCheckMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.ForCheckMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dic_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForCheckMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.ForCheckMsg.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .mam.ShouldType> dic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&dic_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForCheckMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.ForCheckMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.ForCheckMsg.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time(), target);
  }

  // map<string, .mam.ShouldType> dic = 3;
  if (!this->_internal_dic().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ShouldType >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mam.ForCheckMsg.DicEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_dic().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_dic().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ShouldType >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ShouldType >::const_iterator
          it = this->_internal_dic().begin();
          it != this->_internal_dic().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ForCheckMsg_DicEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ShouldType >::const_iterator
          it = this->_internal_dic().begin();
          it != this->_internal_dic().end(); ++it) {
        target = ForCheckMsg_DicEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 id = 4;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.ForCheckMsg)
  return target;
}

size_t ForCheckMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.ForCheckMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .mam.ShouldType> dic = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dic_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ShouldType >::const_iterator
      it = this->_internal_dic().begin();
      it != this->_internal_dic().end(); ++it) {
    total_size += ForCheckMsg_DicEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // int32 id = 4;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForCheckMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.ForCheckMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ForCheckMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForCheckMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.ForCheckMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.ForCheckMsg)
    MergeFrom(*source);
  }
}

void ForCheckMsg::MergeFrom(const ForCheckMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.ForCheckMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dic_.MergeFrom(from.dic_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ForCheckMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.ForCheckMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForCheckMsg::CopyFrom(const ForCheckMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.ForCheckMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForCheckMsg::IsInitialized() const {
  return true;
}

void ForCheckMsg::InternalSwap(ForCheckMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dic_.Swap(&other->dic_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForCheckMsg, id_)
      + sizeof(ForCheckMsg::id_)
      - PROTOBUF_FIELD_OFFSET(ForCheckMsg, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForCheckMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mam::ForCheckMsg_DicEntry_DoNotUse* Arena::CreateMaybeMessage< ::mam::ForCheckMsg_DicEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::ForCheckMsg_DicEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::ForCheckMsg* Arena::CreateMaybeMessage< ::mam::ForCheckMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::ForCheckMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
