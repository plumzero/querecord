// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade.proto

#include "trade.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_trade_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderChangeResult_trade_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trade_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderMatchResult_trade_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trade_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradeStockPosition_trade_2eproto;
namespace mam {
class TradeOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeOrder> _instance;
} _TradeOrder_default_instance_;
class CancelOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelOrder> _instance;
} _CancelOrder_default_instance_;
class OrderMatchResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderMatchResult> _instance;
} _OrderMatchResult_default_instance_;
class OrderChangeResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderChangeResult> _instance;
} _OrderChangeResult_default_instance_;
class TradeOrderRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeOrderRsp> _instance;
} _TradeOrderRsp_default_instance_;
class TradeAccountQryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeAccountQry> _instance;
} _TradeAccountQry_default_instance_;
class TradeStockPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeStockPosition> _instance;
} _TradeStockPosition_default_instance_;
class TradeAccountRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeAccountRsp> _instance;
} _TradeAccountRsp_default_instance_;
}  // namespace mam
static void InitDefaultsscc_info_CancelOrder_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_CancelOrder_default_instance_;
    new (ptr) ::mam::CancelOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::CancelOrder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelOrder_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CancelOrder_trade_2eproto}, {}};

static void InitDefaultsscc_info_OrderChangeResult_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_OrderChangeResult_default_instance_;
    new (ptr) ::mam::OrderChangeResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::OrderChangeResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderChangeResult_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderChangeResult_trade_2eproto}, {}};

static void InitDefaultsscc_info_OrderMatchResult_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_OrderMatchResult_default_instance_;
    new (ptr) ::mam::OrderMatchResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::OrderMatchResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderMatchResult_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderMatchResult_trade_2eproto}, {}};

static void InitDefaultsscc_info_TradeAccountQry_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_TradeAccountQry_default_instance_;
    new (ptr) ::mam::TradeAccountQry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::TradeAccountQry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradeAccountQry_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TradeAccountQry_trade_2eproto}, {}};

static void InitDefaultsscc_info_TradeAccountRsp_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_TradeAccountRsp_default_instance_;
    new (ptr) ::mam::TradeAccountRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::TradeAccountRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradeAccountRsp_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradeAccountRsp_trade_2eproto}, {
      &scc_info_TradeStockPosition_trade_2eproto.base,}};

static void InitDefaultsscc_info_TradeOrder_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_TradeOrder_default_instance_;
    new (ptr) ::mam::TradeOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::TradeOrder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradeOrder_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TradeOrder_trade_2eproto}, {}};

static void InitDefaultsscc_info_TradeOrderRsp_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_TradeOrderRsp_default_instance_;
    new (ptr) ::mam::TradeOrderRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::TradeOrderRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TradeOrderRsp_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TradeOrderRsp_trade_2eproto}, {
      &scc_info_OrderMatchResult_trade_2eproto.base,
      &scc_info_OrderChangeResult_trade_2eproto.base,}};

static void InitDefaultsscc_info_TradeStockPosition_trade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_TradeStockPosition_default_instance_;
    new (ptr) ::mam::TradeStockPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::TradeStockPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradeStockPosition_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TradeStockPosition_trade_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_trade_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_trade_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_trade_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_trade_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, reqid_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, orderid_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, symbol_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, ordertype_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, tradetype_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, orderprice_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, ordervolume_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, ntime_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, accountid_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, tag_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, timeout_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, force_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, createtime_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, submittime_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, accepttime_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, closetime_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, dealprice_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, dealvolume_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, status_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, errcode_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, errdetail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::CancelOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::CancelOrder, reqid_),
  PROTOBUF_FIELD_OFFSET(::mam::CancelOrder, orderid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::OrderMatchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::OrderMatchResult, reqid_),
  PROTOBUF_FIELD_OFFSET(::mam::OrderMatchResult, orderid_),
  PROTOBUF_FIELD_OFFSET(::mam::OrderMatchResult, matchid_),
  PROTOBUF_FIELD_OFFSET(::mam::OrderMatchResult, time_),
  PROTOBUF_FIELD_OFFSET(::mam::OrderMatchResult, dealprice_),
  PROTOBUF_FIELD_OFFSET(::mam::OrderMatchResult, dealvolume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::OrderChangeResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::OrderChangeResult, reqid_),
  PROTOBUF_FIELD_OFFSET(::mam::OrderChangeResult, orderid_),
  PROTOBUF_FIELD_OFFSET(::mam::OrderChangeResult, time_),
  PROTOBUF_FIELD_OFFSET(::mam::OrderChangeResult, status_),
  PROTOBUF_FIELD_OFFSET(::mam::OrderChangeResult, errcode_),
  PROTOBUF_FIELD_OFFSET(::mam::OrderChangeResult, errdetail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrderRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrderRsp, matches_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrderRsp, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::TradeAccountQry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::TradeAccountQry, accountid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::TradeStockPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::TradeStockPosition, symbol_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeStockPosition, quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::TradeAccountRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::TradeAccountRsp, accountid_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeAccountRsp, host_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeAccountRsp, status_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeAccountRsp, balance_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeAccountRsp, positions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mam::TradeOrder)},
  { 26, -1, sizeof(::mam::CancelOrder)},
  { 33, -1, sizeof(::mam::OrderMatchResult)},
  { 44, -1, sizeof(::mam::OrderChangeResult)},
  { 55, -1, sizeof(::mam::TradeOrderRsp)},
  { 62, -1, sizeof(::mam::TradeAccountQry)},
  { 68, -1, sizeof(::mam::TradeStockPosition)},
  { 75, -1, sizeof(::mam::TradeAccountRsp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_TradeOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_CancelOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_OrderMatchResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_OrderChangeResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_TradeOrderRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_TradeAccountQry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_TradeStockPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_TradeAccountRsp_default_instance_),
};

const char descriptor_table_protodef_trade_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013trade.proto\022\003mam\"\264\003\n\nTradeOrder\022\r\n\005req"
  "Id\030\001 \001(\005\022\017\n\007orderId\030\002 \001(\t\022\016\n\006symbol\030\003 \001("
  "\t\022\021\n\torderType\030\004 \001(\005\022\021\n\ttradeType\030\005 \001(\005\022"
  "\022\n\norderPrice\030\006 \001(\005\022\023\n\013orderVolume\030\007 \001(\005"
  "\022\r\n\005nTime\030\010 \001(\005\022\021\n\taccountId\030\t \001(\005\022\013\n\003ta"
  "g\030\n \001(\t\022\017\n\007timeout\030\013 \001(\005\022\r\n\005force\030\014 \001(\010\022"
  "\022\n\ncreateTime\030\r \001(\003\022\022\n\nsubmitTime\030\016 \001(\003\022"
  "\022\n\nacceptTime\030\017 \001(\003\022\021\n\tcloseTime\030\020 \001(\003\022\021"
  "\n\tdealPrice\030\021 \001(\005\022\022\n\ndealVolume\030\022 \001(\005\022$\n"
  "\006status\030\023 \001(\0162\024.mam.OrderStatusType\022)\n\007e"
  "rrCode\030\024 \001(\0162\030.mam.TradeOrderErrorCode\022\021"
  "\n\terrDetail\030\025 \001(\t\"-\n\013CancelOrder\022\r\n\005reqI"
  "d\030\001 \001(\005\022\017\n\007orderId\030\002 \001(\t\"x\n\020OrderMatchRe"
  "sult\022\r\n\005reqId\030\001 \001(\005\022\017\n\007orderId\030\002 \001(\t\022\017\n\007"
  "matchId\030\003 \001(\t\022\014\n\004time\030\004 \001(\r\022\021\n\tdealPrice"
  "\030\005 \001(\005\022\022\n\ndealVolume\030\006 \001(\005\"\245\001\n\021OrderChan"
  "geResult\022\r\n\005reqId\030\001 \001(\005\022\017\n\007orderId\030\002 \001(\t"
  "\022\014\n\004time\030\003 \001(\r\022$\n\006status\030\004 \001(\0162\024.mam.Ord"
  "erStatusType\022)\n\007errCode\030\005 \001(\0162\030.mam.Trad"
  "eOrderErrorCode\022\021\n\terrDetail\030\006 \001(\t\"_\n\rTr"
  "adeOrderRsp\022&\n\007matches\030\001 \003(\0132\025.mam.Order"
  "MatchResult\022&\n\006status\030\002 \003(\0132\026.mam.OrderC"
  "hangeResult\"$\n\017TradeAccountQry\022\021\n\taccoun"
  "tId\030\001 \001(\005\"6\n\022TradeStockPosition\022\016\n\006symbo"
  "l\030\001 \001(\t\022\020\n\010quantity\030\002 \001(\005\"\230\001\n\017TradeAccou"
  "ntRsp\022\021\n\taccountId\030\001 \001(\005\022\014\n\004host\030\002 \001(\t\022\'"
  "\n\006status\030\003 \001(\0162\027.mam.TradeAccountStatus\022"
  "\017\n\007balance\030\004 \001(\001\022*\n\tpositions\030\005 \003(\0132\027.ma"
  "m.TradeStockPosition*\202\002\n\017OrderStatusType"
  "\022\024\n\020OrderStatus_None\020\000\022\030\n\024OrderStatus_Ac"
  "cepted\020\001\022\032\n\026OrderStatus_TotalMatch\020\002\022\036\n\032"
  "OrderStatus_PartialRemoved\020\003\022\034\n\030OrderSta"
  "tus_TotalRemoved\020\004\022\024\n\020OrderStatus_Fail\020\005"
  "\022\030\n\024OrderStatus_Removing\020\006\022\027\n\023OrderStatu"
  "s_Pending\020\007\022\034\n\030OrderStatus_PartialMatch\020"
  "\010*j\n\022TradeAccountStatus\022\r\n\tConnected\020\000\022\017"
  "\n\013Unconnected\020\001\022\030\n\024ConnectedAndTradable\020"
  "\002\022\032\n\026ConnectedAndUntradable\020\003*\274\006\n\023TradeO"
  "rderErrorCode\022\023\n\017JErrorType_None\020\000\022\037\n\033JE"
  "rrorType_TooHighFrequency\020d\022\034\n\030JErrorTyp"
  "e_OrderNotFound\020e\022\035\n\031JErrorType_NotTradi"
  "ngTime\020f\022\034\n\030JErrorType_OverHighOrLow\020g\022\031"
  "\n\025JErrorType_InvalidVol\020h\022\035\n\031JErrorType_"
  "Cannotselfdeal\020i\022\036\n\032JErrorType_CannotWit"
  "hDrawn\020j\022-\n)JErrorType_NotEnoughLendingA"
  "moutOrCaptial\020k\022\030\n\024JErrorType_StopTrade\020"
  "l\022\036\n\032JErrorType_NoSuchTradeType\020m\022\034\n\030JEr"
  "rorType_RiskCantTrade\020n\022(\n$JErrorType_St"
  "rategyRiskCantWithDrawn\020o\022#\n\037JErrorType_"
  "WithoutthisAuthority\020p\022\032\n\026JErrorType_Inv"
  "alidCode\020q\022 \n\034JErrorType_NoPisitionToClo"
  "se\020r\022\034\n\030JErrorType_InvalidAction\020s\022\035\n\031JE"
  "rrorType_NotSetTestBack\020t\022\"\n\036JErrorType_"
  "NotAvailableAccount\020u\022 \n\034JErrorType_Cent"
  "erServerError\020v\022\031\n\025JErrorType_NoPriority"
  "\020w\022!\n\035JErrorType_NoAccountAvaliable\020x\022&\n"
  "\"JErrorType_NotEnoughVolumeTobeUsed\020y\022\031\n"
  "\025JErrorType_NtimeDelay\020z\022\"\n\036JErrorType_P"
  "ositionCheckFailed\020{b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_trade_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_trade_2eproto_sccs[8] = {
  &scc_info_CancelOrder_trade_2eproto.base,
  &scc_info_OrderChangeResult_trade_2eproto.base,
  &scc_info_OrderMatchResult_trade_2eproto.base,
  &scc_info_TradeAccountQry_trade_2eproto.base,
  &scc_info_TradeAccountRsp_trade_2eproto.base,
  &scc_info_TradeOrder_trade_2eproto.base,
  &scc_info_TradeOrderRsp_trade_2eproto.base,
  &scc_info_TradeStockPosition_trade_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_trade_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trade_2eproto = {
  false, false, descriptor_table_protodef_trade_2eproto, "trade.proto", 2348,
  &descriptor_table_trade_2eproto_once, descriptor_table_trade_2eproto_sccs, descriptor_table_trade_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_trade_2eproto::offsets,
  file_level_metadata_trade_2eproto, 8, file_level_enum_descriptors_trade_2eproto, file_level_service_descriptors_trade_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_trade_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_trade_2eproto)), true);
namespace mam {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderStatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trade_2eproto);
  return file_level_enum_descriptors_trade_2eproto[0];
}
bool OrderStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeAccountStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trade_2eproto);
  return file_level_enum_descriptors_trade_2eproto[1];
}
bool TradeAccountStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeOrderErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trade_2eproto);
  return file_level_enum_descriptors_trade_2eproto[2];
}
bool TradeOrderErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TradeOrder::InitAsDefaultInstance() {
}
class TradeOrder::_Internal {
 public:
};

TradeOrder::TradeOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.TradeOrder)
}
TradeOrder::TradeOrder(const TradeOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_orderid(),
      GetArena());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  errdetail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errdetail().empty()) {
    errdetail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_errdetail(),
      GetArena());
  }
  ::memcpy(&reqid_, &from.reqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&errcode_) -
    reinterpret_cast<char*>(&reqid_)) + sizeof(errcode_));
  // @@protoc_insertion_point(copy_constructor:mam.TradeOrder)
}

void TradeOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeOrder_trade_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errdetail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&reqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&reqid_)) + sizeof(errcode_));
}

TradeOrder::~TradeOrder() {
  // @@protoc_insertion_point(destructor:mam.TradeOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradeOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errdetail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TradeOrder::ArenaDtor(void* object) {
  TradeOrder* _this = reinterpret_cast< TradeOrder* >(object);
  (void)_this;
}
void TradeOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradeOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeOrder& TradeOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeOrder_trade_2eproto.base);
  return *internal_default_instance();
}


void TradeOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.TradeOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  errdetail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&reqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&reqid_)) + sizeof(errcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 reqId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string orderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.TradeOrder.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.TradeOrder.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 orderType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ordertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tradeType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tradetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 orderPrice = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          orderprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 orderVolume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ordervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ntime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 accountId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.TradeOrder.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timeout = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool force = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 createTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 submitTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          submittime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 acceptTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          accepttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 closeTime = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          closetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dealPrice = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          dealprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dealVolume = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          dealvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mam.OrderStatusType status = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::mam::OrderStatusType>(val));
        } else goto handle_unusual;
        continue;
      // .mam.TradeOrderErrorCode errCode = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_errcode(static_cast<::mam::TradeOrderErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // string errDetail = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_errdetail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.TradeOrder.errDetail"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.TradeOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reqId = 1;
  if (this->reqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reqid(), target);
  }

  // string orderId = 2;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.TradeOrder.orderId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_orderid(), target);
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.TradeOrder.symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_symbol(), target);
  }

  // int32 orderType = 4;
  if (this->ordertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ordertype(), target);
  }

  // int32 tradeType = 5;
  if (this->tradetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_tradetype(), target);
  }

  // int32 orderPrice = 6;
  if (this->orderprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_orderprice(), target);
  }

  // int32 orderVolume = 7;
  if (this->ordervolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ordervolume(), target);
  }

  // int32 nTime = 8;
  if (this->ntime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_ntime(), target);
  }

  // int32 accountId = 9;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_accountid(), target);
  }

  // string tag = 10;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.TradeOrder.tag");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_tag(), target);
  }

  // int32 timeout = 11;
  if (this->timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_timeout(), target);
  }

  // bool force = 12;
  if (this->force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_force(), target);
  }

  // int64 createTime = 13;
  if (this->createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_createtime(), target);
  }

  // int64 submitTime = 14;
  if (this->submittime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_submittime(), target);
  }

  // int64 acceptTime = 15;
  if (this->accepttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_accepttime(), target);
  }

  // int64 closeTime = 16;
  if (this->closetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_closetime(), target);
  }

  // int32 dealPrice = 17;
  if (this->dealprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_dealprice(), target);
  }

  // int32 dealVolume = 18;
  if (this->dealvolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_dealvolume(), target);
  }

  // .mam.OrderStatusType status = 19;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_status(), target);
  }

  // .mam.TradeOrderErrorCode errCode = 20;
  if (this->errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_errcode(), target);
  }

  // string errDetail = 21;
  if (this->errdetail().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errdetail().data(), static_cast<int>(this->_internal_errdetail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.TradeOrder.errDetail");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_errdetail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.TradeOrder)
  return target;
}

size_t TradeOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.TradeOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderId = 2;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string tag = 10;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string errDetail = 21;
  if (this->errdetail().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errdetail());
  }

  // int32 reqId = 1;
  if (this->reqid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reqid());
  }

  // int32 orderType = 4;
  if (this->ordertype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ordertype());
  }

  // int32 tradeType = 5;
  if (this->tradetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tradetype());
  }

  // int32 orderPrice = 6;
  if (this->orderprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_orderprice());
  }

  // int32 orderVolume = 7;
  if (this->ordervolume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ordervolume());
  }

  // int32 nTime = 8;
  if (this->ntime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ntime());
  }

  // int32 accountId = 9;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_accountid());
  }

  // int32 timeout = 11;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timeout());
  }

  // int64 createTime = 13;
  if (this->createtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createtime());
  }

  // int64 submitTime = 14;
  if (this->submittime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_submittime());
  }

  // bool force = 12;
  if (this->force() != 0) {
    total_size += 1 + 1;
  }

  // int32 dealPrice = 17;
  if (this->dealprice() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dealprice());
  }

  // int64 acceptTime = 15;
  if (this->accepttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_accepttime());
  }

  // int64 closeTime = 16;
  if (this->closetime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_closetime());
  }

  // int32 dealVolume = 18;
  if (this->dealvolume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dealvolume());
  }

  // .mam.OrderStatusType status = 19;
  if (this->status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .mam.TradeOrderErrorCode errCode = 20;
  if (this->errcode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_errcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.TradeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.TradeOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.TradeOrder)
    MergeFrom(*source);
  }
}

void TradeOrder::MergeFrom(const TradeOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.TradeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {
    _internal_set_orderid(from._internal_orderid());
  }
  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.errdetail().size() > 0) {
    _internal_set_errdetail(from._internal_errdetail());
  }
  if (from.reqid() != 0) {
    _internal_set_reqid(from._internal_reqid());
  }
  if (from.ordertype() != 0) {
    _internal_set_ordertype(from._internal_ordertype());
  }
  if (from.tradetype() != 0) {
    _internal_set_tradetype(from._internal_tradetype());
  }
  if (from.orderprice() != 0) {
    _internal_set_orderprice(from._internal_orderprice());
  }
  if (from.ordervolume() != 0) {
    _internal_set_ordervolume(from._internal_ordervolume());
  }
  if (from.ntime() != 0) {
    _internal_set_ntime(from._internal_ntime());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  if (from.createtime() != 0) {
    _internal_set_createtime(from._internal_createtime());
  }
  if (from.submittime() != 0) {
    _internal_set_submittime(from._internal_submittime());
  }
  if (from.force() != 0) {
    _internal_set_force(from._internal_force());
  }
  if (from.dealprice() != 0) {
    _internal_set_dealprice(from._internal_dealprice());
  }
  if (from.accepttime() != 0) {
    _internal_set_accepttime(from._internal_accepttime());
  }
  if (from.closetime() != 0) {
    _internal_set_closetime(from._internal_closetime());
  }
  if (from.dealvolume() != 0) {
    _internal_set_dealvolume(from._internal_dealvolume());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
}

void TradeOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.TradeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeOrder::CopyFrom(const TradeOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.TradeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeOrder::IsInitialized() const {
  return true;
}

void TradeOrder::InternalSwap(TradeOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  errdetail_.Swap(&other->errdetail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradeOrder, errcode_)
      + sizeof(TradeOrder::errcode_)
      - PROTOBUF_FIELD_OFFSET(TradeOrder, reqid_)>(
          reinterpret_cast<char*>(&reqid_),
          reinterpret_cast<char*>(&other->reqid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CancelOrder::InitAsDefaultInstance() {
}
class CancelOrder::_Internal {
 public:
};

CancelOrder::CancelOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.CancelOrder)
}
CancelOrder::CancelOrder(const CancelOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_orderid(),
      GetArena());
  }
  reqid_ = from.reqid_;
  // @@protoc_insertion_point(copy_constructor:mam.CancelOrder)
}

void CancelOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelOrder_trade_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reqid_ = 0;
}

CancelOrder::~CancelOrder() {
  // @@protoc_insertion_point(destructor:mam.CancelOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CancelOrder::ArenaDtor(void* object) {
  CancelOrder* _this = reinterpret_cast< CancelOrder* >(object);
  (void)_this;
}
void CancelOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelOrder& CancelOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelOrder_trade_2eproto.base);
  return *internal_default_instance();
}


void CancelOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.CancelOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reqid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 reqId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string orderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.CancelOrder.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.CancelOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reqId = 1;
  if (this->reqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reqid(), target);
  }

  // string orderId = 2;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.CancelOrder.orderId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_orderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.CancelOrder)
  return target;
}

size_t CancelOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.CancelOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderId = 2;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // int32 reqId = 1;
  if (this->reqid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reqid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.CancelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.CancelOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.CancelOrder)
    MergeFrom(*source);
  }
}

void CancelOrder::MergeFrom(const CancelOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.CancelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {
    _internal_set_orderid(from._internal_orderid());
  }
  if (from.reqid() != 0) {
    _internal_set_reqid(from._internal_reqid());
  }
}

void CancelOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.CancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOrder::CopyFrom(const CancelOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.CancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrder::IsInitialized() const {
  return true;
}

void CancelOrder::InternalSwap(CancelOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(reqid_, other->reqid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderMatchResult::InitAsDefaultInstance() {
}
class OrderMatchResult::_Internal {
 public:
};

OrderMatchResult::OrderMatchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.OrderMatchResult)
}
OrderMatchResult::OrderMatchResult(const OrderMatchResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_orderid(),
      GetArena());
  }
  matchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_matchid().empty()) {
    matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_matchid(),
      GetArena());
  }
  ::memcpy(&reqid_, &from.reqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dealvolume_) -
    reinterpret_cast<char*>(&reqid_)) + sizeof(dealvolume_));
  // @@protoc_insertion_point(copy_constructor:mam.OrderMatchResult)
}

void OrderMatchResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderMatchResult_trade_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  matchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&reqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dealvolume_) -
      reinterpret_cast<char*>(&reqid_)) + sizeof(dealvolume_));
}

OrderMatchResult::~OrderMatchResult() {
  // @@protoc_insertion_point(destructor:mam.OrderMatchResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderMatchResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  matchid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderMatchResult::ArenaDtor(void* object) {
  OrderMatchResult* _this = reinterpret_cast< OrderMatchResult* >(object);
  (void)_this;
}
void OrderMatchResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderMatchResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderMatchResult& OrderMatchResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderMatchResult_trade_2eproto.base);
  return *internal_default_instance();
}


void OrderMatchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.OrderMatchResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  matchid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&reqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dealvolume_) -
      reinterpret_cast<char*>(&reqid_)) + sizeof(dealvolume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderMatchResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 reqId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string orderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.OrderMatchResult.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string matchId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_matchid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.OrderMatchResult.matchId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dealPrice = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          dealprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dealVolume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          dealvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderMatchResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.OrderMatchResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reqId = 1;
  if (this->reqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reqid(), target);
  }

  // string orderId = 2;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.OrderMatchResult.orderId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_orderid(), target);
  }

  // string matchId = 3;
  if (this->matchid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_matchid().data(), static_cast<int>(this->_internal_matchid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.OrderMatchResult.matchId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_matchid(), target);
  }

  // uint32 time = 4;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time(), target);
  }

  // int32 dealPrice = 5;
  if (this->dealprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_dealprice(), target);
  }

  // int32 dealVolume = 6;
  if (this->dealvolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_dealvolume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.OrderMatchResult)
  return target;
}

size_t OrderMatchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.OrderMatchResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderId = 2;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // string matchId = 3;
  if (this->matchid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_matchid());
  }

  // int32 reqId = 1;
  if (this->reqid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reqid());
  }

  // uint32 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  // int32 dealPrice = 5;
  if (this->dealprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dealprice());
  }

  // int32 dealVolume = 6;
  if (this->dealvolume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dealvolume());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderMatchResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.OrderMatchResult)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderMatchResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderMatchResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.OrderMatchResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.OrderMatchResult)
    MergeFrom(*source);
  }
}

void OrderMatchResult::MergeFrom(const OrderMatchResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.OrderMatchResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {
    _internal_set_orderid(from._internal_orderid());
  }
  if (from.matchid().size() > 0) {
    _internal_set_matchid(from._internal_matchid());
  }
  if (from.reqid() != 0) {
    _internal_set_reqid(from._internal_reqid());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.dealprice() != 0) {
    _internal_set_dealprice(from._internal_dealprice());
  }
  if (from.dealvolume() != 0) {
    _internal_set_dealvolume(from._internal_dealvolume());
  }
}

void OrderMatchResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.OrderMatchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderMatchResult::CopyFrom(const OrderMatchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.OrderMatchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderMatchResult::IsInitialized() const {
  return true;
}

void OrderMatchResult::InternalSwap(OrderMatchResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  matchid_.Swap(&other->matchid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderMatchResult, dealvolume_)
      + sizeof(OrderMatchResult::dealvolume_)
      - PROTOBUF_FIELD_OFFSET(OrderMatchResult, reqid_)>(
          reinterpret_cast<char*>(&reqid_),
          reinterpret_cast<char*>(&other->reqid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderMatchResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderChangeResult::InitAsDefaultInstance() {
}
class OrderChangeResult::_Internal {
 public:
};

OrderChangeResult::OrderChangeResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.OrderChangeResult)
}
OrderChangeResult::OrderChangeResult(const OrderChangeResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_orderid(),
      GetArena());
  }
  errdetail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errdetail().empty()) {
    errdetail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_errdetail(),
      GetArena());
  }
  ::memcpy(&reqid_, &from.reqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&errcode_) -
    reinterpret_cast<char*>(&reqid_)) + sizeof(errcode_));
  // @@protoc_insertion_point(copy_constructor:mam.OrderChangeResult)
}

void OrderChangeResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderChangeResult_trade_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errdetail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&reqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&reqid_)) + sizeof(errcode_));
}

OrderChangeResult::~OrderChangeResult() {
  // @@protoc_insertion_point(destructor:mam.OrderChangeResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderChangeResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errdetail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderChangeResult::ArenaDtor(void* object) {
  OrderChangeResult* _this = reinterpret_cast< OrderChangeResult* >(object);
  (void)_this;
}
void OrderChangeResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderChangeResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderChangeResult& OrderChangeResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderChangeResult_trade_2eproto.base);
  return *internal_default_instance();
}


void OrderChangeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.OrderChangeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  errdetail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&reqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&reqid_)) + sizeof(errcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderChangeResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 reqId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string orderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.OrderChangeResult.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mam.OrderStatusType status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::mam::OrderStatusType>(val));
        } else goto handle_unusual;
        continue;
      // .mam.TradeOrderErrorCode errCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_errcode(static_cast<::mam::TradeOrderErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // string errDetail = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_errdetail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.OrderChangeResult.errDetail"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderChangeResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.OrderChangeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reqId = 1;
  if (this->reqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reqid(), target);
  }

  // string orderId = 2;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.OrderChangeResult.orderId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_orderid(), target);
  }

  // uint32 time = 3;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time(), target);
  }

  // .mam.OrderStatusType status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  // .mam.TradeOrderErrorCode errCode = 5;
  if (this->errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_errcode(), target);
  }

  // string errDetail = 6;
  if (this->errdetail().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errdetail().data(), static_cast<int>(this->_internal_errdetail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.OrderChangeResult.errDetail");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_errdetail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.OrderChangeResult)
  return target;
}

size_t OrderChangeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.OrderChangeResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderId = 2;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // string errDetail = 6;
  if (this->errdetail().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errdetail());
  }

  // int32 reqId = 1;
  if (this->reqid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reqid());
  }

  // uint32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time());
  }

  // .mam.OrderStatusType status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .mam.TradeOrderErrorCode errCode = 5;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_errcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderChangeResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.OrderChangeResult)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderChangeResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderChangeResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.OrderChangeResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.OrderChangeResult)
    MergeFrom(*source);
  }
}

void OrderChangeResult::MergeFrom(const OrderChangeResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.OrderChangeResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {
    _internal_set_orderid(from._internal_orderid());
  }
  if (from.errdetail().size() > 0) {
    _internal_set_errdetail(from._internal_errdetail());
  }
  if (from.reqid() != 0) {
    _internal_set_reqid(from._internal_reqid());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
}

void OrderChangeResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.OrderChangeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderChangeResult::CopyFrom(const OrderChangeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.OrderChangeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderChangeResult::IsInitialized() const {
  return true;
}

void OrderChangeResult::InternalSwap(OrderChangeResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  errdetail_.Swap(&other->errdetail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderChangeResult, errcode_)
      + sizeof(OrderChangeResult::errcode_)
      - PROTOBUF_FIELD_OFFSET(OrderChangeResult, reqid_)>(
          reinterpret_cast<char*>(&reqid_),
          reinterpret_cast<char*>(&other->reqid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderChangeResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TradeOrderRsp::InitAsDefaultInstance() {
}
class TradeOrderRsp::_Internal {
 public:
};

TradeOrderRsp::TradeOrderRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matches_(arena),
  status_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.TradeOrderRsp)
}
TradeOrderRsp::TradeOrderRsp(const TradeOrderRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matches_(from.matches_),
      status_(from.status_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mam.TradeOrderRsp)
}

void TradeOrderRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeOrderRsp_trade_2eproto.base);
}

TradeOrderRsp::~TradeOrderRsp() {
  // @@protoc_insertion_point(destructor:mam.TradeOrderRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradeOrderRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TradeOrderRsp::ArenaDtor(void* object) {
  TradeOrderRsp* _this = reinterpret_cast< TradeOrderRsp* >(object);
  (void)_this;
}
void TradeOrderRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradeOrderRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeOrderRsp& TradeOrderRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeOrderRsp_trade_2eproto.base);
  return *internal_default_instance();
}


void TradeOrderRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.TradeOrderRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.Clear();
  status_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeOrderRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mam.OrderMatchResult matches = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mam.OrderChangeResult status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeOrderRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.TradeOrderRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mam.OrderMatchResult matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_matches(i), target, stream);
  }

  // repeated .mam.OrderChangeResult status = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_status(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.TradeOrderRsp)
  return target;
}

size_t TradeOrderRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.TradeOrderRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mam.OrderMatchResult matches = 1;
  total_size += 1UL * this->_internal_matches_size();
  for (const auto& msg : this->matches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mam.OrderChangeResult status = 2;
  total_size += 1UL * this->_internal_status_size();
  for (const auto& msg : this->status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeOrderRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.TradeOrderRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeOrderRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeOrderRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.TradeOrderRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.TradeOrderRsp)
    MergeFrom(*source);
  }
}

void TradeOrderRsp::MergeFrom(const TradeOrderRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.TradeOrderRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
  status_.MergeFrom(from.status_);
}

void TradeOrderRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.TradeOrderRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeOrderRsp::CopyFrom(const TradeOrderRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.TradeOrderRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeOrderRsp::IsInitialized() const {
  return true;
}

void TradeOrderRsp::InternalSwap(TradeOrderRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  matches_.InternalSwap(&other->matches_);
  status_.InternalSwap(&other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeOrderRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TradeAccountQry::InitAsDefaultInstance() {
}
class TradeAccountQry::_Internal {
 public:
};

TradeAccountQry::TradeAccountQry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.TradeAccountQry)
}
TradeAccountQry::TradeAccountQry(const TradeAccountQry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:mam.TradeAccountQry)
}

void TradeAccountQry::SharedCtor() {
  accountid_ = 0;
}

TradeAccountQry::~TradeAccountQry() {
  // @@protoc_insertion_point(destructor:mam.TradeAccountQry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradeAccountQry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TradeAccountQry::ArenaDtor(void* object) {
  TradeAccountQry* _this = reinterpret_cast< TradeAccountQry* >(object);
  (void)_this;
}
void TradeAccountQry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradeAccountQry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeAccountQry& TradeAccountQry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeAccountQry_trade_2eproto.base);
  return *internal_default_instance();
}


void TradeAccountQry::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.TradeAccountQry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeAccountQry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 accountId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeAccountQry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.TradeAccountQry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 accountId = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.TradeAccountQry)
  return target;
}

size_t TradeAccountQry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.TradeAccountQry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 accountId = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_accountid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeAccountQry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.TradeAccountQry)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeAccountQry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeAccountQry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.TradeAccountQry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.TradeAccountQry)
    MergeFrom(*source);
  }
}

void TradeAccountQry::MergeFrom(const TradeAccountQry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.TradeAccountQry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
}

void TradeAccountQry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.TradeAccountQry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeAccountQry::CopyFrom(const TradeAccountQry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.TradeAccountQry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeAccountQry::IsInitialized() const {
  return true;
}

void TradeAccountQry::InternalSwap(TradeAccountQry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(accountid_, other->accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeAccountQry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TradeStockPosition::InitAsDefaultInstance() {
}
class TradeStockPosition::_Internal {
 public:
};

TradeStockPosition::TradeStockPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.TradeStockPosition)
}
TradeStockPosition::TradeStockPosition(const TradeStockPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  quantity_ = from.quantity_;
  // @@protoc_insertion_point(copy_constructor:mam.TradeStockPosition)
}

void TradeStockPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeStockPosition_trade_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quantity_ = 0;
}

TradeStockPosition::~TradeStockPosition() {
  // @@protoc_insertion_point(destructor:mam.TradeStockPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradeStockPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TradeStockPosition::ArenaDtor(void* object) {
  TradeStockPosition* _this = reinterpret_cast< TradeStockPosition* >(object);
  (void)_this;
}
void TradeStockPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradeStockPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeStockPosition& TradeStockPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeStockPosition_trade_2eproto.base);
  return *internal_default_instance();
}


void TradeStockPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.TradeStockPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  quantity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeStockPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.TradeStockPosition.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeStockPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.TradeStockPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.TradeStockPosition.symbol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_symbol(), target);
  }

  // int32 quantity = 2;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.TradeStockPosition)
  return target;
}

size_t TradeStockPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.TradeStockPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // int32 quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quantity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeStockPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.TradeStockPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeStockPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeStockPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.TradeStockPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.TradeStockPosition)
    MergeFrom(*source);
  }
}

void TradeStockPosition::MergeFrom(const TradeStockPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.TradeStockPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
}

void TradeStockPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.TradeStockPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeStockPosition::CopyFrom(const TradeStockPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.TradeStockPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeStockPosition::IsInitialized() const {
  return true;
}

void TradeStockPosition::InternalSwap(TradeStockPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(quantity_, other->quantity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeStockPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TradeAccountRsp::InitAsDefaultInstance() {
}
class TradeAccountRsp::_Internal {
 public:
};

TradeAccountRsp::TradeAccountRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  positions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.TradeAccountRsp)
}
TradeAccountRsp::TradeAccountRsp(const TradeAccountRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host(),
      GetArena());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&balance_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(balance_));
  // @@protoc_insertion_point(copy_constructor:mam.TradeAccountRsp)
}

void TradeAccountRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeAccountRsp_trade_2eproto.base);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&balance_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(balance_));
}

TradeAccountRsp::~TradeAccountRsp() {
  // @@protoc_insertion_point(destructor:mam.TradeAccountRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradeAccountRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TradeAccountRsp::ArenaDtor(void* object) {
  TradeAccountRsp* _this = reinterpret_cast< TradeAccountRsp* >(object);
  (void)_this;
}
void TradeAccountRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradeAccountRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeAccountRsp& TradeAccountRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeAccountRsp_trade_2eproto.base);
  return *internal_default_instance();
}


void TradeAccountRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.TradeAccountRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&balance_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(balance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeAccountRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 accountId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.TradeAccountRsp.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mam.TradeAccountStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::mam::TradeAccountStatus>(val));
        } else goto handle_unusual;
        continue;
      // double balance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .mam.TradeStockPosition positions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeAccountRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.TradeAccountRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 accountId = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_accountid(), target);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.TradeAccountRsp.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  // .mam.TradeAccountStatus status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // double balance = 4;
  if (!(this->balance() <= 0 && this->balance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_balance(), target);
  }

  // repeated .mam.TradeStockPosition positions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_positions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_positions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.TradeAccountRsp)
  return target;
}

size_t TradeAccountRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.TradeAccountRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mam.TradeStockPosition positions = 5;
  total_size += 1UL * this->_internal_positions_size();
  for (const auto& msg : this->positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // int32 accountId = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_accountid());
  }

  // .mam.TradeAccountStatus status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // double balance = 4;
  if (!(this->balance() <= 0 && this->balance() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeAccountRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.TradeAccountRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeAccountRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeAccountRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.TradeAccountRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.TradeAccountRsp)
    MergeFrom(*source);
  }
}

void TradeAccountRsp::MergeFrom(const TradeAccountRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.TradeAccountRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
  if (from.host().size() > 0) {
    _internal_set_host(from._internal_host());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (!(from.balance() <= 0 && from.balance() >= 0)) {
    _internal_set_balance(from._internal_balance());
  }
}

void TradeAccountRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.TradeAccountRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeAccountRsp::CopyFrom(const TradeAccountRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.TradeAccountRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeAccountRsp::IsInitialized() const {
  return true;
}

void TradeAccountRsp::InternalSwap(TradeAccountRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  positions_.InternalSwap(&other->positions_);
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradeAccountRsp, balance_)
      + sizeof(TradeAccountRsp::balance_)
      - PROTOBUF_FIELD_OFFSET(TradeAccountRsp, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeAccountRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mam::TradeOrder* Arena::CreateMaybeMessage< ::mam::TradeOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::TradeOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::CancelOrder* Arena::CreateMaybeMessage< ::mam::CancelOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::CancelOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::OrderMatchResult* Arena::CreateMaybeMessage< ::mam::OrderMatchResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::OrderMatchResult >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::OrderChangeResult* Arena::CreateMaybeMessage< ::mam::OrderChangeResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::OrderChangeResult >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::TradeOrderRsp* Arena::CreateMaybeMessage< ::mam::TradeOrderRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::TradeOrderRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::TradeAccountQry* Arena::CreateMaybeMessage< ::mam::TradeAccountQry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::TradeAccountQry >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::TradeStockPosition* Arena::CreateMaybeMessage< ::mam::TradeStockPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::TradeStockPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::TradeAccountRsp* Arena::CreateMaybeMessage< ::mam::TradeAccountRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::TradeAccountRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
