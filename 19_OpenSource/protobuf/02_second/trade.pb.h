// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trade_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trade_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trade_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trade_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trade_2eproto;
namespace mam {
class CancelOrder;
class CancelOrderDefaultTypeInternal;
extern CancelOrderDefaultTypeInternal _CancelOrder_default_instance_;
class OrderChangeResult;
class OrderChangeResultDefaultTypeInternal;
extern OrderChangeResultDefaultTypeInternal _OrderChangeResult_default_instance_;
class OrderMatchResult;
class OrderMatchResultDefaultTypeInternal;
extern OrderMatchResultDefaultTypeInternal _OrderMatchResult_default_instance_;
class TradeAccountQry;
class TradeAccountQryDefaultTypeInternal;
extern TradeAccountQryDefaultTypeInternal _TradeAccountQry_default_instance_;
class TradeAccountRsp;
class TradeAccountRspDefaultTypeInternal;
extern TradeAccountRspDefaultTypeInternal _TradeAccountRsp_default_instance_;
class TradeOrder;
class TradeOrderDefaultTypeInternal;
extern TradeOrderDefaultTypeInternal _TradeOrder_default_instance_;
class TradeOrderRsp;
class TradeOrderRspDefaultTypeInternal;
extern TradeOrderRspDefaultTypeInternal _TradeOrderRsp_default_instance_;
class TradeStockPosition;
class TradeStockPositionDefaultTypeInternal;
extern TradeStockPositionDefaultTypeInternal _TradeStockPosition_default_instance_;
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> ::mam::CancelOrder* Arena::CreateMaybeMessage<::mam::CancelOrder>(Arena*);
template<> ::mam::OrderChangeResult* Arena::CreateMaybeMessage<::mam::OrderChangeResult>(Arena*);
template<> ::mam::OrderMatchResult* Arena::CreateMaybeMessage<::mam::OrderMatchResult>(Arena*);
template<> ::mam::TradeAccountQry* Arena::CreateMaybeMessage<::mam::TradeAccountQry>(Arena*);
template<> ::mam::TradeAccountRsp* Arena::CreateMaybeMessage<::mam::TradeAccountRsp>(Arena*);
template<> ::mam::TradeOrder* Arena::CreateMaybeMessage<::mam::TradeOrder>(Arena*);
template<> ::mam::TradeOrderRsp* Arena::CreateMaybeMessage<::mam::TradeOrderRsp>(Arena*);
template<> ::mam::TradeStockPosition* Arena::CreateMaybeMessage<::mam::TradeStockPosition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mam {

enum OrderStatusType : int {
  OrderStatus_None = 0,
  OrderStatus_Accepted = 1,
  OrderStatus_TotalMatch = 2,
  OrderStatus_PartialRemoved = 3,
  OrderStatus_TotalRemoved = 4,
  OrderStatus_Fail = 5,
  OrderStatus_Removing = 6,
  OrderStatus_Pending = 7,
  OrderStatus_PartialMatch = 8,
  OrderStatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OrderStatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OrderStatusType_IsValid(int value);
constexpr OrderStatusType OrderStatusType_MIN = OrderStatus_None;
constexpr OrderStatusType OrderStatusType_MAX = OrderStatus_PartialMatch;
constexpr int OrderStatusType_ARRAYSIZE = OrderStatusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderStatusType_descriptor();
template<typename T>
inline const std::string& OrderStatusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderStatusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderStatusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderStatusType_descriptor(), enum_t_value);
}
inline bool OrderStatusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderStatusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderStatusType>(
    OrderStatusType_descriptor(), name, value);
}
enum TradeAccountStatus : int {
  Connected = 0,
  Unconnected = 1,
  ConnectedAndTradable = 2,
  ConnectedAndUntradable = 3,
  TradeAccountStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TradeAccountStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TradeAccountStatus_IsValid(int value);
constexpr TradeAccountStatus TradeAccountStatus_MIN = Connected;
constexpr TradeAccountStatus TradeAccountStatus_MAX = ConnectedAndUntradable;
constexpr int TradeAccountStatus_ARRAYSIZE = TradeAccountStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeAccountStatus_descriptor();
template<typename T>
inline const std::string& TradeAccountStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TradeAccountStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TradeAccountStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TradeAccountStatus_descriptor(), enum_t_value);
}
inline bool TradeAccountStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TradeAccountStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TradeAccountStatus>(
    TradeAccountStatus_descriptor(), name, value);
}
enum TradeOrderErrorCode : int {
  JErrorType_None = 0,
  JErrorType_TooHighFrequency = 100,
  JErrorType_OrderNotFound = 101,
  JErrorType_NotTradingTime = 102,
  JErrorType_OverHighOrLow = 103,
  JErrorType_InvalidVol = 104,
  JErrorType_Cannotselfdeal = 105,
  JErrorType_CannotWithDrawn = 106,
  JErrorType_NotEnoughLendingAmoutOrCaptial = 107,
  JErrorType_StopTrade = 108,
  JErrorType_NoSuchTradeType = 109,
  JErrorType_RiskCantTrade = 110,
  JErrorType_StrategyRiskCantWithDrawn = 111,
  JErrorType_WithoutthisAuthority = 112,
  JErrorType_InvalidCode = 113,
  JErrorType_NoPisitionToClose = 114,
  JErrorType_InvalidAction = 115,
  JErrorType_NotSetTestBack = 116,
  JErrorType_NotAvailableAccount = 117,
  JErrorType_CenterServerError = 118,
  JErrorType_NoPriority = 119,
  JErrorType_NoAccountAvaliable = 120,
  JErrorType_NotEnoughVolumeTobeUsed = 121,
  JErrorType_NtimeDelay = 122,
  JErrorType_PositionCheckFailed = 123,
  TradeOrderErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TradeOrderErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TradeOrderErrorCode_IsValid(int value);
constexpr TradeOrderErrorCode TradeOrderErrorCode_MIN = JErrorType_None;
constexpr TradeOrderErrorCode TradeOrderErrorCode_MAX = JErrorType_PositionCheckFailed;
constexpr int TradeOrderErrorCode_ARRAYSIZE = TradeOrderErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeOrderErrorCode_descriptor();
template<typename T>
inline const std::string& TradeOrderErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TradeOrderErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TradeOrderErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TradeOrderErrorCode_descriptor(), enum_t_value);
}
inline bool TradeOrderErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TradeOrderErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TradeOrderErrorCode>(
    TradeOrderErrorCode_descriptor(), name, value);
}
// ===================================================================

class TradeOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.TradeOrder) */ {
 public:
  inline TradeOrder() : TradeOrder(nullptr) {}
  virtual ~TradeOrder();

  TradeOrder(const TradeOrder& from);
  TradeOrder(TradeOrder&& from) noexcept
    : TradeOrder() {
    *this = ::std::move(from);
  }

  inline TradeOrder& operator=(const TradeOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeOrder& operator=(TradeOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeOrder* internal_default_instance() {
    return reinterpret_cast<const TradeOrder*>(
               &_TradeOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TradeOrder& a, TradeOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeOrder* New() const final {
    return CreateMaybeMessage<TradeOrder>(nullptr);
  }

  TradeOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeOrder& from);
  void MergeFrom(const TradeOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.TradeOrder";
  }
  protected:
  explicit TradeOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trade_2eproto);
    return ::descriptor_table_trade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kTagFieldNumber = 10,
    kErrDetailFieldNumber = 21,
    kReqIdFieldNumber = 1,
    kOrderTypeFieldNumber = 4,
    kTradeTypeFieldNumber = 5,
    kOrderPriceFieldNumber = 6,
    kOrderVolumeFieldNumber = 7,
    kNTimeFieldNumber = 8,
    kAccountIdFieldNumber = 9,
    kTimeoutFieldNumber = 11,
    kCreateTimeFieldNumber = 13,
    kSubmitTimeFieldNumber = 14,
    kForceFieldNumber = 12,
    kDealPriceFieldNumber = 17,
    kAcceptTimeFieldNumber = 15,
    kCloseTimeFieldNumber = 16,
    kDealVolumeFieldNumber = 18,
    kStatusFieldNumber = 19,
    kErrCodeFieldNumber = 20,
  };
  // string orderId = 2;
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // string symbol = 3;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string tag = 10;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // string errDetail = 21;
  void clear_errdetail();
  const std::string& errdetail() const;
  void set_errdetail(const std::string& value);
  void set_errdetail(std::string&& value);
  void set_errdetail(const char* value);
  void set_errdetail(const char* value, size_t size);
  std::string* mutable_errdetail();
  std::string* release_errdetail();
  void set_allocated_errdetail(std::string* errdetail);
  private:
  const std::string& _internal_errdetail() const;
  void _internal_set_errdetail(const std::string& value);
  std::string* _internal_mutable_errdetail();
  public:

  // int32 reqId = 1;
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 orderType = 4;
  void clear_ordertype();
  ::PROTOBUF_NAMESPACE_ID::int32 ordertype() const;
  void set_ordertype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ordertype() const;
  void _internal_set_ordertype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tradeType = 5;
  void clear_tradetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tradetype() const;
  void set_tradetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tradetype() const;
  void _internal_set_tradetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 orderPrice = 6;
  void clear_orderprice();
  ::PROTOBUF_NAMESPACE_ID::int32 orderprice() const;
  void set_orderprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_orderprice() const;
  void _internal_set_orderprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 orderVolume = 7;
  void clear_ordervolume();
  ::PROTOBUF_NAMESPACE_ID::int32 ordervolume() const;
  void set_ordervolume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ordervolume() const;
  void _internal_set_ordervolume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nTime = 8;
  void clear_ntime();
  ::PROTOBUF_NAMESPACE_ID::int32 ntime() const;
  void set_ntime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ntime() const;
  void _internal_set_ntime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 accountId = 9;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::int32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 timeout = 11;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 createTime = 13;
  void clear_createtime();
  ::PROTOBUF_NAMESPACE_ID::int64 createtime() const;
  void set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createtime() const;
  void _internal_set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 submitTime = 14;
  void clear_submittime();
  ::PROTOBUF_NAMESPACE_ID::int64 submittime() const;
  void set_submittime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_submittime() const;
  void _internal_set_submittime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool force = 12;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // int32 dealPrice = 17;
  void clear_dealprice();
  ::PROTOBUF_NAMESPACE_ID::int32 dealprice() const;
  void set_dealprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dealprice() const;
  void _internal_set_dealprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 acceptTime = 15;
  void clear_accepttime();
  ::PROTOBUF_NAMESPACE_ID::int64 accepttime() const;
  void set_accepttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_accepttime() const;
  void _internal_set_accepttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 closeTime = 16;
  void clear_closetime();
  ::PROTOBUF_NAMESPACE_ID::int64 closetime() const;
  void set_closetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_closetime() const;
  void _internal_set_closetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 dealVolume = 18;
  void clear_dealvolume();
  ::PROTOBUF_NAMESPACE_ID::int32 dealvolume() const;
  void set_dealvolume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dealvolume() const;
  void _internal_set_dealvolume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .mam.OrderStatusType status = 19;
  void clear_status();
  ::mam::OrderStatusType status() const;
  void set_status(::mam::OrderStatusType value);
  private:
  ::mam::OrderStatusType _internal_status() const;
  void _internal_set_status(::mam::OrderStatusType value);
  public:

  // .mam.TradeOrderErrorCode errCode = 20;
  void clear_errcode();
  ::mam::TradeOrderErrorCode errcode() const;
  void set_errcode(::mam::TradeOrderErrorCode value);
  private:
  ::mam::TradeOrderErrorCode _internal_errcode() const;
  void _internal_set_errcode(::mam::TradeOrderErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:mam.TradeOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errdetail_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ordertype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tradetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 orderprice_;
  ::PROTOBUF_NAMESPACE_ID::int32 ordervolume_;
  ::PROTOBUF_NAMESPACE_ID::int32 ntime_;
  ::PROTOBUF_NAMESPACE_ID::int32 accountid_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeout_;
  ::PROTOBUF_NAMESPACE_ID::int64 createtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 submittime_;
  bool force_;
  ::PROTOBUF_NAMESPACE_ID::int32 dealprice_;
  ::PROTOBUF_NAMESPACE_ID::int64 accepttime_;
  ::PROTOBUF_NAMESPACE_ID::int64 closetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 dealvolume_;
  int status_;
  int errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class CancelOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.CancelOrder) */ {
 public:
  inline CancelOrder() : CancelOrder(nullptr) {}
  virtual ~CancelOrder();

  CancelOrder(const CancelOrder& from);
  CancelOrder(CancelOrder&& from) noexcept
    : CancelOrder() {
    *this = ::std::move(from);
  }

  inline CancelOrder& operator=(const CancelOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelOrder& operator=(CancelOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelOrder* internal_default_instance() {
    return reinterpret_cast<const CancelOrder*>(
               &_CancelOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CancelOrder& a, CancelOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelOrder* New() const final {
    return CreateMaybeMessage<CancelOrder>(nullptr);
  }

  CancelOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelOrder& from);
  void MergeFrom(const CancelOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.CancelOrder";
  }
  protected:
  explicit CancelOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trade_2eproto);
    return ::descriptor_table_trade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 2,
    kReqIdFieldNumber = 1,
  };
  // string orderId = 2;
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // int32 reqId = 1;
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.CancelOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class OrderMatchResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.OrderMatchResult) */ {
 public:
  inline OrderMatchResult() : OrderMatchResult(nullptr) {}
  virtual ~OrderMatchResult();

  OrderMatchResult(const OrderMatchResult& from);
  OrderMatchResult(OrderMatchResult&& from) noexcept
    : OrderMatchResult() {
    *this = ::std::move(from);
  }

  inline OrderMatchResult& operator=(const OrderMatchResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderMatchResult& operator=(OrderMatchResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderMatchResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderMatchResult* internal_default_instance() {
    return reinterpret_cast<const OrderMatchResult*>(
               &_OrderMatchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OrderMatchResult& a, OrderMatchResult& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderMatchResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderMatchResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderMatchResult* New() const final {
    return CreateMaybeMessage<OrderMatchResult>(nullptr);
  }

  OrderMatchResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderMatchResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderMatchResult& from);
  void MergeFrom(const OrderMatchResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderMatchResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.OrderMatchResult";
  }
  protected:
  explicit OrderMatchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trade_2eproto);
    return ::descriptor_table_trade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 2,
    kMatchIdFieldNumber = 3,
    kReqIdFieldNumber = 1,
    kTimeFieldNumber = 4,
    kDealPriceFieldNumber = 5,
    kDealVolumeFieldNumber = 6,
  };
  // string orderId = 2;
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // string matchId = 3;
  void clear_matchid();
  const std::string& matchid() const;
  void set_matchid(const std::string& value);
  void set_matchid(std::string&& value);
  void set_matchid(const char* value);
  void set_matchid(const char* value, size_t size);
  std::string* mutable_matchid();
  std::string* release_matchid();
  void set_allocated_matchid(std::string* matchid);
  private:
  const std::string& _internal_matchid() const;
  void _internal_set_matchid(const std::string& value);
  std::string* _internal_mutable_matchid();
  public:

  // int32 reqId = 1;
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 dealPrice = 5;
  void clear_dealprice();
  ::PROTOBUF_NAMESPACE_ID::int32 dealprice() const;
  void set_dealprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dealprice() const;
  void _internal_set_dealprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dealVolume = 6;
  void clear_dealvolume();
  ::PROTOBUF_NAMESPACE_ID::int32 dealvolume() const;
  void set_dealvolume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dealvolume() const;
  void _internal_set_dealvolume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.OrderMatchResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matchid_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 dealprice_;
  ::PROTOBUF_NAMESPACE_ID::int32 dealvolume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class OrderChangeResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.OrderChangeResult) */ {
 public:
  inline OrderChangeResult() : OrderChangeResult(nullptr) {}
  virtual ~OrderChangeResult();

  OrderChangeResult(const OrderChangeResult& from);
  OrderChangeResult(OrderChangeResult&& from) noexcept
    : OrderChangeResult() {
    *this = ::std::move(from);
  }

  inline OrderChangeResult& operator=(const OrderChangeResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderChangeResult& operator=(OrderChangeResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderChangeResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderChangeResult* internal_default_instance() {
    return reinterpret_cast<const OrderChangeResult*>(
               &_OrderChangeResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OrderChangeResult& a, OrderChangeResult& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderChangeResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderChangeResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderChangeResult* New() const final {
    return CreateMaybeMessage<OrderChangeResult>(nullptr);
  }

  OrderChangeResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderChangeResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderChangeResult& from);
  void MergeFrom(const OrderChangeResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderChangeResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.OrderChangeResult";
  }
  protected:
  explicit OrderChangeResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trade_2eproto);
    return ::descriptor_table_trade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 2,
    kErrDetailFieldNumber = 6,
    kReqIdFieldNumber = 1,
    kTimeFieldNumber = 3,
    kStatusFieldNumber = 4,
    kErrCodeFieldNumber = 5,
  };
  // string orderId = 2;
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // string errDetail = 6;
  void clear_errdetail();
  const std::string& errdetail() const;
  void set_errdetail(const std::string& value);
  void set_errdetail(std::string&& value);
  void set_errdetail(const char* value);
  void set_errdetail(const char* value, size_t size);
  std::string* mutable_errdetail();
  std::string* release_errdetail();
  void set_allocated_errdetail(std::string* errdetail);
  private:
  const std::string& _internal_errdetail() const;
  void _internal_set_errdetail(const std::string& value);
  std::string* _internal_mutable_errdetail();
  public:

  // int32 reqId = 1;
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .mam.OrderStatusType status = 4;
  void clear_status();
  ::mam::OrderStatusType status() const;
  void set_status(::mam::OrderStatusType value);
  private:
  ::mam::OrderStatusType _internal_status() const;
  void _internal_set_status(::mam::OrderStatusType value);
  public:

  // .mam.TradeOrderErrorCode errCode = 5;
  void clear_errcode();
  ::mam::TradeOrderErrorCode errcode() const;
  void set_errcode(::mam::TradeOrderErrorCode value);
  private:
  ::mam::TradeOrderErrorCode _internal_errcode() const;
  void _internal_set_errcode(::mam::TradeOrderErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:mam.OrderChangeResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errdetail_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  int status_;
  int errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class TradeOrderRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.TradeOrderRsp) */ {
 public:
  inline TradeOrderRsp() : TradeOrderRsp(nullptr) {}
  virtual ~TradeOrderRsp();

  TradeOrderRsp(const TradeOrderRsp& from);
  TradeOrderRsp(TradeOrderRsp&& from) noexcept
    : TradeOrderRsp() {
    *this = ::std::move(from);
  }

  inline TradeOrderRsp& operator=(const TradeOrderRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeOrderRsp& operator=(TradeOrderRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeOrderRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeOrderRsp* internal_default_instance() {
    return reinterpret_cast<const TradeOrderRsp*>(
               &_TradeOrderRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TradeOrderRsp& a, TradeOrderRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeOrderRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeOrderRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeOrderRsp* New() const final {
    return CreateMaybeMessage<TradeOrderRsp>(nullptr);
  }

  TradeOrderRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeOrderRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeOrderRsp& from);
  void MergeFrom(const TradeOrderRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeOrderRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.TradeOrderRsp";
  }
  protected:
  explicit TradeOrderRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trade_2eproto);
    return ::descriptor_table_trade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // repeated .mam.OrderMatchResult matches = 1;
  int matches_size() const;
  private:
  int _internal_matches_size() const;
  public:
  void clear_matches();
  ::mam::OrderMatchResult* mutable_matches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::OrderMatchResult >*
      mutable_matches();
  private:
  const ::mam::OrderMatchResult& _internal_matches(int index) const;
  ::mam::OrderMatchResult* _internal_add_matches();
  public:
  const ::mam::OrderMatchResult& matches(int index) const;
  ::mam::OrderMatchResult* add_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::OrderMatchResult >&
      matches() const;

  // repeated .mam.OrderChangeResult status = 2;
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  ::mam::OrderChangeResult* mutable_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::OrderChangeResult >*
      mutable_status();
  private:
  const ::mam::OrderChangeResult& _internal_status(int index) const;
  ::mam::OrderChangeResult* _internal_add_status();
  public:
  const ::mam::OrderChangeResult& status(int index) const;
  ::mam::OrderChangeResult* add_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::OrderChangeResult >&
      status() const;

  // @@protoc_insertion_point(class_scope:mam.TradeOrderRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::OrderMatchResult > matches_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::OrderChangeResult > status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class TradeAccountQry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.TradeAccountQry) */ {
 public:
  inline TradeAccountQry() : TradeAccountQry(nullptr) {}
  virtual ~TradeAccountQry();

  TradeAccountQry(const TradeAccountQry& from);
  TradeAccountQry(TradeAccountQry&& from) noexcept
    : TradeAccountQry() {
    *this = ::std::move(from);
  }

  inline TradeAccountQry& operator=(const TradeAccountQry& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeAccountQry& operator=(TradeAccountQry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeAccountQry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeAccountQry* internal_default_instance() {
    return reinterpret_cast<const TradeAccountQry*>(
               &_TradeAccountQry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TradeAccountQry& a, TradeAccountQry& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeAccountQry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeAccountQry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeAccountQry* New() const final {
    return CreateMaybeMessage<TradeAccountQry>(nullptr);
  }

  TradeAccountQry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeAccountQry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeAccountQry& from);
  void MergeFrom(const TradeAccountQry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeAccountQry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.TradeAccountQry";
  }
  protected:
  explicit TradeAccountQry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trade_2eproto);
    return ::descriptor_table_trade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // int32 accountId = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::int32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.TradeAccountQry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 accountid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class TradeStockPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.TradeStockPosition) */ {
 public:
  inline TradeStockPosition() : TradeStockPosition(nullptr) {}
  virtual ~TradeStockPosition();

  TradeStockPosition(const TradeStockPosition& from);
  TradeStockPosition(TradeStockPosition&& from) noexcept
    : TradeStockPosition() {
    *this = ::std::move(from);
  }

  inline TradeStockPosition& operator=(const TradeStockPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeStockPosition& operator=(TradeStockPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeStockPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeStockPosition* internal_default_instance() {
    return reinterpret_cast<const TradeStockPosition*>(
               &_TradeStockPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TradeStockPosition& a, TradeStockPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeStockPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeStockPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeStockPosition* New() const final {
    return CreateMaybeMessage<TradeStockPosition>(nullptr);
  }

  TradeStockPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeStockPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeStockPosition& from);
  void MergeFrom(const TradeStockPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeStockPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.TradeStockPosition";
  }
  protected:
  explicit TradeStockPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trade_2eproto);
    return ::descriptor_table_trade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kQuantityFieldNumber = 2,
  };
  // string symbol = 1;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // int32 quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::int32 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.TradeStockPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// -------------------------------------------------------------------

class TradeAccountRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.TradeAccountRsp) */ {
 public:
  inline TradeAccountRsp() : TradeAccountRsp(nullptr) {}
  virtual ~TradeAccountRsp();

  TradeAccountRsp(const TradeAccountRsp& from);
  TradeAccountRsp(TradeAccountRsp&& from) noexcept
    : TradeAccountRsp() {
    *this = ::std::move(from);
  }

  inline TradeAccountRsp& operator=(const TradeAccountRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeAccountRsp& operator=(TradeAccountRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeAccountRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeAccountRsp* internal_default_instance() {
    return reinterpret_cast<const TradeAccountRsp*>(
               &_TradeAccountRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TradeAccountRsp& a, TradeAccountRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeAccountRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeAccountRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeAccountRsp* New() const final {
    return CreateMaybeMessage<TradeAccountRsp>(nullptr);
  }

  TradeAccountRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeAccountRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeAccountRsp& from);
  void MergeFrom(const TradeAccountRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeAccountRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.TradeAccountRsp";
  }
  protected:
  explicit TradeAccountRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trade_2eproto);
    return ::descriptor_table_trade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionsFieldNumber = 5,
    kHostFieldNumber = 2,
    kAccountIdFieldNumber = 1,
    kStatusFieldNumber = 3,
    kBalanceFieldNumber = 4,
  };
  // repeated .mam.TradeStockPosition positions = 5;
  int positions_size() const;
  private:
  int _internal_positions_size() const;
  public:
  void clear_positions();
  ::mam::TradeStockPosition* mutable_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::TradeStockPosition >*
      mutable_positions();
  private:
  const ::mam::TradeStockPosition& _internal_positions(int index) const;
  ::mam::TradeStockPosition* _internal_add_positions();
  public:
  const ::mam::TradeStockPosition& positions(int index) const;
  ::mam::TradeStockPosition* add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::TradeStockPosition >&
      positions() const;

  // string host = 2;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // int32 accountId = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::int32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .mam.TradeAccountStatus status = 3;
  void clear_status();
  ::mam::TradeAccountStatus status() const;
  void set_status(::mam::TradeAccountStatus value);
  private:
  ::mam::TradeAccountStatus _internal_status() const;
  void _internal_set_status(::mam::TradeAccountStatus value);
  public:

  // double balance = 4;
  void clear_balance();
  double balance() const;
  void set_balance(double value);
  private:
  double _internal_balance() const;
  void _internal_set_balance(double value);
  public:

  // @@protoc_insertion_point(class_scope:mam.TradeAccountRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::TradeStockPosition > positions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::int32 accountid_;
  int status_;
  double balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TradeOrder

// int32 reqId = 1;
inline void TradeOrder::clear_reqid() {
  reqid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::reqid() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.reqId)
  return _internal_reqid();
}
inline void TradeOrder::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reqid_ = value;
}
inline void TradeOrder::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.reqId)
}

// string orderId = 2;
inline void TradeOrder::clear_orderid() {
  orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeOrder::orderid() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.orderId)
  return _internal_orderid();
}
inline void TradeOrder::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.orderId)
}
inline std::string* TradeOrder::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:mam.TradeOrder.orderId)
  return _internal_mutable_orderid();
}
inline const std::string& TradeOrder::_internal_orderid() const {
  return orderid_.Get();
}
inline void TradeOrder::_internal_set_orderid(const std::string& value) {
  
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeOrder::set_orderid(std::string&& value) {
  
  orderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.TradeOrder.orderId)
}
inline void TradeOrder::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.TradeOrder.orderId)
}
inline void TradeOrder::set_orderid(const char* value,
    size_t size) {
  
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.TradeOrder.orderId)
}
inline std::string* TradeOrder::_internal_mutable_orderid() {
  
  return orderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeOrder::release_orderid() {
  // @@protoc_insertion_point(field_release:mam.TradeOrder.orderId)
  return orderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeOrder::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.TradeOrder.orderId)
}

// string symbol = 3;
inline void TradeOrder::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeOrder::symbol() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.symbol)
  return _internal_symbol();
}
inline void TradeOrder::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.symbol)
}
inline std::string* TradeOrder::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:mam.TradeOrder.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& TradeOrder::_internal_symbol() const {
  return symbol_.Get();
}
inline void TradeOrder::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeOrder::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.TradeOrder.symbol)
}
inline void TradeOrder::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.TradeOrder.symbol)
}
inline void TradeOrder::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.TradeOrder.symbol)
}
inline std::string* TradeOrder::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeOrder::release_symbol() {
  // @@protoc_insertion_point(field_release:mam.TradeOrder.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeOrder::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.TradeOrder.symbol)
}

// int32 orderType = 4;
inline void TradeOrder::clear_ordertype() {
  ordertype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_ordertype() const {
  return ordertype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::ordertype() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.orderType)
  return _internal_ordertype();
}
inline void TradeOrder::_internal_set_ordertype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ordertype_ = value;
}
inline void TradeOrder::set_ordertype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ordertype(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.orderType)
}

// int32 tradeType = 5;
inline void TradeOrder::clear_tradetype() {
  tradetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_tradetype() const {
  return tradetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::tradetype() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.tradeType)
  return _internal_tradetype();
}
inline void TradeOrder::_internal_set_tradetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tradetype_ = value;
}
inline void TradeOrder::set_tradetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tradetype(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.tradeType)
}

// int32 orderPrice = 6;
inline void TradeOrder::clear_orderprice() {
  orderprice_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_orderprice() const {
  return orderprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::orderprice() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.orderPrice)
  return _internal_orderprice();
}
inline void TradeOrder::_internal_set_orderprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  orderprice_ = value;
}
inline void TradeOrder::set_orderprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_orderprice(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.orderPrice)
}

// int32 orderVolume = 7;
inline void TradeOrder::clear_ordervolume() {
  ordervolume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_ordervolume() const {
  return ordervolume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::ordervolume() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.orderVolume)
  return _internal_ordervolume();
}
inline void TradeOrder::_internal_set_ordervolume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ordervolume_ = value;
}
inline void TradeOrder::set_ordervolume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ordervolume(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.orderVolume)
}

// int32 nTime = 8;
inline void TradeOrder::clear_ntime() {
  ntime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_ntime() const {
  return ntime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::ntime() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.nTime)
  return _internal_ntime();
}
inline void TradeOrder::_internal_set_ntime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ntime_ = value;
}
inline void TradeOrder::set_ntime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ntime(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.nTime)
}

// int32 accountId = 9;
inline void TradeOrder::clear_accountid() {
  accountid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::accountid() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.accountId)
  return _internal_accountid();
}
inline void TradeOrder::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  accountid_ = value;
}
inline void TradeOrder::set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.accountId)
}

// string tag = 10;
inline void TradeOrder::clear_tag() {
  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeOrder::tag() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.tag)
  return _internal_tag();
}
inline void TradeOrder::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.tag)
}
inline std::string* TradeOrder::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:mam.TradeOrder.tag)
  return _internal_mutable_tag();
}
inline const std::string& TradeOrder::_internal_tag() const {
  return tag_.Get();
}
inline void TradeOrder::_internal_set_tag(const std::string& value) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeOrder::set_tag(std::string&& value) {
  
  tag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.TradeOrder.tag)
}
inline void TradeOrder::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.TradeOrder.tag)
}
inline void TradeOrder::set_tag(const char* value,
    size_t size) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.TradeOrder.tag)
}
inline std::string* TradeOrder::_internal_mutable_tag() {
  
  return tag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeOrder::release_tag() {
  // @@protoc_insertion_point(field_release:mam.TradeOrder.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeOrder::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.TradeOrder.tag)
}

// int32 timeout = 11;
inline void TradeOrder::clear_timeout() {
  timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::timeout() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.timeout)
  return _internal_timeout();
}
inline void TradeOrder::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeout_ = value;
}
inline void TradeOrder::set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.timeout)
}

// bool force = 12;
inline void TradeOrder::clear_force() {
  force_ = false;
}
inline bool TradeOrder::_internal_force() const {
  return force_;
}
inline bool TradeOrder::force() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.force)
  return _internal_force();
}
inline void TradeOrder::_internal_set_force(bool value) {
  
  force_ = value;
}
inline void TradeOrder::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.force)
}

// int64 createTime = 13;
inline void TradeOrder::clear_createtime() {
  createtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::_internal_createtime() const {
  return createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::createtime() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.createTime)
  return _internal_createtime();
}
inline void TradeOrder::_internal_set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createtime_ = value;
}
inline void TradeOrder::set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.createTime)
}

// int64 submitTime = 14;
inline void TradeOrder::clear_submittime() {
  submittime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::_internal_submittime() const {
  return submittime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::submittime() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.submitTime)
  return _internal_submittime();
}
inline void TradeOrder::_internal_set_submittime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  submittime_ = value;
}
inline void TradeOrder::set_submittime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_submittime(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.submitTime)
}

// int64 acceptTime = 15;
inline void TradeOrder::clear_accepttime() {
  accepttime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::_internal_accepttime() const {
  return accepttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::accepttime() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.acceptTime)
  return _internal_accepttime();
}
inline void TradeOrder::_internal_set_accepttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  accepttime_ = value;
}
inline void TradeOrder::set_accepttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_accepttime(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.acceptTime)
}

// int64 closeTime = 16;
inline void TradeOrder::clear_closetime() {
  closetime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::_internal_closetime() const {
  return closetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::closetime() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.closeTime)
  return _internal_closetime();
}
inline void TradeOrder::_internal_set_closetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  closetime_ = value;
}
inline void TradeOrder::set_closetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_closetime(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.closeTime)
}

// int32 dealPrice = 17;
inline void TradeOrder::clear_dealprice() {
  dealprice_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_dealprice() const {
  return dealprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::dealprice() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.dealPrice)
  return _internal_dealprice();
}
inline void TradeOrder::_internal_set_dealprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dealprice_ = value;
}
inline void TradeOrder::set_dealprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dealprice(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.dealPrice)
}

// int32 dealVolume = 18;
inline void TradeOrder::clear_dealvolume() {
  dealvolume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_dealvolume() const {
  return dealvolume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::dealvolume() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.dealVolume)
  return _internal_dealvolume();
}
inline void TradeOrder::_internal_set_dealvolume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dealvolume_ = value;
}
inline void TradeOrder::set_dealvolume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dealvolume(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.dealVolume)
}

// .mam.OrderStatusType status = 19;
inline void TradeOrder::clear_status() {
  status_ = 0;
}
inline ::mam::OrderStatusType TradeOrder::_internal_status() const {
  return static_cast< ::mam::OrderStatusType >(status_);
}
inline ::mam::OrderStatusType TradeOrder::status() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.status)
  return _internal_status();
}
inline void TradeOrder::_internal_set_status(::mam::OrderStatusType value) {
  
  status_ = value;
}
inline void TradeOrder::set_status(::mam::OrderStatusType value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.status)
}

// .mam.TradeOrderErrorCode errCode = 20;
inline void TradeOrder::clear_errcode() {
  errcode_ = 0;
}
inline ::mam::TradeOrderErrorCode TradeOrder::_internal_errcode() const {
  return static_cast< ::mam::TradeOrderErrorCode >(errcode_);
}
inline ::mam::TradeOrderErrorCode TradeOrder::errcode() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.errCode)
  return _internal_errcode();
}
inline void TradeOrder::_internal_set_errcode(::mam::TradeOrderErrorCode value) {
  
  errcode_ = value;
}
inline void TradeOrder::set_errcode(::mam::TradeOrderErrorCode value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.errCode)
}

// string errDetail = 21;
inline void TradeOrder::clear_errdetail() {
  errdetail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeOrder::errdetail() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.errDetail)
  return _internal_errdetail();
}
inline void TradeOrder::set_errdetail(const std::string& value) {
  _internal_set_errdetail(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.errDetail)
}
inline std::string* TradeOrder::mutable_errdetail() {
  // @@protoc_insertion_point(field_mutable:mam.TradeOrder.errDetail)
  return _internal_mutable_errdetail();
}
inline const std::string& TradeOrder::_internal_errdetail() const {
  return errdetail_.Get();
}
inline void TradeOrder::_internal_set_errdetail(const std::string& value) {
  
  errdetail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeOrder::set_errdetail(std::string&& value) {
  
  errdetail_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.TradeOrder.errDetail)
}
inline void TradeOrder::set_errdetail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errdetail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.TradeOrder.errDetail)
}
inline void TradeOrder::set_errdetail(const char* value,
    size_t size) {
  
  errdetail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.TradeOrder.errDetail)
}
inline std::string* TradeOrder::_internal_mutable_errdetail() {
  
  return errdetail_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeOrder::release_errdetail() {
  // @@protoc_insertion_point(field_release:mam.TradeOrder.errDetail)
  return errdetail_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeOrder::set_allocated_errdetail(std::string* errdetail) {
  if (errdetail != nullptr) {
    
  } else {
    
  }
  errdetail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errdetail,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.TradeOrder.errDetail)
}

// -------------------------------------------------------------------

// CancelOrder

// int32 reqId = 1;
inline void CancelOrder::clear_reqid() {
  reqid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CancelOrder::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CancelOrder::reqid() const {
  // @@protoc_insertion_point(field_get:mam.CancelOrder.reqId)
  return _internal_reqid();
}
inline void CancelOrder::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reqid_ = value;
}
inline void CancelOrder::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:mam.CancelOrder.reqId)
}

// string orderId = 2;
inline void CancelOrder::clear_orderid() {
  orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CancelOrder::orderid() const {
  // @@protoc_insertion_point(field_get:mam.CancelOrder.orderId)
  return _internal_orderid();
}
inline void CancelOrder::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:mam.CancelOrder.orderId)
}
inline std::string* CancelOrder::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:mam.CancelOrder.orderId)
  return _internal_mutable_orderid();
}
inline const std::string& CancelOrder::_internal_orderid() const {
  return orderid_.Get();
}
inline void CancelOrder::_internal_set_orderid(const std::string& value) {
  
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CancelOrder::set_orderid(std::string&& value) {
  
  orderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.CancelOrder.orderId)
}
inline void CancelOrder::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.CancelOrder.orderId)
}
inline void CancelOrder::set_orderid(const char* value,
    size_t size) {
  
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.CancelOrder.orderId)
}
inline std::string* CancelOrder::_internal_mutable_orderid() {
  
  return orderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CancelOrder::release_orderid() {
  // @@protoc_insertion_point(field_release:mam.CancelOrder.orderId)
  return orderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CancelOrder::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.CancelOrder.orderId)
}

// -------------------------------------------------------------------

// OrderMatchResult

// int32 reqId = 1;
inline void OrderMatchResult::clear_reqid() {
  reqid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderMatchResult::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderMatchResult::reqid() const {
  // @@protoc_insertion_point(field_get:mam.OrderMatchResult.reqId)
  return _internal_reqid();
}
inline void OrderMatchResult::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reqid_ = value;
}
inline void OrderMatchResult::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:mam.OrderMatchResult.reqId)
}

// string orderId = 2;
inline void OrderMatchResult::clear_orderid() {
  orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderMatchResult::orderid() const {
  // @@protoc_insertion_point(field_get:mam.OrderMatchResult.orderId)
  return _internal_orderid();
}
inline void OrderMatchResult::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:mam.OrderMatchResult.orderId)
}
inline std::string* OrderMatchResult::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:mam.OrderMatchResult.orderId)
  return _internal_mutable_orderid();
}
inline const std::string& OrderMatchResult::_internal_orderid() const {
  return orderid_.Get();
}
inline void OrderMatchResult::_internal_set_orderid(const std::string& value) {
  
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderMatchResult::set_orderid(std::string&& value) {
  
  orderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.OrderMatchResult.orderId)
}
inline void OrderMatchResult::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.OrderMatchResult.orderId)
}
inline void OrderMatchResult::set_orderid(const char* value,
    size_t size) {
  
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.OrderMatchResult.orderId)
}
inline std::string* OrderMatchResult::_internal_mutable_orderid() {
  
  return orderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderMatchResult::release_orderid() {
  // @@protoc_insertion_point(field_release:mam.OrderMatchResult.orderId)
  return orderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderMatchResult::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.OrderMatchResult.orderId)
}

// string matchId = 3;
inline void OrderMatchResult::clear_matchid() {
  matchid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderMatchResult::matchid() const {
  // @@protoc_insertion_point(field_get:mam.OrderMatchResult.matchId)
  return _internal_matchid();
}
inline void OrderMatchResult::set_matchid(const std::string& value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:mam.OrderMatchResult.matchId)
}
inline std::string* OrderMatchResult::mutable_matchid() {
  // @@protoc_insertion_point(field_mutable:mam.OrderMatchResult.matchId)
  return _internal_mutable_matchid();
}
inline const std::string& OrderMatchResult::_internal_matchid() const {
  return matchid_.Get();
}
inline void OrderMatchResult::_internal_set_matchid(const std::string& value) {
  
  matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderMatchResult::set_matchid(std::string&& value) {
  
  matchid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.OrderMatchResult.matchId)
}
inline void OrderMatchResult::set_matchid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.OrderMatchResult.matchId)
}
inline void OrderMatchResult::set_matchid(const char* value,
    size_t size) {
  
  matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.OrderMatchResult.matchId)
}
inline std::string* OrderMatchResult::_internal_mutable_matchid() {
  
  return matchid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderMatchResult::release_matchid() {
  // @@protoc_insertion_point(field_release:mam.OrderMatchResult.matchId)
  return matchid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderMatchResult::set_allocated_matchid(std::string* matchid) {
  if (matchid != nullptr) {
    
  } else {
    
  }
  matchid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matchid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.OrderMatchResult.matchId)
}

// uint32 time = 4;
inline void OrderMatchResult::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OrderMatchResult::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OrderMatchResult::time() const {
  // @@protoc_insertion_point(field_get:mam.OrderMatchResult.time)
  return _internal_time();
}
inline void OrderMatchResult::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void OrderMatchResult::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:mam.OrderMatchResult.time)
}

// int32 dealPrice = 5;
inline void OrderMatchResult::clear_dealprice() {
  dealprice_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderMatchResult::_internal_dealprice() const {
  return dealprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderMatchResult::dealprice() const {
  // @@protoc_insertion_point(field_get:mam.OrderMatchResult.dealPrice)
  return _internal_dealprice();
}
inline void OrderMatchResult::_internal_set_dealprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dealprice_ = value;
}
inline void OrderMatchResult::set_dealprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dealprice(value);
  // @@protoc_insertion_point(field_set:mam.OrderMatchResult.dealPrice)
}

// int32 dealVolume = 6;
inline void OrderMatchResult::clear_dealvolume() {
  dealvolume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderMatchResult::_internal_dealvolume() const {
  return dealvolume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderMatchResult::dealvolume() const {
  // @@protoc_insertion_point(field_get:mam.OrderMatchResult.dealVolume)
  return _internal_dealvolume();
}
inline void OrderMatchResult::_internal_set_dealvolume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dealvolume_ = value;
}
inline void OrderMatchResult::set_dealvolume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dealvolume(value);
  // @@protoc_insertion_point(field_set:mam.OrderMatchResult.dealVolume)
}

// -------------------------------------------------------------------

// OrderChangeResult

// int32 reqId = 1;
inline void OrderChangeResult::clear_reqid() {
  reqid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderChangeResult::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderChangeResult::reqid() const {
  // @@protoc_insertion_point(field_get:mam.OrderChangeResult.reqId)
  return _internal_reqid();
}
inline void OrderChangeResult::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reqid_ = value;
}
inline void OrderChangeResult::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:mam.OrderChangeResult.reqId)
}

// string orderId = 2;
inline void OrderChangeResult::clear_orderid() {
  orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderChangeResult::orderid() const {
  // @@protoc_insertion_point(field_get:mam.OrderChangeResult.orderId)
  return _internal_orderid();
}
inline void OrderChangeResult::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:mam.OrderChangeResult.orderId)
}
inline std::string* OrderChangeResult::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:mam.OrderChangeResult.orderId)
  return _internal_mutable_orderid();
}
inline const std::string& OrderChangeResult::_internal_orderid() const {
  return orderid_.Get();
}
inline void OrderChangeResult::_internal_set_orderid(const std::string& value) {
  
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderChangeResult::set_orderid(std::string&& value) {
  
  orderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.OrderChangeResult.orderId)
}
inline void OrderChangeResult::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.OrderChangeResult.orderId)
}
inline void OrderChangeResult::set_orderid(const char* value,
    size_t size) {
  
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.OrderChangeResult.orderId)
}
inline std::string* OrderChangeResult::_internal_mutable_orderid() {
  
  return orderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderChangeResult::release_orderid() {
  // @@protoc_insertion_point(field_release:mam.OrderChangeResult.orderId)
  return orderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderChangeResult::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.OrderChangeResult.orderId)
}

// uint32 time = 3;
inline void OrderChangeResult::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OrderChangeResult::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OrderChangeResult::time() const {
  // @@protoc_insertion_point(field_get:mam.OrderChangeResult.time)
  return _internal_time();
}
inline void OrderChangeResult::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void OrderChangeResult::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:mam.OrderChangeResult.time)
}

// .mam.OrderStatusType status = 4;
inline void OrderChangeResult::clear_status() {
  status_ = 0;
}
inline ::mam::OrderStatusType OrderChangeResult::_internal_status() const {
  return static_cast< ::mam::OrderStatusType >(status_);
}
inline ::mam::OrderStatusType OrderChangeResult::status() const {
  // @@protoc_insertion_point(field_get:mam.OrderChangeResult.status)
  return _internal_status();
}
inline void OrderChangeResult::_internal_set_status(::mam::OrderStatusType value) {
  
  status_ = value;
}
inline void OrderChangeResult::set_status(::mam::OrderStatusType value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:mam.OrderChangeResult.status)
}

// .mam.TradeOrderErrorCode errCode = 5;
inline void OrderChangeResult::clear_errcode() {
  errcode_ = 0;
}
inline ::mam::TradeOrderErrorCode OrderChangeResult::_internal_errcode() const {
  return static_cast< ::mam::TradeOrderErrorCode >(errcode_);
}
inline ::mam::TradeOrderErrorCode OrderChangeResult::errcode() const {
  // @@protoc_insertion_point(field_get:mam.OrderChangeResult.errCode)
  return _internal_errcode();
}
inline void OrderChangeResult::_internal_set_errcode(::mam::TradeOrderErrorCode value) {
  
  errcode_ = value;
}
inline void OrderChangeResult::set_errcode(::mam::TradeOrderErrorCode value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:mam.OrderChangeResult.errCode)
}

// string errDetail = 6;
inline void OrderChangeResult::clear_errdetail() {
  errdetail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderChangeResult::errdetail() const {
  // @@protoc_insertion_point(field_get:mam.OrderChangeResult.errDetail)
  return _internal_errdetail();
}
inline void OrderChangeResult::set_errdetail(const std::string& value) {
  _internal_set_errdetail(value);
  // @@protoc_insertion_point(field_set:mam.OrderChangeResult.errDetail)
}
inline std::string* OrderChangeResult::mutable_errdetail() {
  // @@protoc_insertion_point(field_mutable:mam.OrderChangeResult.errDetail)
  return _internal_mutable_errdetail();
}
inline const std::string& OrderChangeResult::_internal_errdetail() const {
  return errdetail_.Get();
}
inline void OrderChangeResult::_internal_set_errdetail(const std::string& value) {
  
  errdetail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderChangeResult::set_errdetail(std::string&& value) {
  
  errdetail_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.OrderChangeResult.errDetail)
}
inline void OrderChangeResult::set_errdetail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errdetail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.OrderChangeResult.errDetail)
}
inline void OrderChangeResult::set_errdetail(const char* value,
    size_t size) {
  
  errdetail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.OrderChangeResult.errDetail)
}
inline std::string* OrderChangeResult::_internal_mutable_errdetail() {
  
  return errdetail_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderChangeResult::release_errdetail() {
  // @@protoc_insertion_point(field_release:mam.OrderChangeResult.errDetail)
  return errdetail_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderChangeResult::set_allocated_errdetail(std::string* errdetail) {
  if (errdetail != nullptr) {
    
  } else {
    
  }
  errdetail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errdetail,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.OrderChangeResult.errDetail)
}

// -------------------------------------------------------------------

// TradeOrderRsp

// repeated .mam.OrderMatchResult matches = 1;
inline int TradeOrderRsp::_internal_matches_size() const {
  return matches_.size();
}
inline int TradeOrderRsp::matches_size() const {
  return _internal_matches_size();
}
inline void TradeOrderRsp::clear_matches() {
  matches_.Clear();
}
inline ::mam::OrderMatchResult* TradeOrderRsp::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:mam.TradeOrderRsp.matches)
  return matches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::OrderMatchResult >*
TradeOrderRsp::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:mam.TradeOrderRsp.matches)
  return &matches_;
}
inline const ::mam::OrderMatchResult& TradeOrderRsp::_internal_matches(int index) const {
  return matches_.Get(index);
}
inline const ::mam::OrderMatchResult& TradeOrderRsp::matches(int index) const {
  // @@protoc_insertion_point(field_get:mam.TradeOrderRsp.matches)
  return _internal_matches(index);
}
inline ::mam::OrderMatchResult* TradeOrderRsp::_internal_add_matches() {
  return matches_.Add();
}
inline ::mam::OrderMatchResult* TradeOrderRsp::add_matches() {
  // @@protoc_insertion_point(field_add:mam.TradeOrderRsp.matches)
  return _internal_add_matches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::OrderMatchResult >&
TradeOrderRsp::matches() const {
  // @@protoc_insertion_point(field_list:mam.TradeOrderRsp.matches)
  return matches_;
}

// repeated .mam.OrderChangeResult status = 2;
inline int TradeOrderRsp::_internal_status_size() const {
  return status_.size();
}
inline int TradeOrderRsp::status_size() const {
  return _internal_status_size();
}
inline void TradeOrderRsp::clear_status() {
  status_.Clear();
}
inline ::mam::OrderChangeResult* TradeOrderRsp::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:mam.TradeOrderRsp.status)
  return status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::OrderChangeResult >*
TradeOrderRsp::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:mam.TradeOrderRsp.status)
  return &status_;
}
inline const ::mam::OrderChangeResult& TradeOrderRsp::_internal_status(int index) const {
  return status_.Get(index);
}
inline const ::mam::OrderChangeResult& TradeOrderRsp::status(int index) const {
  // @@protoc_insertion_point(field_get:mam.TradeOrderRsp.status)
  return _internal_status(index);
}
inline ::mam::OrderChangeResult* TradeOrderRsp::_internal_add_status() {
  return status_.Add();
}
inline ::mam::OrderChangeResult* TradeOrderRsp::add_status() {
  // @@protoc_insertion_point(field_add:mam.TradeOrderRsp.status)
  return _internal_add_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::OrderChangeResult >&
TradeOrderRsp::status() const {
  // @@protoc_insertion_point(field_list:mam.TradeOrderRsp.status)
  return status_;
}

// -------------------------------------------------------------------

// TradeAccountQry

// int32 accountId = 1;
inline void TradeAccountQry::clear_accountid() {
  accountid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeAccountQry::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeAccountQry::accountid() const {
  // @@protoc_insertion_point(field_get:mam.TradeAccountQry.accountId)
  return _internal_accountid();
}
inline void TradeAccountQry::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  accountid_ = value;
}
inline void TradeAccountQry::set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:mam.TradeAccountQry.accountId)
}

// -------------------------------------------------------------------

// TradeStockPosition

// string symbol = 1;
inline void TradeStockPosition::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeStockPosition::symbol() const {
  // @@protoc_insertion_point(field_get:mam.TradeStockPosition.symbol)
  return _internal_symbol();
}
inline void TradeStockPosition::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:mam.TradeStockPosition.symbol)
}
inline std::string* TradeStockPosition::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:mam.TradeStockPosition.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& TradeStockPosition::_internal_symbol() const {
  return symbol_.Get();
}
inline void TradeStockPosition::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeStockPosition::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.TradeStockPosition.symbol)
}
inline void TradeStockPosition::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.TradeStockPosition.symbol)
}
inline void TradeStockPosition::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.TradeStockPosition.symbol)
}
inline std::string* TradeStockPosition::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeStockPosition::release_symbol() {
  // @@protoc_insertion_point(field_release:mam.TradeStockPosition.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeStockPosition::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.TradeStockPosition.symbol)
}

// int32 quantity = 2;
inline void TradeStockPosition::clear_quantity() {
  quantity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeStockPosition::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeStockPosition::quantity() const {
  // @@protoc_insertion_point(field_get:mam.TradeStockPosition.quantity)
  return _internal_quantity();
}
inline void TradeStockPosition::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  quantity_ = value;
}
inline void TradeStockPosition::set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:mam.TradeStockPosition.quantity)
}

// -------------------------------------------------------------------

// TradeAccountRsp

// int32 accountId = 1;
inline void TradeAccountRsp::clear_accountid() {
  accountid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeAccountRsp::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeAccountRsp::accountid() const {
  // @@protoc_insertion_point(field_get:mam.TradeAccountRsp.accountId)
  return _internal_accountid();
}
inline void TradeAccountRsp::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  accountid_ = value;
}
inline void TradeAccountRsp::set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:mam.TradeAccountRsp.accountId)
}

// string host = 2;
inline void TradeAccountRsp::clear_host() {
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeAccountRsp::host() const {
  // @@protoc_insertion_point(field_get:mam.TradeAccountRsp.host)
  return _internal_host();
}
inline void TradeAccountRsp::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:mam.TradeAccountRsp.host)
}
inline std::string* TradeAccountRsp::mutable_host() {
  // @@protoc_insertion_point(field_mutable:mam.TradeAccountRsp.host)
  return _internal_mutable_host();
}
inline const std::string& TradeAccountRsp::_internal_host() const {
  return host_.Get();
}
inline void TradeAccountRsp::_internal_set_host(const std::string& value) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeAccountRsp::set_host(std::string&& value) {
  
  host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.TradeAccountRsp.host)
}
inline void TradeAccountRsp::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.TradeAccountRsp.host)
}
inline void TradeAccountRsp::set_host(const char* value,
    size_t size) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.TradeAccountRsp.host)
}
inline std::string* TradeAccountRsp::_internal_mutable_host() {
  
  return host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeAccountRsp::release_host() {
  // @@protoc_insertion_point(field_release:mam.TradeAccountRsp.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeAccountRsp::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.TradeAccountRsp.host)
}

// .mam.TradeAccountStatus status = 3;
inline void TradeAccountRsp::clear_status() {
  status_ = 0;
}
inline ::mam::TradeAccountStatus TradeAccountRsp::_internal_status() const {
  return static_cast< ::mam::TradeAccountStatus >(status_);
}
inline ::mam::TradeAccountStatus TradeAccountRsp::status() const {
  // @@protoc_insertion_point(field_get:mam.TradeAccountRsp.status)
  return _internal_status();
}
inline void TradeAccountRsp::_internal_set_status(::mam::TradeAccountStatus value) {
  
  status_ = value;
}
inline void TradeAccountRsp::set_status(::mam::TradeAccountStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:mam.TradeAccountRsp.status)
}

// double balance = 4;
inline void TradeAccountRsp::clear_balance() {
  balance_ = 0;
}
inline double TradeAccountRsp::_internal_balance() const {
  return balance_;
}
inline double TradeAccountRsp::balance() const {
  // @@protoc_insertion_point(field_get:mam.TradeAccountRsp.balance)
  return _internal_balance();
}
inline void TradeAccountRsp::_internal_set_balance(double value) {
  
  balance_ = value;
}
inline void TradeAccountRsp::set_balance(double value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:mam.TradeAccountRsp.balance)
}

// repeated .mam.TradeStockPosition positions = 5;
inline int TradeAccountRsp::_internal_positions_size() const {
  return positions_.size();
}
inline int TradeAccountRsp::positions_size() const {
  return _internal_positions_size();
}
inline void TradeAccountRsp::clear_positions() {
  positions_.Clear();
}
inline ::mam::TradeStockPosition* TradeAccountRsp::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:mam.TradeAccountRsp.positions)
  return positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::TradeStockPosition >*
TradeAccountRsp::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:mam.TradeAccountRsp.positions)
  return &positions_;
}
inline const ::mam::TradeStockPosition& TradeAccountRsp::_internal_positions(int index) const {
  return positions_.Get(index);
}
inline const ::mam::TradeStockPosition& TradeAccountRsp::positions(int index) const {
  // @@protoc_insertion_point(field_get:mam.TradeAccountRsp.positions)
  return _internal_positions(index);
}
inline ::mam::TradeStockPosition* TradeAccountRsp::_internal_add_positions() {
  return positions_.Add();
}
inline ::mam::TradeStockPosition* TradeAccountRsp::add_positions() {
  // @@protoc_insertion_point(field_add:mam.TradeAccountRsp.positions)
  return _internal_add_positions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::TradeStockPosition >&
TradeAccountRsp::positions() const {
  // @@protoc_insertion_point(field_list:mam.TradeAccountRsp.positions)
  return positions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mam

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mam::OrderStatusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mam::OrderStatusType>() {
  return ::mam::OrderStatusType_descriptor();
}
template <> struct is_proto_enum< ::mam::TradeAccountStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mam::TradeAccountStatus>() {
  return ::mam::TradeAccountStatus_descriptor();
}
template <> struct is_proto_enum< ::mam::TradeOrderErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mam::TradeOrderErrorCode>() {
  return ::mam::TradeOrderErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trade_2eproto
