// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fifteenth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fifteenth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fifteenth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fifteenth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fifteenth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fifteenth_2eproto;
namespace mam {
class PhoneNumber;
class PhoneNumberDefaultTypeInternal;
extern PhoneNumberDefaultTypeInternal _PhoneNumber_default_instance_;
class TradeOrder;
class TradeOrderDefaultTypeInternal;
extern TradeOrderDefaultTypeInternal _TradeOrder_default_instance_;
class TradeOrder_DicEntry_DoNotUse;
class TradeOrder_DicEntry_DoNotUseDefaultTypeInternal;
extern TradeOrder_DicEntry_DoNotUseDefaultTypeInternal _TradeOrder_DicEntry_DoNotUse_default_instance_;
class TradeOrder_PhoneMapEntry_DoNotUse;
class TradeOrder_PhoneMapEntry_DoNotUseDefaultTypeInternal;
extern TradeOrder_PhoneMapEntry_DoNotUseDefaultTypeInternal _TradeOrder_PhoneMapEntry_DoNotUse_default_instance_;
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> ::mam::PhoneNumber* Arena::CreateMaybeMessage<::mam::PhoneNumber>(Arena*);
template<> ::mam::TradeOrder* Arena::CreateMaybeMessage<::mam::TradeOrder>(Arena*);
template<> ::mam::TradeOrder_DicEntry_DoNotUse* Arena::CreateMaybeMessage<::mam::TradeOrder_DicEntry_DoNotUse>(Arena*);
template<> ::mam::TradeOrder_PhoneMapEntry_DoNotUse* Arena::CreateMaybeMessage<::mam::TradeOrder_PhoneMapEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mam {

enum OrderStatusType : int {
  OrderStatus_None = 0,
  OrderStatus_Accepted = 1,
  OrderStatus_TotalMatch = 2,
  OrderStatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OrderStatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OrderStatusType_IsValid(int value);
constexpr OrderStatusType OrderStatusType_MIN = OrderStatus_None;
constexpr OrderStatusType OrderStatusType_MAX = OrderStatus_TotalMatch;
constexpr int OrderStatusType_ARRAYSIZE = OrderStatusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderStatusType_descriptor();
template<typename T>
inline const std::string& OrderStatusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderStatusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderStatusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderStatusType_descriptor(), enum_t_value);
}
inline bool OrderStatusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderStatusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderStatusType>(
    OrderStatusType_descriptor(), name, value);
}
// ===================================================================

class PhoneNumber PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.PhoneNumber) */ {
 public:
  inline PhoneNumber() : PhoneNumber(nullptr) {}
  virtual ~PhoneNumber();

  PhoneNumber(const PhoneNumber& from);
  PhoneNumber(PhoneNumber&& from) noexcept
    : PhoneNumber() {
    *this = ::std::move(from);
  }

  inline PhoneNumber& operator=(const PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhoneNumber& operator=(PhoneNumber&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PhoneNumber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhoneNumber* internal_default_instance() {
    return reinterpret_cast<const PhoneNumber*>(
               &_PhoneNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PhoneNumber& a, PhoneNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(PhoneNumber* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhoneNumber* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PhoneNumber* New() const final {
    return CreateMaybeMessage<PhoneNumber>(nullptr);
  }

  PhoneNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PhoneNumber>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PhoneNumber& from);
  void MergeFrom(const PhoneNumber& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhoneNumber* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.PhoneNumber";
  }
  protected:
  explicit PhoneNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fifteenth_2eproto);
    return ::descriptor_table_fifteenth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string number = 1;
  void clear_number();
  const std::string& number() const;
  void set_number(const std::string& value);
  void set_number(std::string&& value);
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  std::string* mutable_number();
  std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.PhoneNumber)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fifteenth_2eproto;
};
// -------------------------------------------------------------------

class TradeOrder_DicEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TradeOrder_DicEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TradeOrder_DicEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  TradeOrder_DicEntry_DoNotUse();
  explicit TradeOrder_DicEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TradeOrder_DicEntry_DoNotUse& other);
  static const TradeOrder_DicEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TradeOrder_DicEntry_DoNotUse*>(&_TradeOrder_DicEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "mam.TradeOrder.DicEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fifteenth_2eproto);
    return ::descriptor_table_fifteenth_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class TradeOrder_PhoneMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TradeOrder_PhoneMapEntry_DoNotUse, 
    std::string, ::mam::PhoneNumber,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TradeOrder_PhoneMapEntry_DoNotUse, 
    std::string, ::mam::PhoneNumber,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  TradeOrder_PhoneMapEntry_DoNotUse();
  explicit TradeOrder_PhoneMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TradeOrder_PhoneMapEntry_DoNotUse& other);
  static const TradeOrder_PhoneMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TradeOrder_PhoneMapEntry_DoNotUse*>(&_TradeOrder_PhoneMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "mam.TradeOrder.PhoneMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fifteenth_2eproto);
    return ::descriptor_table_fifteenth_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class TradeOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.TradeOrder) */ {
 public:
  inline TradeOrder() : TradeOrder(nullptr) {}
  virtual ~TradeOrder();

  TradeOrder(const TradeOrder& from);
  TradeOrder(TradeOrder&& from) noexcept
    : TradeOrder() {
    *this = ::std::move(from);
  }

  inline TradeOrder& operator=(const TradeOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeOrder& operator=(TradeOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeOrder* internal_default_instance() {
    return reinterpret_cast<const TradeOrder*>(
               &_TradeOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TradeOrder& a, TradeOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeOrder* New() const final {
    return CreateMaybeMessage<TradeOrder>(nullptr);
  }

  TradeOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeOrder& from);
  void MergeFrom(const TradeOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.TradeOrder";
  }
  protected:
  explicit TradeOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fifteenth_2eproto);
    return ::descriptor_table_fifteenth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 8,
    kPhonesFieldNumber = 9,
    kDicFieldNumber = 10,
    kPhoneMapFieldNumber = 11,
    kSymbolFieldNumber = 2,
    kPhoneFieldNumber = 7,
    kReqIdFieldNumber = 1,
    kForceFieldNumber = 4,
    kTimeoutFieldNumber = 3,
    kCreateTimeFieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // repeated string tags = 8;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // repeated .mam.PhoneNumber phones = 9;
  int phones_size() const;
  private:
  int _internal_phones_size() const;
  public:
  void clear_phones();
  ::mam::PhoneNumber* mutable_phones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::PhoneNumber >*
      mutable_phones();
  private:
  const ::mam::PhoneNumber& _internal_phones(int index) const;
  ::mam::PhoneNumber* _internal_add_phones();
  public:
  const ::mam::PhoneNumber& phones(int index) const;
  ::mam::PhoneNumber* add_phones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::PhoneNumber >&
      phones() const;

  // map<string, double> dic = 10;
  int dic_size() const;
  private:
  int _internal_dic_size() const;
  public:
  void clear_dic();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_dic() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_dic();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      dic() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_dic();

  // map<string, .mam.PhoneNumber> phoneMap = 11;
  int phonemap_size() const;
  private:
  int _internal_phonemap_size() const;
  public:
  void clear_phonemap();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PhoneNumber >&
      _internal_phonemap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PhoneNumber >*
      _internal_mutable_phonemap();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PhoneNumber >&
      phonemap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PhoneNumber >*
      mutable_phonemap();

  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // .mam.PhoneNumber phone = 7;
  bool has_phone() const;
  private:
  bool _internal_has_phone() const;
  public:
  void clear_phone();
  const ::mam::PhoneNumber& phone() const;
  ::mam::PhoneNumber* release_phone();
  ::mam::PhoneNumber* mutable_phone();
  void set_allocated_phone(::mam::PhoneNumber* phone);
  private:
  const ::mam::PhoneNumber& _internal_phone() const;
  ::mam::PhoneNumber* _internal_mutable_phone();
  public:
  void unsafe_arena_set_allocated_phone(
      ::mam::PhoneNumber* phone);
  ::mam::PhoneNumber* unsafe_arena_release_phone();

  // int32 reqId = 1;
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool force = 4;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // double timeout = 3;
  void clear_timeout();
  double timeout() const;
  void set_timeout(double value);
  private:
  double _internal_timeout() const;
  void _internal_set_timeout(double value);
  public:

  // int64 createTime = 5;
  void clear_createtime();
  ::PROTOBUF_NAMESPACE_ID::int64 createtime() const;
  void set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createtime() const;
  void _internal_set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .mam.OrderStatusType status = 6;
  void clear_status();
  ::mam::OrderStatusType status() const;
  void set_status(::mam::OrderStatusType value);
  private:
  ::mam::OrderStatusType _internal_status() const;
  void _internal_set_status(::mam::OrderStatusType value);
  public:

  // @@protoc_insertion_point(class_scope:mam.TradeOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::PhoneNumber > phones_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TradeOrder_DicEntry_DoNotUse,
      std::string, double,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
      0 > dic_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TradeOrder_PhoneMapEntry_DoNotUse,
      std::string, ::mam::PhoneNumber,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > phonemap_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::mam::PhoneNumber* phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  bool force_;
  double timeout_;
  ::PROTOBUF_NAMESPACE_ID::int64 createtime_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fifteenth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PhoneNumber

// string number = 1;
inline void PhoneNumber::clear_number() {
  number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PhoneNumber::number() const {
  // @@protoc_insertion_point(field_get:mam.PhoneNumber.number)
  return _internal_number();
}
inline void PhoneNumber::set_number(const std::string& value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:mam.PhoneNumber.number)
}
inline std::string* PhoneNumber::mutable_number() {
  // @@protoc_insertion_point(field_mutable:mam.PhoneNumber.number)
  return _internal_mutable_number();
}
inline const std::string& PhoneNumber::_internal_number() const {
  return number_.Get();
}
inline void PhoneNumber::_internal_set_number(const std::string& value) {
  
  number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PhoneNumber::set_number(std::string&& value) {
  
  number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.PhoneNumber.number)
}
inline void PhoneNumber::set_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.PhoneNumber.number)
}
inline void PhoneNumber::set_number(const char* value,
    size_t size) {
  
  number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.PhoneNumber.number)
}
inline std::string* PhoneNumber::_internal_mutable_number() {
  
  return number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PhoneNumber::release_number() {
  // @@protoc_insertion_point(field_release:mam.PhoneNumber.number)
  return number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PhoneNumber::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.PhoneNumber.number)
}

// int32 type = 2;
inline void PhoneNumber::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PhoneNumber::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PhoneNumber::type() const {
  // @@protoc_insertion_point(field_get:mam.PhoneNumber.type)
  return _internal_type();
}
inline void PhoneNumber::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void PhoneNumber::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mam.PhoneNumber.type)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TradeOrder

// int32 reqId = 1;
inline void TradeOrder::clear_reqid() {
  reqid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::reqid() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.reqId)
  return _internal_reqid();
}
inline void TradeOrder::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reqid_ = value;
}
inline void TradeOrder::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.reqId)
}

// string symbol = 2;
inline void TradeOrder::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeOrder::symbol() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.symbol)
  return _internal_symbol();
}
inline void TradeOrder::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.symbol)
}
inline std::string* TradeOrder::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:mam.TradeOrder.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& TradeOrder::_internal_symbol() const {
  return symbol_.Get();
}
inline void TradeOrder::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeOrder::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.TradeOrder.symbol)
}
inline void TradeOrder::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.TradeOrder.symbol)
}
inline void TradeOrder::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.TradeOrder.symbol)
}
inline std::string* TradeOrder::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeOrder::release_symbol() {
  // @@protoc_insertion_point(field_release:mam.TradeOrder.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeOrder::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.TradeOrder.symbol)
}

// double timeout = 3;
inline void TradeOrder::clear_timeout() {
  timeout_ = 0;
}
inline double TradeOrder::_internal_timeout() const {
  return timeout_;
}
inline double TradeOrder::timeout() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.timeout)
  return _internal_timeout();
}
inline void TradeOrder::_internal_set_timeout(double value) {
  
  timeout_ = value;
}
inline void TradeOrder::set_timeout(double value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.timeout)
}

// bool force = 4;
inline void TradeOrder::clear_force() {
  force_ = false;
}
inline bool TradeOrder::_internal_force() const {
  return force_;
}
inline bool TradeOrder::force() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.force)
  return _internal_force();
}
inline void TradeOrder::_internal_set_force(bool value) {
  
  force_ = value;
}
inline void TradeOrder::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.force)
}

// int64 createTime = 5;
inline void TradeOrder::clear_createtime() {
  createtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::_internal_createtime() const {
  return createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::createtime() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.createTime)
  return _internal_createtime();
}
inline void TradeOrder::_internal_set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createtime_ = value;
}
inline void TradeOrder::set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.createTime)
}

// .mam.OrderStatusType status = 6;
inline void TradeOrder::clear_status() {
  status_ = 0;
}
inline ::mam::OrderStatusType TradeOrder::_internal_status() const {
  return static_cast< ::mam::OrderStatusType >(status_);
}
inline ::mam::OrderStatusType TradeOrder::status() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.status)
  return _internal_status();
}
inline void TradeOrder::_internal_set_status(::mam::OrderStatusType value) {
  
  status_ = value;
}
inline void TradeOrder::set_status(::mam::OrderStatusType value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.status)
}

// .mam.PhoneNumber phone = 7;
inline bool TradeOrder::_internal_has_phone() const {
  return this != internal_default_instance() && phone_ != nullptr;
}
inline bool TradeOrder::has_phone() const {
  return _internal_has_phone();
}
inline void TradeOrder::clear_phone() {
  if (GetArena() == nullptr && phone_ != nullptr) {
    delete phone_;
  }
  phone_ = nullptr;
}
inline const ::mam::PhoneNumber& TradeOrder::_internal_phone() const {
  const ::mam::PhoneNumber* p = phone_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mam::PhoneNumber*>(
      &::mam::_PhoneNumber_default_instance_);
}
inline const ::mam::PhoneNumber& TradeOrder::phone() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.phone)
  return _internal_phone();
}
inline void TradeOrder::unsafe_arena_set_allocated_phone(
    ::mam::PhoneNumber* phone) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phone_);
  }
  phone_ = phone;
  if (phone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mam.TradeOrder.phone)
}
inline ::mam::PhoneNumber* TradeOrder::release_phone() {
  
  ::mam::PhoneNumber* temp = phone_;
  phone_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mam::PhoneNumber* TradeOrder::unsafe_arena_release_phone() {
  // @@protoc_insertion_point(field_release:mam.TradeOrder.phone)
  
  ::mam::PhoneNumber* temp = phone_;
  phone_ = nullptr;
  return temp;
}
inline ::mam::PhoneNumber* TradeOrder::_internal_mutable_phone() {
  
  if (phone_ == nullptr) {
    auto* p = CreateMaybeMessage<::mam::PhoneNumber>(GetArena());
    phone_ = p;
  }
  return phone_;
}
inline ::mam::PhoneNumber* TradeOrder::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:mam.TradeOrder.phone)
  return _internal_mutable_phone();
}
inline void TradeOrder::set_allocated_phone(::mam::PhoneNumber* phone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phone_;
  }
  if (phone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phone);
    if (message_arena != submessage_arena) {
      phone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phone, submessage_arena);
    }
    
  } else {
    
  }
  phone_ = phone;
  // @@protoc_insertion_point(field_set_allocated:mam.TradeOrder.phone)
}

// repeated string tags = 8;
inline int TradeOrder::_internal_tags_size() const {
  return tags_.size();
}
inline int TradeOrder::tags_size() const {
  return _internal_tags_size();
}
inline void TradeOrder::clear_tags() {
  tags_.Clear();
}
inline std::string* TradeOrder::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:mam.TradeOrder.tags)
  return _internal_add_tags();
}
inline const std::string& TradeOrder::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& TradeOrder::tags(int index) const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.tags)
  return _internal_tags(index);
}
inline std::string* TradeOrder::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:mam.TradeOrder.tags)
  return tags_.Mutable(index);
}
inline void TradeOrder::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mam.TradeOrder.tags)
  tags_.Mutable(index)->assign(value);
}
inline void TradeOrder::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mam.TradeOrder.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void TradeOrder::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mam.TradeOrder.tags)
}
inline void TradeOrder::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mam.TradeOrder.tags)
}
inline std::string* TradeOrder::_internal_add_tags() {
  return tags_.Add();
}
inline void TradeOrder::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mam.TradeOrder.tags)
}
inline void TradeOrder::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mam.TradeOrder.tags)
}
inline void TradeOrder::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mam.TradeOrder.tags)
}
inline void TradeOrder::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mam.TradeOrder.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TradeOrder::tags() const {
  // @@protoc_insertion_point(field_list:mam.TradeOrder.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TradeOrder::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:mam.TradeOrder.tags)
  return &tags_;
}

// repeated .mam.PhoneNumber phones = 9;
inline int TradeOrder::_internal_phones_size() const {
  return phones_.size();
}
inline int TradeOrder::phones_size() const {
  return _internal_phones_size();
}
inline void TradeOrder::clear_phones() {
  phones_.Clear();
}
inline ::mam::PhoneNumber* TradeOrder::mutable_phones(int index) {
  // @@protoc_insertion_point(field_mutable:mam.TradeOrder.phones)
  return phones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::PhoneNumber >*
TradeOrder::mutable_phones() {
  // @@protoc_insertion_point(field_mutable_list:mam.TradeOrder.phones)
  return &phones_;
}
inline const ::mam::PhoneNumber& TradeOrder::_internal_phones(int index) const {
  return phones_.Get(index);
}
inline const ::mam::PhoneNumber& TradeOrder::phones(int index) const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.phones)
  return _internal_phones(index);
}
inline ::mam::PhoneNumber* TradeOrder::_internal_add_phones() {
  return phones_.Add();
}
inline ::mam::PhoneNumber* TradeOrder::add_phones() {
  // @@protoc_insertion_point(field_add:mam.TradeOrder.phones)
  return _internal_add_phones();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::PhoneNumber >&
TradeOrder::phones() const {
  // @@protoc_insertion_point(field_list:mam.TradeOrder.phones)
  return phones_;
}

// map<string, double> dic = 10;
inline int TradeOrder::_internal_dic_size() const {
  return dic_.size();
}
inline int TradeOrder::dic_size() const {
  return _internal_dic_size();
}
inline void TradeOrder::clear_dic() {
  dic_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
TradeOrder::_internal_dic() const {
  return dic_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
TradeOrder::dic() const {
  // @@protoc_insertion_point(field_map:mam.TradeOrder.dic)
  return _internal_dic();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
TradeOrder::_internal_mutable_dic() {
  return dic_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
TradeOrder::mutable_dic() {
  // @@protoc_insertion_point(field_mutable_map:mam.TradeOrder.dic)
  return _internal_mutable_dic();
}

// map<string, .mam.PhoneNumber> phoneMap = 11;
inline int TradeOrder::_internal_phonemap_size() const {
  return phonemap_.size();
}
inline int TradeOrder::phonemap_size() const {
  return _internal_phonemap_size();
}
inline void TradeOrder::clear_phonemap() {
  phonemap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PhoneNumber >&
TradeOrder::_internal_phonemap() const {
  return phonemap_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PhoneNumber >&
TradeOrder::phonemap() const {
  // @@protoc_insertion_point(field_map:mam.TradeOrder.phoneMap)
  return _internal_phonemap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PhoneNumber >*
TradeOrder::_internal_mutable_phonemap() {
  return phonemap_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PhoneNumber >*
TradeOrder::mutable_phonemap() {
  // @@protoc_insertion_point(field_mutable_map:mam.TradeOrder.phoneMap)
  return _internal_mutable_phonemap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mam

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mam::OrderStatusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mam::OrderStatusType>() {
  return ::mam::OrderStatusType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fifteenth_2eproto
