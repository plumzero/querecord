// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fifteenth.proto

#include "fifteenth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_fifteenth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PhoneNumber_fifteenth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fifteenth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradeOrder_DicEntry_DoNotUse_fifteenth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fifteenth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradeOrder_PhoneMapEntry_DoNotUse_fifteenth_2eproto;
namespace mam {
class PhoneNumberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhoneNumber> _instance;
} _PhoneNumber_default_instance_;
class TradeOrder_DicEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeOrder_DicEntry_DoNotUse> _instance;
} _TradeOrder_DicEntry_DoNotUse_default_instance_;
class TradeOrder_PhoneMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeOrder_PhoneMapEntry_DoNotUse> _instance;
} _TradeOrder_PhoneMapEntry_DoNotUse_default_instance_;
class TradeOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeOrder> _instance;
} _TradeOrder_default_instance_;
}  // namespace mam
static void InitDefaultsscc_info_PhoneNumber_fifteenth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_PhoneNumber_default_instance_;
    new (ptr) ::mam::PhoneNumber();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::PhoneNumber::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PhoneNumber_fifteenth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PhoneNumber_fifteenth_2eproto}, {}};

static void InitDefaultsscc_info_TradeOrder_fifteenth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_TradeOrder_default_instance_;
    new (ptr) ::mam::TradeOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::TradeOrder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TradeOrder_fifteenth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TradeOrder_fifteenth_2eproto}, {
      &scc_info_PhoneNumber_fifteenth_2eproto.base,
      &scc_info_TradeOrder_DicEntry_DoNotUse_fifteenth_2eproto.base,
      &scc_info_TradeOrder_PhoneMapEntry_DoNotUse_fifteenth_2eproto.base,}};

static void InitDefaultsscc_info_TradeOrder_DicEntry_DoNotUse_fifteenth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_TradeOrder_DicEntry_DoNotUse_default_instance_;
    new (ptr) ::mam::TradeOrder_DicEntry_DoNotUse();
  }
  ::mam::TradeOrder_DicEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradeOrder_DicEntry_DoNotUse_fifteenth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TradeOrder_DicEntry_DoNotUse_fifteenth_2eproto}, {}};

static void InitDefaultsscc_info_TradeOrder_PhoneMapEntry_DoNotUse_fifteenth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_TradeOrder_PhoneMapEntry_DoNotUse_default_instance_;
    new (ptr) ::mam::TradeOrder_PhoneMapEntry_DoNotUse();
  }
  ::mam::TradeOrder_PhoneMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradeOrder_PhoneMapEntry_DoNotUse_fifteenth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradeOrder_PhoneMapEntry_DoNotUse_fifteenth_2eproto}, {
      &scc_info_PhoneNumber_fifteenth_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fifteenth_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_fifteenth_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fifteenth_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fifteenth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::PhoneNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::PhoneNumber, number_),
  PROTOBUF_FIELD_OFFSET(::mam::PhoneNumber, type_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder_DicEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder_DicEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder_DicEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder_DicEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder_PhoneMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder_PhoneMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder_PhoneMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder_PhoneMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, reqid_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, symbol_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, timeout_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, force_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, createtime_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, status_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, phone_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, tags_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, phones_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, dic_),
  PROTOBUF_FIELD_OFFSET(::mam::TradeOrder, phonemap_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mam::PhoneNumber)},
  { 7, 14, sizeof(::mam::TradeOrder_DicEntry_DoNotUse)},
  { 16, 23, sizeof(::mam::TradeOrder_PhoneMapEntry_DoNotUse)},
  { 25, -1, sizeof(::mam::TradeOrder)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_PhoneNumber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_TradeOrder_DicEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_TradeOrder_PhoneMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_TradeOrder_default_instance_),
};

const char descriptor_table_protodef_fifteenth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017fifteenth.proto\022\003mam\"+\n\013PhoneNumber\022\016\n"
  "\006number\030\001 \001(\t\022\014\n\004type\030\002 \001(\005\"\235\003\n\nTradeOrd"
  "er\022\r\n\005reqId\030\001 \001(\005\022\016\n\006symbol\030\002 \001(\t\022\017\n\007tim"
  "eout\030\003 \001(\001\022\r\n\005force\030\004 \001(\010\022\022\n\ncreateTime\030"
  "\005 \001(\003\022$\n\006status\030\006 \001(\0162\024.mam.OrderStatusT"
  "ype\022\037\n\005phone\030\007 \001(\0132\020.mam.PhoneNumber\022\014\n\004"
  "tags\030\010 \003(\t\022 \n\006phones\030\t \003(\0132\020.mam.PhoneNu"
  "mber\022%\n\003dic\030\n \003(\0132\030.mam.TradeOrder.DicEn"
  "try\022/\n\010phoneMap\030\013 \003(\0132\035.mam.TradeOrder.P"
  "honeMapEntry\032*\n\010DicEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\001:\0028\001\032A\n\rPhoneMapEntry\022\013\n\003key"
  "\030\001 \001(\t\022\037\n\005value\030\002 \001(\0132\020.mam.PhoneNumber:"
  "\0028\001*]\n\017OrderStatusType\022\024\n\020OrderStatus_No"
  "ne\020\000\022\030\n\024OrderStatus_Accepted\020\001\022\032\n\026OrderS"
  "tatus_TotalMatch\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_fifteenth_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_fifteenth_2eproto_sccs[4] = {
  &scc_info_PhoneNumber_fifteenth_2eproto.base,
  &scc_info_TradeOrder_fifteenth_2eproto.base,
  &scc_info_TradeOrder_DicEntry_DoNotUse_fifteenth_2eproto.base,
  &scc_info_TradeOrder_PhoneMapEntry_DoNotUse_fifteenth_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fifteenth_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fifteenth_2eproto = {
  false, false, descriptor_table_protodef_fifteenth_2eproto, "fifteenth.proto", 586,
  &descriptor_table_fifteenth_2eproto_once, descriptor_table_fifteenth_2eproto_sccs, descriptor_table_fifteenth_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_fifteenth_2eproto::offsets,
  file_level_metadata_fifteenth_2eproto, 4, file_level_enum_descriptors_fifteenth_2eproto, file_level_service_descriptors_fifteenth_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fifteenth_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_fifteenth_2eproto)), true);
namespace mam {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderStatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fifteenth_2eproto);
  return file_level_enum_descriptors_fifteenth_2eproto[0];
}
bool OrderStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PhoneNumber::InitAsDefaultInstance() {
}
class PhoneNumber::_Internal {
 public:
};

PhoneNumber::PhoneNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.PhoneNumber)
}
PhoneNumber::PhoneNumber(const PhoneNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_number().empty()) {
    number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_number(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:mam.PhoneNumber)
}

void PhoneNumber::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PhoneNumber_fifteenth_2eproto.base);
  number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

PhoneNumber::~PhoneNumber() {
  // @@protoc_insertion_point(destructor:mam.PhoneNumber)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PhoneNumber::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PhoneNumber::ArenaDtor(void* object) {
  PhoneNumber* _this = reinterpret_cast< PhoneNumber* >(object);
  (void)_this;
}
void PhoneNumber::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PhoneNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhoneNumber& PhoneNumber::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhoneNumber_fifteenth_2eproto.base);
  return *internal_default_instance();
}


void PhoneNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.PhoneNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhoneNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.PhoneNumber.number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhoneNumber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.PhoneNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string number = 1;
  if (this->number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_number().data(), static_cast<int>(this->_internal_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.PhoneNumber.number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_number(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.PhoneNumber)
  return target;
}

size_t PhoneNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.PhoneNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string number = 1;
  if (this->number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_number());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhoneNumber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.PhoneNumber)
  GOOGLE_DCHECK_NE(&from, this);
  const PhoneNumber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhoneNumber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.PhoneNumber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.PhoneNumber)
    MergeFrom(*source);
  }
}

void PhoneNumber::MergeFrom(const PhoneNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.PhoneNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number().size() > 0) {
    _internal_set_number(from._internal_number());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void PhoneNumber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.PhoneNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhoneNumber::CopyFrom(const PhoneNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.PhoneNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneNumber::IsInitialized() const {
  return true;
}

void PhoneNumber::InternalSwap(PhoneNumber* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  number_.Swap(&other->number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhoneNumber::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TradeOrder_DicEntry_DoNotUse::TradeOrder_DicEntry_DoNotUse() {}
TradeOrder_DicEntry_DoNotUse::TradeOrder_DicEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TradeOrder_DicEntry_DoNotUse::MergeFrom(const TradeOrder_DicEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TradeOrder_DicEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TradeOrder_DicEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TradeOrder_PhoneMapEntry_DoNotUse::TradeOrder_PhoneMapEntry_DoNotUse() {}
TradeOrder_PhoneMapEntry_DoNotUse::TradeOrder_PhoneMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TradeOrder_PhoneMapEntry_DoNotUse::MergeFrom(const TradeOrder_PhoneMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TradeOrder_PhoneMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TradeOrder_PhoneMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TradeOrder::InitAsDefaultInstance() {
  ::mam::_TradeOrder_default_instance_._instance.get_mutable()->phone_ = const_cast< ::mam::PhoneNumber*>(
      ::mam::PhoneNumber::internal_default_instance());
}
class TradeOrder::_Internal {
 public:
  static const ::mam::PhoneNumber& phone(const TradeOrder* msg);
};

const ::mam::PhoneNumber&
TradeOrder::_Internal::phone(const TradeOrder* msg) {
  return *msg->phone_;
}
TradeOrder::TradeOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena),
  phones_(arena),
  dic_(arena),
  phonemap_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.TradeOrder)
}
TradeOrder::TradeOrder(const TradeOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_),
      phones_(from.phones_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dic_.MergeFrom(from.dic_);
  phonemap_.MergeFrom(from.phonemap_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  if (from._internal_has_phone()) {
    phone_ = new ::mam::PhoneNumber(*from.phone_);
  } else {
    phone_ = nullptr;
  }
  ::memcpy(&reqid_, &from.reqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&reqid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:mam.TradeOrder)
}

void TradeOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeOrder_fifteenth_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&phone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&phone_)) + sizeof(status_));
}

TradeOrder::~TradeOrder() {
  // @@protoc_insertion_point(destructor:mam.TradeOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradeOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete phone_;
}

void TradeOrder::ArenaDtor(void* object) {
  TradeOrder* _this = reinterpret_cast< TradeOrder* >(object);
  (void)_this;
}
void TradeOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradeOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeOrder& TradeOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeOrder_fifteenth_2eproto.base);
  return *internal_default_instance();
}


void TradeOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.TradeOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  phones_.Clear();
  dic_.Clear();
  phonemap_.Clear();
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && phone_ != nullptr) {
    delete phone_;
  }
  phone_ = nullptr;
  ::memset(&reqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&reqid_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 reqId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.TradeOrder.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool force = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 createTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mam.OrderStatusType status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::mam::OrderStatusType>(val));
        } else goto handle_unusual;
        continue;
      // .mam.PhoneNumber phone = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_phone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.TradeOrder.tags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mam.PhoneNumber phones = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phones(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, double> dic = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&dic_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .mam.PhoneNumber> phoneMap = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&phonemap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.TradeOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reqId = 1;
  if (this->reqid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reqid(), target);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.TradeOrder.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // double timeout = 3;
  if (!(this->timeout() <= 0 && this->timeout() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_timeout(), target);
  }

  // bool force = 4;
  if (this->force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_force(), target);
  }

  // int64 createTime = 5;
  if (this->createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_createtime(), target);
  }

  // .mam.OrderStatusType status = 6;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_status(), target);
  }

  // .mam.PhoneNumber phone = 7;
  if (this->has_phone()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::phone(this), target, stream);
  }

  // repeated string tags = 8;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.TradeOrder.tags");
    target = stream->WriteString(8, s, target);
  }

  // repeated .mam.PhoneNumber phones = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_phones_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_phones(i), target, stream);
  }

  // map<string, double> dic = 10;
  if (!this->_internal_dic().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mam.TradeOrder.DicEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_dic().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_dic().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_dic().begin();
          it != this->_internal_dic().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TradeOrder_DicEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_dic().begin();
          it != this->_internal_dic().end(); ++it) {
        target = TradeOrder_DicEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .mam.PhoneNumber> phoneMap = 11;
  if (!this->_internal_phonemap().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PhoneNumber >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mam.TradeOrder.PhoneMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_phonemap().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_phonemap().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PhoneNumber >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PhoneNumber >::const_iterator
          it = this->_internal_phonemap().begin();
          it != this->_internal_phonemap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TradeOrder_PhoneMapEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PhoneNumber >::const_iterator
          it = this->_internal_phonemap().begin();
          it != this->_internal_phonemap().end(); ++it) {
        target = TradeOrder_PhoneMapEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.TradeOrder)
  return target;
}

size_t TradeOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.TradeOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // repeated .mam.PhoneNumber phones = 9;
  total_size += 1UL * this->_internal_phones_size();
  for (const auto& msg : this->phones_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, double> dic = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dic_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_dic().begin();
      it != this->_internal_dic().end(); ++it) {
    total_size += TradeOrder_DicEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .mam.PhoneNumber> phoneMap = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_phonemap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PhoneNumber >::const_iterator
      it = this->_internal_phonemap().begin();
      it != this->_internal_phonemap().end(); ++it) {
    total_size += TradeOrder_PhoneMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // .mam.PhoneNumber phone = 7;
  if (this->has_phone()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phone_);
  }

  // int32 reqId = 1;
  if (this->reqid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reqid());
  }

  // bool force = 4;
  if (this->force() != 0) {
    total_size += 1 + 1;
  }

  // double timeout = 3;
  if (!(this->timeout() <= 0 && this->timeout() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 createTime = 5;
  if (this->createtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createtime());
  }

  // .mam.OrderStatusType status = 6;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.TradeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.TradeOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.TradeOrder)
    MergeFrom(*source);
  }
}

void TradeOrder::MergeFrom(const TradeOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.TradeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  phones_.MergeFrom(from.phones_);
  dic_.MergeFrom(from.dic_);
  phonemap_.MergeFrom(from.phonemap_);
  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.has_phone()) {
    _internal_mutable_phone()->::mam::PhoneNumber::MergeFrom(from._internal_phone());
  }
  if (from.reqid() != 0) {
    _internal_set_reqid(from._internal_reqid());
  }
  if (from.force() != 0) {
    _internal_set_force(from._internal_force());
  }
  if (!(from.timeout() <= 0 && from.timeout() >= 0)) {
    _internal_set_timeout(from._internal_timeout());
  }
  if (from.createtime() != 0) {
    _internal_set_createtime(from._internal_createtime());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void TradeOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.TradeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeOrder::CopyFrom(const TradeOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.TradeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeOrder::IsInitialized() const {
  return true;
}

void TradeOrder::InternalSwap(TradeOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  phones_.InternalSwap(&other->phones_);
  dic_.Swap(&other->dic_);
  phonemap_.Swap(&other->phonemap_);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradeOrder, status_)
      + sizeof(TradeOrder::status_)
      - PROTOBUF_FIELD_OFFSET(TradeOrder, phone_)>(
          reinterpret_cast<char*>(&phone_),
          reinterpret_cast<char*>(&other->phone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mam::PhoneNumber* Arena::CreateMaybeMessage< ::mam::PhoneNumber >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::PhoneNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::TradeOrder_DicEntry_DoNotUse* Arena::CreateMaybeMessage< ::mam::TradeOrder_DicEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::TradeOrder_DicEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::TradeOrder_PhoneMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::mam::TradeOrder_PhoneMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::TradeOrder_PhoneMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::TradeOrder* Arena::CreateMaybeMessage< ::mam::TradeOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::TradeOrder >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
