// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eighth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_eighth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_eighth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_eighth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_eighth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_eighth_2eproto;
namespace mam {
class AccountOverview;
class AccountOverviewDefaultTypeInternal;
extern AccountOverviewDefaultTypeInternal _AccountOverview_default_instance_;
class AccountOverviews;
class AccountOverviewsDefaultTypeInternal;
extern AccountOverviewsDefaultTypeInternal _AccountOverviews_default_instance_;
class HistoryResult;
class HistoryResultDefaultTypeInternal;
extern HistoryResultDefaultTypeInternal _HistoryResult_default_instance_;
class HistoryResult_DicEntry_DoNotUse;
class HistoryResult_DicEntry_DoNotUseDefaultTypeInternal;
extern HistoryResult_DicEntry_DoNotUseDefaultTypeInternal _HistoryResult_DicEntry_DoNotUse_default_instance_;
class PirceObj;
class PirceObjDefaultTypeInternal;
extern PirceObjDefaultTypeInternal _PirceObj_default_instance_;
class PriceList;
class PriceListDefaultTypeInternal;
extern PriceListDefaultTypeInternal _PriceList_default_instance_;
class PriceList_DicEntry_DoNotUse;
class PriceList_DicEntry_DoNotUseDefaultTypeInternal;
extern PriceList_DicEntry_DoNotUseDefaultTypeInternal _PriceList_DicEntry_DoNotUse_default_instance_;
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> ::mam::AccountOverview* Arena::CreateMaybeMessage<::mam::AccountOverview>(Arena*);
template<> ::mam::AccountOverviews* Arena::CreateMaybeMessage<::mam::AccountOverviews>(Arena*);
template<> ::mam::HistoryResult* Arena::CreateMaybeMessage<::mam::HistoryResult>(Arena*);
template<> ::mam::HistoryResult_DicEntry_DoNotUse* Arena::CreateMaybeMessage<::mam::HistoryResult_DicEntry_DoNotUse>(Arena*);
template<> ::mam::PirceObj* Arena::CreateMaybeMessage<::mam::PirceObj>(Arena*);
template<> ::mam::PriceList* Arena::CreateMaybeMessage<::mam::PriceList>(Arena*);
template<> ::mam::PriceList_DicEntry_DoNotUse* Arena::CreateMaybeMessage<::mam::PriceList_DicEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mam {

// ===================================================================

class AccountOverviews PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.AccountOverviews) */ {
 public:
  inline AccountOverviews() : AccountOverviews(nullptr) {}
  virtual ~AccountOverviews();

  AccountOverviews(const AccountOverviews& from);
  AccountOverviews(AccountOverviews&& from) noexcept
    : AccountOverviews() {
    *this = ::std::move(from);
  }

  inline AccountOverviews& operator=(const AccountOverviews& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountOverviews& operator=(AccountOverviews&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountOverviews& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountOverviews* internal_default_instance() {
    return reinterpret_cast<const AccountOverviews*>(
               &_AccountOverviews_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AccountOverviews& a, AccountOverviews& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountOverviews* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountOverviews* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountOverviews* New() const final {
    return CreateMaybeMessage<AccountOverviews>(nullptr);
  }

  AccountOverviews* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountOverviews>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountOverviews& from);
  void MergeFrom(const AccountOverviews& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountOverviews* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.AccountOverviews";
  }
  protected:
  explicit AccountOverviews(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eighth_2eproto);
    return ::descriptor_table_eighth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .mam.AccountOverview content = 2;
  int content_size() const;
  private:
  int _internal_content_size() const;
  public:
  void clear_content();
  ::mam::AccountOverview* mutable_content(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountOverview >*
      mutable_content();
  private:
  const ::mam::AccountOverview& _internal_content(int index) const;
  ::mam::AccountOverview* _internal_add_content();
  public:
  const ::mam::AccountOverview& content(int index) const;
  ::mam::AccountOverview* add_content();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountOverview >&
      content() const;

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.AccountOverviews)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountOverview > content_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eighth_2eproto;
};
// -------------------------------------------------------------------

class AccountOverview PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.AccountOverview) */ {
 public:
  inline AccountOverview() : AccountOverview(nullptr) {}
  virtual ~AccountOverview();

  AccountOverview(const AccountOverview& from);
  AccountOverview(AccountOverview&& from) noexcept
    : AccountOverview() {
    *this = ::std::move(from);
  }

  inline AccountOverview& operator=(const AccountOverview& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountOverview& operator=(AccountOverview&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountOverview& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountOverview* internal_default_instance() {
    return reinterpret_cast<const AccountOverview*>(
               &_AccountOverview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AccountOverview& a, AccountOverview& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountOverview* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountOverview* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountOverview* New() const final {
    return CreateMaybeMessage<AccountOverview>(nullptr);
  }

  AccountOverview* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountOverview>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountOverview& from);
  void MergeFrom(const AccountOverview& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountOverview* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.AccountOverview";
  }
  protected:
  explicit AccountOverview(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eighth_2eproto);
    return ::descriptor_table_eighth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 13,
    kTurnoverFieldNumber = 2,
    kRateFieldNumber = 3,
    kFeeFieldNumber = 4,
    kProfitFieldNumber = 5,
    kCanceledFieldNumber = 6,
    kAccountidFieldNumber = 1,
    kServerFieldNumber = 12,
    kFailedFieldNumber = 7,
    kAcceptcostFieldNumber = 8,
    kMatchcostFieldNumber = 9,
    kBaseFieldNumber = 10,
    kCloseProfitFieldNumber = 11,
  };
  // string group = 13;
  void clear_group();
  const std::string& group() const;
  void set_group(const std::string& value);
  void set_group(std::string&& value);
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  std::string* mutable_group();
  std::string* release_group();
  void set_allocated_group(std::string* group);
  private:
  const std::string& _internal_group() const;
  void _internal_set_group(const std::string& value);
  std::string* _internal_mutable_group();
  public:

  // double turnover = 2;
  void clear_turnover();
  double turnover() const;
  void set_turnover(double value);
  private:
  double _internal_turnover() const;
  void _internal_set_turnover(double value);
  public:

  // double rate = 3;
  void clear_rate();
  double rate() const;
  void set_rate(double value);
  private:
  double _internal_rate() const;
  void _internal_set_rate(double value);
  public:

  // double fee = 4;
  void clear_fee();
  double fee() const;
  void set_fee(double value);
  private:
  double _internal_fee() const;
  void _internal_set_fee(double value);
  public:

  // double profit = 5;
  void clear_profit();
  double profit() const;
  void set_profit(double value);
  private:
  double _internal_profit() const;
  void _internal_set_profit(double value);
  public:

  // double canceled = 6;
  void clear_canceled();
  double canceled() const;
  void set_canceled(double value);
  private:
  double _internal_canceled() const;
  void _internal_set_canceled(double value);
  public:

  // int32 accountid = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::int32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server = 12;
  void clear_server();
  ::PROTOBUF_NAMESPACE_ID::int32 server() const;
  void set_server(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server() const;
  void _internal_set_server(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double failed = 7;
  void clear_failed();
  double failed() const;
  void set_failed(double value);
  private:
  double _internal_failed() const;
  void _internal_set_failed(double value);
  public:

  // double acceptcost = 8;
  void clear_acceptcost();
  double acceptcost() const;
  void set_acceptcost(double value);
  private:
  double _internal_acceptcost() const;
  void _internal_set_acceptcost(double value);
  public:

  // double matchcost = 9;
  void clear_matchcost();
  double matchcost() const;
  void set_matchcost(double value);
  private:
  double _internal_matchcost() const;
  void _internal_set_matchcost(double value);
  public:

  // double base = 10;
  void clear_base();
  double base() const;
  void set_base(double value);
  private:
  double _internal_base() const;
  void _internal_set_base(double value);
  public:

  // double close_profit = 11;
  void clear_close_profit();
  double close_profit() const;
  void set_close_profit(double value);
  private:
  double _internal_close_profit() const;
  void _internal_set_close_profit(double value);
  public:

  // @@protoc_insertion_point(class_scope:mam.AccountOverview)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
  double turnover_;
  double rate_;
  double fee_;
  double profit_;
  double canceled_;
  ::PROTOBUF_NAMESPACE_ID::int32 accountid_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_;
  double failed_;
  double acceptcost_;
  double matchcost_;
  double base_;
  double close_profit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eighth_2eproto;
};
// -------------------------------------------------------------------

class PriceList_DicEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PriceList_DicEntry_DoNotUse, 
    std::string, ::mam::PirceObj,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PriceList_DicEntry_DoNotUse, 
    std::string, ::mam::PirceObj,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  PriceList_DicEntry_DoNotUse();
  explicit PriceList_DicEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PriceList_DicEntry_DoNotUse& other);
  static const PriceList_DicEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PriceList_DicEntry_DoNotUse*>(&_PriceList_DicEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "mam.PriceList.DicEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eighth_2eproto);
    return ::descriptor_table_eighth_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class PriceList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.PriceList) */ {
 public:
  inline PriceList() : PriceList(nullptr) {}
  virtual ~PriceList();

  PriceList(const PriceList& from);
  PriceList(PriceList&& from) noexcept
    : PriceList() {
    *this = ::std::move(from);
  }

  inline PriceList& operator=(const PriceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceList& operator=(PriceList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PriceList* internal_default_instance() {
    return reinterpret_cast<const PriceList*>(
               &_PriceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PriceList& a, PriceList& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriceList* New() const final {
    return CreateMaybeMessage<PriceList>(nullptr);
  }

  PriceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriceList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriceList& from);
  void MergeFrom(const PriceList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.PriceList";
  }
  protected:
  explicit PriceList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eighth_2eproto);
    return ::descriptor_table_eighth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDicFieldNumber = 2,
    kDateFieldNumber = 1,
  };
  // map<string, .mam.PirceObj> dic = 2;
  int dic_size() const;
  private:
  int _internal_dic_size() const;
  public:
  void clear_dic();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PirceObj >&
      _internal_dic() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PirceObj >*
      _internal_mutable_dic();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PirceObj >&
      dic() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PirceObj >*
      mutable_dic();

  // string date = 1;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // @@protoc_insertion_point(class_scope:mam.PriceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PriceList_DicEntry_DoNotUse,
      std::string, ::mam::PirceObj,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > dic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eighth_2eproto;
};
// -------------------------------------------------------------------

class PirceObj PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.PirceObj) */ {
 public:
  inline PirceObj() : PirceObj(nullptr) {}
  virtual ~PirceObj();

  PirceObj(const PirceObj& from);
  PirceObj(PirceObj&& from) noexcept
    : PirceObj() {
    *this = ::std::move(from);
  }

  inline PirceObj& operator=(const PirceObj& from) {
    CopyFrom(from);
    return *this;
  }
  inline PirceObj& operator=(PirceObj&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PirceObj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PirceObj* internal_default_instance() {
    return reinterpret_cast<const PirceObj*>(
               &_PirceObj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PirceObj& a, PirceObj& b) {
    a.Swap(&b);
  }
  inline void Swap(PirceObj* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PirceObj* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PirceObj* New() const final {
    return CreateMaybeMessage<PirceObj>(nullptr);
  }

  PirceObj* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PirceObj>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PirceObj& from);
  void MergeFrom(const PirceObj& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PirceObj* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.PirceObj";
  }
  protected:
  explicit PirceObj(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eighth_2eproto);
    return ::descriptor_table_eighth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClosepriceFieldNumber = 1,
  };
  // string closeprice = 1;
  void clear_closeprice();
  const std::string& closeprice() const;
  void set_closeprice(const std::string& value);
  void set_closeprice(std::string&& value);
  void set_closeprice(const char* value);
  void set_closeprice(const char* value, size_t size);
  std::string* mutable_closeprice();
  std::string* release_closeprice();
  void set_allocated_closeprice(std::string* closeprice);
  private:
  const std::string& _internal_closeprice() const;
  void _internal_set_closeprice(const std::string& value);
  std::string* _internal_mutable_closeprice();
  public:

  // @@protoc_insertion_point(class_scope:mam.PirceObj)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr closeprice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eighth_2eproto;
};
// -------------------------------------------------------------------

class HistoryResult_DicEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HistoryResult_DicEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::mam::AccountOverviews,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HistoryResult_DicEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::mam::AccountOverviews,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  HistoryResult_DicEntry_DoNotUse();
  explicit HistoryResult_DicEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HistoryResult_DicEntry_DoNotUse& other);
  static const HistoryResult_DicEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HistoryResult_DicEntry_DoNotUse*>(&_HistoryResult_DicEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eighth_2eproto);
    return ::descriptor_table_eighth_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class HistoryResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.HistoryResult) */ {
 public:
  inline HistoryResult() : HistoryResult(nullptr) {}
  virtual ~HistoryResult();

  HistoryResult(const HistoryResult& from);
  HistoryResult(HistoryResult&& from) noexcept
    : HistoryResult() {
    *this = ::std::move(from);
  }

  inline HistoryResult& operator=(const HistoryResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryResult& operator=(HistoryResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoryResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoryResult* internal_default_instance() {
    return reinterpret_cast<const HistoryResult*>(
               &_HistoryResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HistoryResult& a, HistoryResult& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoryResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoryResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoryResult* New() const final {
    return CreateMaybeMessage<HistoryResult>(nullptr);
  }

  HistoryResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoryResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoryResult& from);
  void MergeFrom(const HistoryResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoryResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.HistoryResult";
  }
  protected:
  explicit HistoryResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eighth_2eproto);
    return ::descriptor_table_eighth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDicFieldNumber = 1,
  };
  // map<int32, .mam.AccountOverviews> dic = 1;
  int dic_size() const;
  private:
  int _internal_dic_size() const;
  public:
  void clear_dic();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mam::AccountOverviews >&
      _internal_dic() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mam::AccountOverviews >*
      _internal_mutable_dic();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mam::AccountOverviews >&
      dic() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mam::AccountOverviews >*
      mutable_dic();

  // @@protoc_insertion_point(class_scope:mam.HistoryResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      HistoryResult_DicEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::mam::AccountOverviews,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > dic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eighth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccountOverviews

// int32 id = 1;
inline void AccountOverviews::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountOverviews::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountOverviews::id() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverviews.id)
  return _internal_id();
}
inline void AccountOverviews::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void AccountOverviews::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverviews.id)
}

// repeated .mam.AccountOverview content = 2;
inline int AccountOverviews::_internal_content_size() const {
  return content_.size();
}
inline int AccountOverviews::content_size() const {
  return _internal_content_size();
}
inline void AccountOverviews::clear_content() {
  content_.Clear();
}
inline ::mam::AccountOverview* AccountOverviews::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:mam.AccountOverviews.content)
  return content_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountOverview >*
AccountOverviews::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:mam.AccountOverviews.content)
  return &content_;
}
inline const ::mam::AccountOverview& AccountOverviews::_internal_content(int index) const {
  return content_.Get(index);
}
inline const ::mam::AccountOverview& AccountOverviews::content(int index) const {
  // @@protoc_insertion_point(field_get:mam.AccountOverviews.content)
  return _internal_content(index);
}
inline ::mam::AccountOverview* AccountOverviews::_internal_add_content() {
  return content_.Add();
}
inline ::mam::AccountOverview* AccountOverviews::add_content() {
  // @@protoc_insertion_point(field_add:mam.AccountOverviews.content)
  return _internal_add_content();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountOverview >&
AccountOverviews::content() const {
  // @@protoc_insertion_point(field_list:mam.AccountOverviews.content)
  return content_;
}

// -------------------------------------------------------------------

// AccountOverview

// int32 accountid = 1;
inline void AccountOverview::clear_accountid() {
  accountid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountOverview::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountOverview::accountid() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.accountid)
  return _internal_accountid();
}
inline void AccountOverview::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  accountid_ = value;
}
inline void AccountOverview::set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.accountid)
}

// double turnover = 2;
inline void AccountOverview::clear_turnover() {
  turnover_ = 0;
}
inline double AccountOverview::_internal_turnover() const {
  return turnover_;
}
inline double AccountOverview::turnover() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.turnover)
  return _internal_turnover();
}
inline void AccountOverview::_internal_set_turnover(double value) {
  
  turnover_ = value;
}
inline void AccountOverview::set_turnover(double value) {
  _internal_set_turnover(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.turnover)
}

// double rate = 3;
inline void AccountOverview::clear_rate() {
  rate_ = 0;
}
inline double AccountOverview::_internal_rate() const {
  return rate_;
}
inline double AccountOverview::rate() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.rate)
  return _internal_rate();
}
inline void AccountOverview::_internal_set_rate(double value) {
  
  rate_ = value;
}
inline void AccountOverview::set_rate(double value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.rate)
}

// double fee = 4;
inline void AccountOverview::clear_fee() {
  fee_ = 0;
}
inline double AccountOverview::_internal_fee() const {
  return fee_;
}
inline double AccountOverview::fee() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.fee)
  return _internal_fee();
}
inline void AccountOverview::_internal_set_fee(double value) {
  
  fee_ = value;
}
inline void AccountOverview::set_fee(double value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.fee)
}

// double profit = 5;
inline void AccountOverview::clear_profit() {
  profit_ = 0;
}
inline double AccountOverview::_internal_profit() const {
  return profit_;
}
inline double AccountOverview::profit() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.profit)
  return _internal_profit();
}
inline void AccountOverview::_internal_set_profit(double value) {
  
  profit_ = value;
}
inline void AccountOverview::set_profit(double value) {
  _internal_set_profit(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.profit)
}

// double canceled = 6;
inline void AccountOverview::clear_canceled() {
  canceled_ = 0;
}
inline double AccountOverview::_internal_canceled() const {
  return canceled_;
}
inline double AccountOverview::canceled() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.canceled)
  return _internal_canceled();
}
inline void AccountOverview::_internal_set_canceled(double value) {
  
  canceled_ = value;
}
inline void AccountOverview::set_canceled(double value) {
  _internal_set_canceled(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.canceled)
}

// double failed = 7;
inline void AccountOverview::clear_failed() {
  failed_ = 0;
}
inline double AccountOverview::_internal_failed() const {
  return failed_;
}
inline double AccountOverview::failed() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.failed)
  return _internal_failed();
}
inline void AccountOverview::_internal_set_failed(double value) {
  
  failed_ = value;
}
inline void AccountOverview::set_failed(double value) {
  _internal_set_failed(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.failed)
}

// double acceptcost = 8;
inline void AccountOverview::clear_acceptcost() {
  acceptcost_ = 0;
}
inline double AccountOverview::_internal_acceptcost() const {
  return acceptcost_;
}
inline double AccountOverview::acceptcost() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.acceptcost)
  return _internal_acceptcost();
}
inline void AccountOverview::_internal_set_acceptcost(double value) {
  
  acceptcost_ = value;
}
inline void AccountOverview::set_acceptcost(double value) {
  _internal_set_acceptcost(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.acceptcost)
}

// double matchcost = 9;
inline void AccountOverview::clear_matchcost() {
  matchcost_ = 0;
}
inline double AccountOverview::_internal_matchcost() const {
  return matchcost_;
}
inline double AccountOverview::matchcost() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.matchcost)
  return _internal_matchcost();
}
inline void AccountOverview::_internal_set_matchcost(double value) {
  
  matchcost_ = value;
}
inline void AccountOverview::set_matchcost(double value) {
  _internal_set_matchcost(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.matchcost)
}

// double base = 10;
inline void AccountOverview::clear_base() {
  base_ = 0;
}
inline double AccountOverview::_internal_base() const {
  return base_;
}
inline double AccountOverview::base() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.base)
  return _internal_base();
}
inline void AccountOverview::_internal_set_base(double value) {
  
  base_ = value;
}
inline void AccountOverview::set_base(double value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.base)
}

// double close_profit = 11;
inline void AccountOverview::clear_close_profit() {
  close_profit_ = 0;
}
inline double AccountOverview::_internal_close_profit() const {
  return close_profit_;
}
inline double AccountOverview::close_profit() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.close_profit)
  return _internal_close_profit();
}
inline void AccountOverview::_internal_set_close_profit(double value) {
  
  close_profit_ = value;
}
inline void AccountOverview::set_close_profit(double value) {
  _internal_set_close_profit(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.close_profit)
}

// int32 server = 12;
inline void AccountOverview::clear_server() {
  server_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountOverview::_internal_server() const {
  return server_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountOverview::server() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.server)
  return _internal_server();
}
inline void AccountOverview::_internal_set_server(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_ = value;
}
inline void AccountOverview::set_server(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.server)
}

// string group = 13;
inline void AccountOverview::clear_group() {
  group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountOverview::group() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.group)
  return _internal_group();
}
inline void AccountOverview::set_group(const std::string& value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.group)
}
inline std::string* AccountOverview::mutable_group() {
  // @@protoc_insertion_point(field_mutable:mam.AccountOverview.group)
  return _internal_mutable_group();
}
inline const std::string& AccountOverview::_internal_group() const {
  return group_.Get();
}
inline void AccountOverview::_internal_set_group(const std::string& value) {
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountOverview::set_group(std::string&& value) {
  
  group_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.AccountOverview.group)
}
inline void AccountOverview::set_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.AccountOverview.group)
}
inline void AccountOverview::set_group(const char* value,
    size_t size) {
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.AccountOverview.group)
}
inline std::string* AccountOverview::_internal_mutable_group() {
  
  return group_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountOverview::release_group() {
  // @@protoc_insertion_point(field_release:mam.AccountOverview.group)
  return group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountOverview::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    
  } else {
    
  }
  group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.AccountOverview.group)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PriceList

// string date = 1;
inline void PriceList::clear_date() {
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PriceList::date() const {
  // @@protoc_insertion_point(field_get:mam.PriceList.date)
  return _internal_date();
}
inline void PriceList::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:mam.PriceList.date)
}
inline std::string* PriceList::mutable_date() {
  // @@protoc_insertion_point(field_mutable:mam.PriceList.date)
  return _internal_mutable_date();
}
inline const std::string& PriceList::_internal_date() const {
  return date_.Get();
}
inline void PriceList::_internal_set_date(const std::string& value) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PriceList::set_date(std::string&& value) {
  
  date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.PriceList.date)
}
inline void PriceList::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.PriceList.date)
}
inline void PriceList::set_date(const char* value,
    size_t size) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.PriceList.date)
}
inline std::string* PriceList::_internal_mutable_date() {
  
  return date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PriceList::release_date() {
  // @@protoc_insertion_point(field_release:mam.PriceList.date)
  return date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PriceList::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.PriceList.date)
}

// map<string, .mam.PirceObj> dic = 2;
inline int PriceList::_internal_dic_size() const {
  return dic_.size();
}
inline int PriceList::dic_size() const {
  return _internal_dic_size();
}
inline void PriceList::clear_dic() {
  dic_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PirceObj >&
PriceList::_internal_dic() const {
  return dic_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PirceObj >&
PriceList::dic() const {
  // @@protoc_insertion_point(field_map:mam.PriceList.dic)
  return _internal_dic();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PirceObj >*
PriceList::_internal_mutable_dic() {
  return dic_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PirceObj >*
PriceList::mutable_dic() {
  // @@protoc_insertion_point(field_mutable_map:mam.PriceList.dic)
  return _internal_mutable_dic();
}

// -------------------------------------------------------------------

// PirceObj

// string closeprice = 1;
inline void PirceObj::clear_closeprice() {
  closeprice_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PirceObj::closeprice() const {
  // @@protoc_insertion_point(field_get:mam.PirceObj.closeprice)
  return _internal_closeprice();
}
inline void PirceObj::set_closeprice(const std::string& value) {
  _internal_set_closeprice(value);
  // @@protoc_insertion_point(field_set:mam.PirceObj.closeprice)
}
inline std::string* PirceObj::mutable_closeprice() {
  // @@protoc_insertion_point(field_mutable:mam.PirceObj.closeprice)
  return _internal_mutable_closeprice();
}
inline const std::string& PirceObj::_internal_closeprice() const {
  return closeprice_.Get();
}
inline void PirceObj::_internal_set_closeprice(const std::string& value) {
  
  closeprice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PirceObj::set_closeprice(std::string&& value) {
  
  closeprice_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.PirceObj.closeprice)
}
inline void PirceObj::set_closeprice(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  closeprice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.PirceObj.closeprice)
}
inline void PirceObj::set_closeprice(const char* value,
    size_t size) {
  
  closeprice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.PirceObj.closeprice)
}
inline std::string* PirceObj::_internal_mutable_closeprice() {
  
  return closeprice_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PirceObj::release_closeprice() {
  // @@protoc_insertion_point(field_release:mam.PirceObj.closeprice)
  return closeprice_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PirceObj::set_allocated_closeprice(std::string* closeprice) {
  if (closeprice != nullptr) {
    
  } else {
    
  }
  closeprice_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), closeprice,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.PirceObj.closeprice)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HistoryResult

// map<int32, .mam.AccountOverviews> dic = 1;
inline int HistoryResult::_internal_dic_size() const {
  return dic_.size();
}
inline int HistoryResult::dic_size() const {
  return _internal_dic_size();
}
inline void HistoryResult::clear_dic() {
  dic_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mam::AccountOverviews >&
HistoryResult::_internal_dic() const {
  return dic_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mam::AccountOverviews >&
HistoryResult::dic() const {
  // @@protoc_insertion_point(field_map:mam.HistoryResult.dic)
  return _internal_dic();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mam::AccountOverviews >*
HistoryResult::_internal_mutable_dic() {
  return dic_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mam::AccountOverviews >*
HistoryResult::mutable_dic() {
  // @@protoc_insertion_point(field_mutable_map:mam.HistoryResult.dic)
  return _internal_mutable_dic();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_eighth_2eproto
