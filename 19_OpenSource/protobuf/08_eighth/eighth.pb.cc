// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eighth.proto

#include "eighth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eighth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountOverview_eighth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eighth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountOverviews_eighth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eighth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistoryResult_DicEntry_DoNotUse_eighth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eighth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PirceObj_eighth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eighth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PriceList_DicEntry_DoNotUse_eighth_2eproto;
namespace mam {
class AccountOverviewsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountOverviews> _instance;
} _AccountOverviews_default_instance_;
class AccountOverviewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountOverview> _instance;
} _AccountOverview_default_instance_;
class PriceList_DicEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriceList_DicEntry_DoNotUse> _instance;
} _PriceList_DicEntry_DoNotUse_default_instance_;
class PriceListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriceList> _instance;
} _PriceList_default_instance_;
class PirceObjDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PirceObj> _instance;
} _PirceObj_default_instance_;
class HistoryResult_DicEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoryResult_DicEntry_DoNotUse> _instance;
} _HistoryResult_DicEntry_DoNotUse_default_instance_;
class HistoryResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoryResult> _instance;
} _HistoryResult_default_instance_;
}  // namespace mam
static void InitDefaultsscc_info_AccountOverview_eighth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_AccountOverview_default_instance_;
    new (ptr) ::mam::AccountOverview();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::AccountOverview::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountOverview_eighth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountOverview_eighth_2eproto}, {}};

static void InitDefaultsscc_info_AccountOverviews_eighth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_AccountOverviews_default_instance_;
    new (ptr) ::mam::AccountOverviews();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::AccountOverviews::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountOverviews_eighth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccountOverviews_eighth_2eproto}, {
      &scc_info_AccountOverview_eighth_2eproto.base,}};

static void InitDefaultsscc_info_HistoryResult_eighth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_HistoryResult_default_instance_;
    new (ptr) ::mam::HistoryResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::HistoryResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistoryResult_eighth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HistoryResult_eighth_2eproto}, {
      &scc_info_HistoryResult_DicEntry_DoNotUse_eighth_2eproto.base,}};

static void InitDefaultsscc_info_HistoryResult_DicEntry_DoNotUse_eighth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_HistoryResult_DicEntry_DoNotUse_default_instance_;
    new (ptr) ::mam::HistoryResult_DicEntry_DoNotUse();
  }
  ::mam::HistoryResult_DicEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistoryResult_DicEntry_DoNotUse_eighth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HistoryResult_DicEntry_DoNotUse_eighth_2eproto}, {
      &scc_info_AccountOverviews_eighth_2eproto.base,}};

static void InitDefaultsscc_info_PirceObj_eighth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_PirceObj_default_instance_;
    new (ptr) ::mam::PirceObj();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::PirceObj::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PirceObj_eighth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PirceObj_eighth_2eproto}, {}};

static void InitDefaultsscc_info_PriceList_eighth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_PriceList_default_instance_;
    new (ptr) ::mam::PriceList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::PriceList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PriceList_eighth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PriceList_eighth_2eproto}, {
      &scc_info_PriceList_DicEntry_DoNotUse_eighth_2eproto.base,}};

static void InitDefaultsscc_info_PriceList_DicEntry_DoNotUse_eighth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_PriceList_DicEntry_DoNotUse_default_instance_;
    new (ptr) ::mam::PriceList_DicEntry_DoNotUse();
  }
  ::mam::PriceList_DicEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PriceList_DicEntry_DoNotUse_eighth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PriceList_DicEntry_DoNotUse_eighth_2eproto}, {
      &scc_info_PirceObj_eighth_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_eighth_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_eighth_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_eighth_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_eighth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverviews, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverviews, id_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverviews, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, accountid_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, turnover_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, rate_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, fee_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, profit_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, canceled_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, failed_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, acceptcost_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, matchcost_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, base_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, close_profit_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, server_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, group_),
  PROTOBUF_FIELD_OFFSET(::mam::PriceList_DicEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mam::PriceList_DicEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::PriceList_DicEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mam::PriceList_DicEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::PriceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::PriceList, date_),
  PROTOBUF_FIELD_OFFSET(::mam::PriceList, dic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::PirceObj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::PirceObj, closeprice_),
  PROTOBUF_FIELD_OFFSET(::mam::HistoryResult_DicEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mam::HistoryResult_DicEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::HistoryResult_DicEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mam::HistoryResult_DicEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::HistoryResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::HistoryResult, dic_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mam::AccountOverviews)},
  { 7, -1, sizeof(::mam::AccountOverview)},
  { 25, 32, sizeof(::mam::PriceList_DicEntry_DoNotUse)},
  { 34, -1, sizeof(::mam::PriceList)},
  { 41, -1, sizeof(::mam::PirceObj)},
  { 47, 54, sizeof(::mam::HistoryResult_DicEntry_DoNotUse)},
  { 56, -1, sizeof(::mam::HistoryResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_AccountOverviews_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_AccountOverview_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_PriceList_DicEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_PriceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_PirceObj_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_HistoryResult_DicEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_HistoryResult_default_instance_),
};

const char descriptor_table_protodef_eighth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014eighth.proto\022\003mam\"E\n\020AccountOverviews\022"
  "\n\n\002id\030\001 \001(\005\022%\n\007content\030\002 \003(\0132\024.mam.Accou"
  "ntOverview\"\355\001\n\017AccountOverview\022\021\n\taccoun"
  "tid\030\001 \001(\005\022\020\n\010turnover\030\002 \001(\001\022\014\n\004rate\030\003 \001("
  "\001\022\013\n\003fee\030\004 \001(\001\022\016\n\006profit\030\005 \001(\001\022\020\n\010cancel"
  "ed\030\006 \001(\001\022\016\n\006failed\030\007 \001(\001\022\022\n\nacceptcost\030\010"
  " \001(\001\022\021\n\tmatchcost\030\t \001(\001\022\014\n\004base\030\n \001(\001\022\024\n"
  "\014close_profit\030\013 \001(\001\022\016\n\006server\030\014 \001(\005\022\r\n\005g"
  "roup\030\r \001(\t\"z\n\tPriceList\022\014\n\004date\030\001 \001(\t\022$\n"
  "\003dic\030\002 \003(\0132\027.mam.PriceList.DicEntry\0329\n\010D"
  "icEntry\022\013\n\003key\030\001 \001(\t\022\034\n\005value\030\002 \001(\0132\r.ma"
  "m.PirceObj:\0028\001\"\036\n\010PirceObj\022\022\n\ncloseprice"
  "\030\001 \001(\t\"|\n\rHistoryResult\022(\n\003dic\030\001 \003(\0132\033.m"
  "am.HistoryResult.DicEntry\032A\n\010DicEntry\022\013\n"
  "\003key\030\001 \001(\005\022$\n\005value\030\002 \001(\0132\025.mam.AccountO"
  "verviews:\0028\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_eighth_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_eighth_2eproto_sccs[7] = {
  &scc_info_AccountOverview_eighth_2eproto.base,
  &scc_info_AccountOverviews_eighth_2eproto.base,
  &scc_info_HistoryResult_eighth_2eproto.base,
  &scc_info_HistoryResult_DicEntry_DoNotUse_eighth_2eproto.base,
  &scc_info_PirceObj_eighth_2eproto.base,
  &scc_info_PriceList_eighth_2eproto.base,
  &scc_info_PriceList_DicEntry_DoNotUse_eighth_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_eighth_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_eighth_2eproto = {
  false, false, descriptor_table_protodef_eighth_2eproto, "eighth.proto", 620,
  &descriptor_table_eighth_2eproto_once, descriptor_table_eighth_2eproto_sccs, descriptor_table_eighth_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_eighth_2eproto::offsets,
  file_level_metadata_eighth_2eproto, 7, file_level_enum_descriptors_eighth_2eproto, file_level_service_descriptors_eighth_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_eighth_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_eighth_2eproto)), true);
namespace mam {

// ===================================================================

void AccountOverviews::InitAsDefaultInstance() {
}
class AccountOverviews::_Internal {
 public:
};

AccountOverviews::AccountOverviews(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  content_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.AccountOverviews)
}
AccountOverviews::AccountOverviews(const AccountOverviews& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      content_(from.content_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mam.AccountOverviews)
}

void AccountOverviews::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountOverviews_eighth_2eproto.base);
  id_ = 0;
}

AccountOverviews::~AccountOverviews() {
  // @@protoc_insertion_point(destructor:mam.AccountOverviews)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountOverviews::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AccountOverviews::ArenaDtor(void* object) {
  AccountOverviews* _this = reinterpret_cast< AccountOverviews* >(object);
  (void)_this;
}
void AccountOverviews::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountOverviews::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountOverviews& AccountOverviews::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountOverviews_eighth_2eproto.base);
  return *internal_default_instance();
}


void AccountOverviews::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.AccountOverviews)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.Clear();
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountOverviews::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mam.AccountOverview content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_content(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountOverviews::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.AccountOverviews)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .mam.AccountOverview content = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_content_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_content(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.AccountOverviews)
  return target;
}

size_t AccountOverviews::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.AccountOverviews)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mam.AccountOverview content = 2;
  total_size += 1UL * this->_internal_content_size();
  for (const auto& msg : this->content_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountOverviews::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.AccountOverviews)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountOverviews* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountOverviews>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.AccountOverviews)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.AccountOverviews)
    MergeFrom(*source);
  }
}

void AccountOverviews::MergeFrom(const AccountOverviews& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.AccountOverviews)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_.MergeFrom(from.content_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void AccountOverviews::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.AccountOverviews)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountOverviews::CopyFrom(const AccountOverviews& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.AccountOverviews)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountOverviews::IsInitialized() const {
  return true;
}

void AccountOverviews::InternalSwap(AccountOverviews* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.InternalSwap(&other->content_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountOverviews::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountOverview::InitAsDefaultInstance() {
}
class AccountOverview::_Internal {
 public:
};

AccountOverview::AccountOverview(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.AccountOverview)
}
AccountOverview::AccountOverview(const AccountOverview& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group().empty()) {
    group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group(),
      GetArena());
  }
  ::memcpy(&turnover_, &from.turnover_,
    static_cast<size_t>(reinterpret_cast<char*>(&close_profit_) -
    reinterpret_cast<char*>(&turnover_)) + sizeof(close_profit_));
  // @@protoc_insertion_point(copy_constructor:mam.AccountOverview)
}

void AccountOverview::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountOverview_eighth_2eproto.base);
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&turnover_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_profit_) -
      reinterpret_cast<char*>(&turnover_)) + sizeof(close_profit_));
}

AccountOverview::~AccountOverview() {
  // @@protoc_insertion_point(destructor:mam.AccountOverview)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountOverview::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountOverview::ArenaDtor(void* object) {
  AccountOverview* _this = reinterpret_cast< AccountOverview* >(object);
  (void)_this;
}
void AccountOverview::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountOverview::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountOverview& AccountOverview::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountOverview_eighth_2eproto.base);
  return *internal_default_instance();
}


void AccountOverview::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.AccountOverview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&turnover_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_profit_) -
      reinterpret_cast<char*>(&turnover_)) + sizeof(close_profit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountOverview::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double turnover = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          turnover_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fee = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double profit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double canceled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          canceled_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double failed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          failed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double acceptcost = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          acceptcost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double matchcost = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          matchcost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double base = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close_profit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          close_profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 server = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.AccountOverview.group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountOverview::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.AccountOverview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 accountid = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_accountid(), target);
  }

  // double turnover = 2;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_turnover(), target);
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rate(), target);
  }

  // double fee = 4;
  if (!(this->fee() <= 0 && this->fee() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_fee(), target);
  }

  // double profit = 5;
  if (!(this->profit() <= 0 && this->profit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_profit(), target);
  }

  // double canceled = 6;
  if (!(this->canceled() <= 0 && this->canceled() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_canceled(), target);
  }

  // double failed = 7;
  if (!(this->failed() <= 0 && this->failed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_failed(), target);
  }

  // double acceptcost = 8;
  if (!(this->acceptcost() <= 0 && this->acceptcost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_acceptcost(), target);
  }

  // double matchcost = 9;
  if (!(this->matchcost() <= 0 && this->matchcost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_matchcost(), target);
  }

  // double base = 10;
  if (!(this->base() <= 0 && this->base() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_base(), target);
  }

  // double close_profit = 11;
  if (!(this->close_profit() <= 0 && this->close_profit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_close_profit(), target);
  }

  // int32 server = 12;
  if (this->server() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_server(), target);
  }

  // string group = 13;
  if (this->group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group().data(), static_cast<int>(this->_internal_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.AccountOverview.group");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.AccountOverview)
  return target;
}

size_t AccountOverview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.AccountOverview)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group = 13;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group());
  }

  // double turnover = 2;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    total_size += 1 + 8;
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double fee = 4;
  if (!(this->fee() <= 0 && this->fee() >= 0)) {
    total_size += 1 + 8;
  }

  // double profit = 5;
  if (!(this->profit() <= 0 && this->profit() >= 0)) {
    total_size += 1 + 8;
  }

  // double canceled = 6;
  if (!(this->canceled() <= 0 && this->canceled() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 accountid = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_accountid());
  }

  // int32 server = 12;
  if (this->server() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server());
  }

  // double failed = 7;
  if (!(this->failed() <= 0 && this->failed() >= 0)) {
    total_size += 1 + 8;
  }

  // double acceptcost = 8;
  if (!(this->acceptcost() <= 0 && this->acceptcost() >= 0)) {
    total_size += 1 + 8;
  }

  // double matchcost = 9;
  if (!(this->matchcost() <= 0 && this->matchcost() >= 0)) {
    total_size += 1 + 8;
  }

  // double base = 10;
  if (!(this->base() <= 0 && this->base() >= 0)) {
    total_size += 1 + 8;
  }

  // double close_profit = 11;
  if (!(this->close_profit() <= 0 && this->close_profit() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountOverview::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.AccountOverview)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountOverview* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountOverview>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.AccountOverview)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.AccountOverview)
    MergeFrom(*source);
  }
}

void AccountOverview::MergeFrom(const AccountOverview& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.AccountOverview)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group().size() > 0) {
    _internal_set_group(from._internal_group());
  }
  if (!(from.turnover() <= 0 && from.turnover() >= 0)) {
    _internal_set_turnover(from._internal_turnover());
  }
  if (!(from.rate() <= 0 && from.rate() >= 0)) {
    _internal_set_rate(from._internal_rate());
  }
  if (!(from.fee() <= 0 && from.fee() >= 0)) {
    _internal_set_fee(from._internal_fee());
  }
  if (!(from.profit() <= 0 && from.profit() >= 0)) {
    _internal_set_profit(from._internal_profit());
  }
  if (!(from.canceled() <= 0 && from.canceled() >= 0)) {
    _internal_set_canceled(from._internal_canceled());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.server() != 0) {
    _internal_set_server(from._internal_server());
  }
  if (!(from.failed() <= 0 && from.failed() >= 0)) {
    _internal_set_failed(from._internal_failed());
  }
  if (!(from.acceptcost() <= 0 && from.acceptcost() >= 0)) {
    _internal_set_acceptcost(from._internal_acceptcost());
  }
  if (!(from.matchcost() <= 0 && from.matchcost() >= 0)) {
    _internal_set_matchcost(from._internal_matchcost());
  }
  if (!(from.base() <= 0 && from.base() >= 0)) {
    _internal_set_base(from._internal_base());
  }
  if (!(from.close_profit() <= 0 && from.close_profit() >= 0)) {
    _internal_set_close_profit(from._internal_close_profit());
  }
}

void AccountOverview::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.AccountOverview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountOverview::CopyFrom(const AccountOverview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.AccountOverview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountOverview::IsInitialized() const {
  return true;
}

void AccountOverview::InternalSwap(AccountOverview* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  group_.Swap(&other->group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountOverview, close_profit_)
      + sizeof(AccountOverview::close_profit_)
      - PROTOBUF_FIELD_OFFSET(AccountOverview, turnover_)>(
          reinterpret_cast<char*>(&turnover_),
          reinterpret_cast<char*>(&other->turnover_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountOverview::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PriceList_DicEntry_DoNotUse::PriceList_DicEntry_DoNotUse() {}
PriceList_DicEntry_DoNotUse::PriceList_DicEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PriceList_DicEntry_DoNotUse::MergeFrom(const PriceList_DicEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PriceList_DicEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PriceList_DicEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PriceList::InitAsDefaultInstance() {
}
class PriceList::_Internal {
 public:
};

PriceList::PriceList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dic_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.PriceList)
}
PriceList::PriceList(const PriceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dic_.MergeFrom(from.dic_);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mam.PriceList)
}

void PriceList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PriceList_eighth_2eproto.base);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PriceList::~PriceList() {
  // @@protoc_insertion_point(destructor:mam.PriceList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PriceList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PriceList::ArenaDtor(void* object) {
  PriceList* _this = reinterpret_cast< PriceList* >(object);
  (void)_this;
}
void PriceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PriceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriceList& PriceList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PriceList_eighth_2eproto.base);
  return *internal_default_instance();
}


void PriceList::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.PriceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dic_.Clear();
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.PriceList.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .mam.PirceObj> dic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&dic_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.PriceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string date = 1;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.PriceList.date");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_date(), target);
  }

  // map<string, .mam.PirceObj> dic = 2;
  if (!this->_internal_dic().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PirceObj >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mam.PriceList.DicEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_dic().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_dic().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PirceObj >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PirceObj >::const_iterator
          it = this->_internal_dic().begin();
          it != this->_internal_dic().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PriceList_DicEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PirceObj >::const_iterator
          it = this->_internal_dic().begin();
          it != this->_internal_dic().end(); ++it) {
        target = PriceList_DicEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.PriceList)
  return target;
}

size_t PriceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.PriceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .mam.PirceObj> dic = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dic_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::PirceObj >::const_iterator
      it = this->_internal_dic().begin();
      it != this->_internal_dic().end(); ++it) {
    total_size += PriceList_DicEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string date = 1;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriceList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.PriceList)
  GOOGLE_DCHECK_NE(&from, this);
  const PriceList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PriceList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.PriceList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.PriceList)
    MergeFrom(*source);
  }
}

void PriceList::MergeFrom(const PriceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.PriceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dic_.MergeFrom(from.dic_);
  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
}

void PriceList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.PriceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceList::CopyFrom(const PriceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.PriceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceList::IsInitialized() const {
  return true;
}

void PriceList::InternalSwap(PriceList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dic_.Swap(&other->dic_);
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PirceObj::InitAsDefaultInstance() {
}
class PirceObj::_Internal {
 public:
};

PirceObj::PirceObj(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.PirceObj)
}
PirceObj::PirceObj(const PirceObj& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  closeprice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_closeprice().empty()) {
    closeprice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_closeprice(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mam.PirceObj)
}

void PirceObj::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PirceObj_eighth_2eproto.base);
  closeprice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PirceObj::~PirceObj() {
  // @@protoc_insertion_point(destructor:mam.PirceObj)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PirceObj::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  closeprice_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PirceObj::ArenaDtor(void* object) {
  PirceObj* _this = reinterpret_cast< PirceObj* >(object);
  (void)_this;
}
void PirceObj::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PirceObj::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PirceObj& PirceObj::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PirceObj_eighth_2eproto.base);
  return *internal_default_instance();
}


void PirceObj::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.PirceObj)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  closeprice_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PirceObj::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string closeprice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_closeprice();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.PirceObj.closeprice"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PirceObj::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.PirceObj)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string closeprice = 1;
  if (this->closeprice().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_closeprice().data(), static_cast<int>(this->_internal_closeprice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.PirceObj.closeprice");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_closeprice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.PirceObj)
  return target;
}

size_t PirceObj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.PirceObj)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string closeprice = 1;
  if (this->closeprice().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_closeprice());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PirceObj::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.PirceObj)
  GOOGLE_DCHECK_NE(&from, this);
  const PirceObj* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PirceObj>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.PirceObj)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.PirceObj)
    MergeFrom(*source);
  }
}

void PirceObj::MergeFrom(const PirceObj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.PirceObj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.closeprice().size() > 0) {
    _internal_set_closeprice(from._internal_closeprice());
  }
}

void PirceObj::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.PirceObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PirceObj::CopyFrom(const PirceObj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.PirceObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PirceObj::IsInitialized() const {
  return true;
}

void PirceObj::InternalSwap(PirceObj* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  closeprice_.Swap(&other->closeprice_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PirceObj::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

HistoryResult_DicEntry_DoNotUse::HistoryResult_DicEntry_DoNotUse() {}
HistoryResult_DicEntry_DoNotUse::HistoryResult_DicEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HistoryResult_DicEntry_DoNotUse::MergeFrom(const HistoryResult_DicEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HistoryResult_DicEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HistoryResult_DicEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void HistoryResult::InitAsDefaultInstance() {
}
class HistoryResult::_Internal {
 public:
};

HistoryResult::HistoryResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dic_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.HistoryResult)
}
HistoryResult::HistoryResult(const HistoryResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dic_.MergeFrom(from.dic_);
  // @@protoc_insertion_point(copy_constructor:mam.HistoryResult)
}

void HistoryResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HistoryResult_eighth_2eproto.base);
}

HistoryResult::~HistoryResult() {
  // @@protoc_insertion_point(destructor:mam.HistoryResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistoryResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HistoryResult::ArenaDtor(void* object) {
  HistoryResult* _this = reinterpret_cast< HistoryResult* >(object);
  (void)_this;
}
void HistoryResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistoryResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistoryResult& HistoryResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistoryResult_eighth_2eproto.base);
  return *internal_default_instance();
}


void HistoryResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.HistoryResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dic_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoryResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .mam.AccountOverviews> dic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&dic_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistoryResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.HistoryResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .mam.AccountOverviews> dic = 1;
  if (!this->_internal_dic().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mam::AccountOverviews >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_dic().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_dic().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mam::AccountOverviews >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mam::AccountOverviews >::const_iterator
          it = this->_internal_dic().begin();
          it != this->_internal_dic().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HistoryResult_DicEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mam::AccountOverviews >::const_iterator
          it = this->_internal_dic().begin();
          it != this->_internal_dic().end(); ++it) {
        target = HistoryResult_DicEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.HistoryResult)
  return target;
}

size_t HistoryResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.HistoryResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .mam.AccountOverviews> dic = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dic_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::mam::AccountOverviews >::const_iterator
      it = this->_internal_dic().begin();
      it != this->_internal_dic().end(); ++it) {
    total_size += HistoryResult_DicEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoryResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.HistoryResult)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoryResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistoryResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.HistoryResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.HistoryResult)
    MergeFrom(*source);
  }
}

void HistoryResult::MergeFrom(const HistoryResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.HistoryResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dic_.MergeFrom(from.dic_);
}

void HistoryResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.HistoryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryResult::CopyFrom(const HistoryResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.HistoryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryResult::IsInitialized() const {
  return true;
}

void HistoryResult::InternalSwap(HistoryResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dic_.Swap(&other->dic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoryResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mam::AccountOverviews* Arena::CreateMaybeMessage< ::mam::AccountOverviews >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::AccountOverviews >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::AccountOverview* Arena::CreateMaybeMessage< ::mam::AccountOverview >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::AccountOverview >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::PriceList_DicEntry_DoNotUse* Arena::CreateMaybeMessage< ::mam::PriceList_DicEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::PriceList_DicEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::PriceList* Arena::CreateMaybeMessage< ::mam::PriceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::PriceList >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::PirceObj* Arena::CreateMaybeMessage< ::mam::PirceObj >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::PirceObj >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::HistoryResult_DicEntry_DoNotUse* Arena::CreateMaybeMessage< ::mam::HistoryResult_DicEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::HistoryResult_DicEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::HistoryResult* Arena::CreateMaybeMessage< ::mam::HistoryResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::HistoryResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
