// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tenth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tenth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tenth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tenth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tenth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tenth_2eproto;
namespace mam {
class AccountInfo;
class AccountInfoDefaultTypeInternal;
extern AccountInfoDefaultTypeInternal _AccountInfo_default_instance_;
class AccountOverview;
class AccountOverviewDefaultTypeInternal;
extern AccountOverviewDefaultTypeInternal _AccountOverview_default_instance_;
class FieldRule;
class FieldRuleDefaultTypeInternal;
extern FieldRuleDefaultTypeInternal _FieldRule_default_instance_;
class ProfitDetail;
class ProfitDetailDefaultTypeInternal;
extern ProfitDetailDefaultTypeInternal _ProfitDetail_default_instance_;
class SaveRequest;
class SaveRequestDefaultTypeInternal;
extern SaveRequestDefaultTypeInternal _SaveRequest_default_instance_;
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> ::mam::AccountInfo* Arena::CreateMaybeMessage<::mam::AccountInfo>(Arena*);
template<> ::mam::AccountOverview* Arena::CreateMaybeMessage<::mam::AccountOverview>(Arena*);
template<> ::mam::FieldRule* Arena::CreateMaybeMessage<::mam::FieldRule>(Arena*);
template<> ::mam::ProfitDetail* Arena::CreateMaybeMessage<::mam::ProfitDetail>(Arena*);
template<> ::mam::SaveRequest* Arena::CreateMaybeMessage<::mam::SaveRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mam {

enum SaveMode : int {
  None = 0,
  Create = 1,
  Update = 2,
  Append = 3,
  SaveMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SaveMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SaveMode_IsValid(int value);
constexpr SaveMode SaveMode_MIN = None;
constexpr SaveMode SaveMode_MAX = Append;
constexpr int SaveMode_ARRAYSIZE = SaveMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SaveMode_descriptor();
template<typename T>
inline const std::string& SaveMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SaveMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SaveMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SaveMode_descriptor(), enum_t_value);
}
inline bool SaveMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SaveMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SaveMode>(
    SaveMode_descriptor(), name, value);
}
// ===================================================================

class FieldRule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.FieldRule) */ {
 public:
  inline FieldRule() : FieldRule(nullptr) {}
  virtual ~FieldRule();

  FieldRule(const FieldRule& from);
  FieldRule(FieldRule&& from) noexcept
    : FieldRule() {
    *this = ::std::move(from);
  }

  inline FieldRule& operator=(const FieldRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldRule& operator=(FieldRule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldRule* internal_default_instance() {
    return reinterpret_cast<const FieldRule*>(
               &_FieldRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FieldRule& a, FieldRule& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldRule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldRule* New() const final {
    return CreateMaybeMessage<FieldRule>(nullptr);
  }

  FieldRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldRule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldRule& from);
  void MergeFrom(const FieldRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.FieldRule";
  }
  protected:
  explicit FieldRule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenth_2eproto);
    return ::descriptor_table_tenth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegexFieldNumber = 5,
    kStringAsKeyFieldNumber = 7,
    kStrLenMaxFieldNumber = 1,
    kStrLenMinFieldNumber = 2,
    kPodValMaxFieldNumber = 3,
    kPodValMinFieldNumber = 4,
    kInt32AsKeyFieldNumber = 6,
  };
  // string regex = 5;
  void clear_regex();
  const std::string& regex() const;
  void set_regex(const std::string& value);
  void set_regex(std::string&& value);
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  std::string* mutable_regex();
  std::string* release_regex();
  void set_allocated_regex(std::string* regex);
  private:
  const std::string& _internal_regex() const;
  void _internal_set_regex(const std::string& value);
  std::string* _internal_mutable_regex();
  public:

  // string string_as_key = 7;
  void clear_string_as_key();
  const std::string& string_as_key() const;
  void set_string_as_key(const std::string& value);
  void set_string_as_key(std::string&& value);
  void set_string_as_key(const char* value);
  void set_string_as_key(const char* value, size_t size);
  std::string* mutable_string_as_key();
  std::string* release_string_as_key();
  void set_allocated_string_as_key(std::string* string_as_key);
  private:
  const std::string& _internal_string_as_key() const;
  void _internal_set_string_as_key(const std::string& value);
  std::string* _internal_mutable_string_as_key();
  public:

  // uint32 str_len_max = 1;
  void clear_str_len_max();
  ::PROTOBUF_NAMESPACE_ID::uint32 str_len_max() const;
  void set_str_len_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_str_len_max() const;
  void _internal_set_str_len_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 str_len_min = 2;
  void clear_str_len_min();
  ::PROTOBUF_NAMESPACE_ID::uint32 str_len_min() const;
  void set_str_len_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_str_len_min() const;
  void _internal_set_str_len_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pod_val_max = 3;
  void clear_pod_val_max();
  ::PROTOBUF_NAMESPACE_ID::uint32 pod_val_max() const;
  void set_pod_val_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pod_val_max() const;
  void _internal_set_pod_val_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pod_val_min = 4;
  void clear_pod_val_min();
  ::PROTOBUF_NAMESPACE_ID::uint32 pod_val_min() const;
  void set_pod_val_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pod_val_min() const;
  void _internal_set_pod_val_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 int32_as_key = 6;
  void clear_int32_as_key();
  ::PROTOBUF_NAMESPACE_ID::int32 int32_as_key() const;
  void set_int32_as_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32_as_key() const;
  void _internal_set_int32_as_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.FieldRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_as_key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 str_len_max_;
  ::PROTOBUF_NAMESPACE_ID::uint32 str_len_min_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pod_val_max_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pod_val_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 int32_as_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenth_2eproto;
};
// -------------------------------------------------------------------

class SaveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.SaveRequest) */ {
 public:
  inline SaveRequest() : SaveRequest(nullptr) {}
  virtual ~SaveRequest();

  SaveRequest(const SaveRequest& from);
  SaveRequest(SaveRequest&& from) noexcept
    : SaveRequest() {
    *this = ::std::move(from);
  }

  inline SaveRequest& operator=(const SaveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveRequest& operator=(SaveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveRequest* internal_default_instance() {
    return reinterpret_cast<const SaveRequest*>(
               &_SaveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SaveRequest& a, SaveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveRequest* New() const final {
    return CreateMaybeMessage<SaveRequest>(nullptr);
  }

  SaveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveRequest& from);
  void MergeFrom(const SaveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.SaveRequest";
  }
  protected:
  explicit SaveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenth_2eproto);
    return ::descriptor_table_tenth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountOverviewFieldNumber = 3,
    kProfitDetailFieldNumber = 4,
    kAccountInfoFieldNumber = 5,
    kDateFieldNumber = 2,
    kModeFieldNumber = 1,
  };
  // repeated .mam.AccountOverview account_overview = 3;
  int account_overview_size() const;
  private:
  int _internal_account_overview_size() const;
  public:
  void clear_account_overview();
  ::mam::AccountOverview* mutable_account_overview(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountOverview >*
      mutable_account_overview();
  private:
  const ::mam::AccountOverview& _internal_account_overview(int index) const;
  ::mam::AccountOverview* _internal_add_account_overview();
  public:
  const ::mam::AccountOverview& account_overview(int index) const;
  ::mam::AccountOverview* add_account_overview();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountOverview >&
      account_overview() const;

  // repeated .mam.ProfitDetail profit_detail = 4;
  int profit_detail_size() const;
  private:
  int _internal_profit_detail_size() const;
  public:
  void clear_profit_detail();
  ::mam::ProfitDetail* mutable_profit_detail(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::ProfitDetail >*
      mutable_profit_detail();
  private:
  const ::mam::ProfitDetail& _internal_profit_detail(int index) const;
  ::mam::ProfitDetail* _internal_add_profit_detail();
  public:
  const ::mam::ProfitDetail& profit_detail(int index) const;
  ::mam::ProfitDetail* add_profit_detail();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::ProfitDetail >&
      profit_detail() const;

  // repeated .mam.AccountInfo account_info = 5;
  int account_info_size() const;
  private:
  int _internal_account_info_size() const;
  public:
  void clear_account_info();
  ::mam::AccountInfo* mutable_account_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountInfo >*
      mutable_account_info();
  private:
  const ::mam::AccountInfo& _internal_account_info(int index) const;
  ::mam::AccountInfo* _internal_add_account_info();
  public:
  const ::mam::AccountInfo& account_info(int index) const;
  ::mam::AccountInfo* add_account_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountInfo >&
      account_info() const;

  // string date = 2;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // .mam.SaveMode mode = 1;
  void clear_mode();
  ::mam::SaveMode mode() const;
  void set_mode(::mam::SaveMode value);
  private:
  ::mam::SaveMode _internal_mode() const;
  void _internal_set_mode(::mam::SaveMode value);
  public:

  // @@protoc_insertion_point(class_scope:mam.SaveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountOverview > account_overview_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::ProfitDetail > profit_detail_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountInfo > account_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenth_2eproto;
};
// -------------------------------------------------------------------

class AccountOverview PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.AccountOverview) */ {
 public:
  inline AccountOverview() : AccountOverview(nullptr) {}
  virtual ~AccountOverview();

  AccountOverview(const AccountOverview& from);
  AccountOverview(AccountOverview&& from) noexcept
    : AccountOverview() {
    *this = ::std::move(from);
  }

  inline AccountOverview& operator=(const AccountOverview& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountOverview& operator=(AccountOverview&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountOverview& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountOverview* internal_default_instance() {
    return reinterpret_cast<const AccountOverview*>(
               &_AccountOverview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AccountOverview& a, AccountOverview& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountOverview* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountOverview* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountOverview* New() const final {
    return CreateMaybeMessage<AccountOverview>(nullptr);
  }

  AccountOverview* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountOverview>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountOverview& from);
  void MergeFrom(const AccountOverview& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountOverview* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.AccountOverview";
  }
  protected:
  explicit AccountOverview(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenth_2eproto);
    return ::descriptor_table_tenth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 13,
    kTurnoverFieldNumber = 2,
    kRateFieldNumber = 3,
    kFeeFieldNumber = 4,
    kProfitFieldNumber = 5,
    kCanceledFieldNumber = 6,
    kAccountidFieldNumber = 1,
    kServerFieldNumber = 12,
    kFailedFieldNumber = 7,
    kAcceptcostFieldNumber = 8,
    kMatchcostFieldNumber = 9,
    kBaseFieldNumber = 10,
    kCloseProfitFieldNumber = 11,
  };
  // string group = 13;
  void clear_group();
  const std::string& group() const;
  void set_group(const std::string& value);
  void set_group(std::string&& value);
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  std::string* mutable_group();
  std::string* release_group();
  void set_allocated_group(std::string* group);
  private:
  const std::string& _internal_group() const;
  void _internal_set_group(const std::string& value);
  std::string* _internal_mutable_group();
  public:

  // double turnover = 2;
  void clear_turnover();
  double turnover() const;
  void set_turnover(double value);
  private:
  double _internal_turnover() const;
  void _internal_set_turnover(double value);
  public:

  // double rate = 3;
  void clear_rate();
  double rate() const;
  void set_rate(double value);
  private:
  double _internal_rate() const;
  void _internal_set_rate(double value);
  public:

  // double fee = 4;
  void clear_fee();
  double fee() const;
  void set_fee(double value);
  private:
  double _internal_fee() const;
  void _internal_set_fee(double value);
  public:

  // double profit = 5;
  void clear_profit();
  double profit() const;
  void set_profit(double value);
  private:
  double _internal_profit() const;
  void _internal_set_profit(double value);
  public:

  // double canceled = 6;
  void clear_canceled();
  double canceled() const;
  void set_canceled(double value);
  private:
  double _internal_canceled() const;
  void _internal_set_canceled(double value);
  public:

  // int32 accountid = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::int32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server = 12;
  void clear_server();
  ::PROTOBUF_NAMESPACE_ID::int32 server() const;
  void set_server(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server() const;
  void _internal_set_server(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double failed = 7;
  void clear_failed();
  double failed() const;
  void set_failed(double value);
  private:
  double _internal_failed() const;
  void _internal_set_failed(double value);
  public:

  // double acceptcost = 8;
  void clear_acceptcost();
  double acceptcost() const;
  void set_acceptcost(double value);
  private:
  double _internal_acceptcost() const;
  void _internal_set_acceptcost(double value);
  public:

  // double matchcost = 9;
  void clear_matchcost();
  double matchcost() const;
  void set_matchcost(double value);
  private:
  double _internal_matchcost() const;
  void _internal_set_matchcost(double value);
  public:

  // double base = 10;
  void clear_base();
  double base() const;
  void set_base(double value);
  private:
  double _internal_base() const;
  void _internal_set_base(double value);
  public:

  // double close_profit = 11;
  void clear_close_profit();
  double close_profit() const;
  void set_close_profit(double value);
  private:
  double _internal_close_profit() const;
  void _internal_set_close_profit(double value);
  public:

  // @@protoc_insertion_point(class_scope:mam.AccountOverview)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
  double turnover_;
  double rate_;
  double fee_;
  double profit_;
  double canceled_;
  ::PROTOBUF_NAMESPACE_ID::int32 accountid_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_;
  double failed_;
  double acceptcost_;
  double matchcost_;
  double base_;
  double close_profit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenth_2eproto;
};
// -------------------------------------------------------------------

class ProfitDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.ProfitDetail) */ {
 public:
  inline ProfitDetail() : ProfitDetail(nullptr) {}
  virtual ~ProfitDetail();

  ProfitDetail(const ProfitDetail& from);
  ProfitDetail(ProfitDetail&& from) noexcept
    : ProfitDetail() {
    *this = ::std::move(from);
  }

  inline ProfitDetail& operator=(const ProfitDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfitDetail& operator=(ProfitDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfitDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfitDetail* internal_default_instance() {
    return reinterpret_cast<const ProfitDetail*>(
               &_ProfitDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProfitDetail& a, ProfitDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfitDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfitDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfitDetail* New() const final {
    return CreateMaybeMessage<ProfitDetail>(nullptr);
  }

  ProfitDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfitDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfitDetail& from);
  void MergeFrom(const ProfitDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfitDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.ProfitDetail";
  }
  protected:
  explicit ProfitDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenth_2eproto);
    return ::descriptor_table_tenth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 2,
    kAccountidFieldNumber = 1,
    kCfgvolFieldNumber = 3,
    kBuyvolFieldNumber = 4,
    kSellvolFieldNumber = 5,
    kBuyamountFieldNumber = 6,
    kSellamountFieldNumber = 7,
    kFloatprofitFieldNumber = 8,
    kSettleprofitFieldNumber = 9,
    kFeeFieldNumber = 10,
    kServerFieldNumber = 11,
  };
  // string symbol = 2 [(.mam.knightrule) = {
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // int32 accountid = 1 [(.mam.knightrule) = {
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::int32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cfgvol = 3 [(.mam.knightrule) = {
  void clear_cfgvol();
  ::PROTOBUF_NAMESPACE_ID::int32 cfgvol() const;
  void set_cfgvol(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cfgvol() const;
  void _internal_set_cfgvol(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 buyvol = 4;
  void clear_buyvol();
  ::PROTOBUF_NAMESPACE_ID::int32 buyvol() const;
  void set_buyvol(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buyvol() const;
  void _internal_set_buyvol(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sellvol = 5;
  void clear_sellvol();
  ::PROTOBUF_NAMESPACE_ID::int32 sellvol() const;
  void set_sellvol(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sellvol() const;
  void _internal_set_sellvol(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double buyamount = 6;
  void clear_buyamount();
  double buyamount() const;
  void set_buyamount(double value);
  private:
  double _internal_buyamount() const;
  void _internal_set_buyamount(double value);
  public:

  // double sellamount = 7;
  void clear_sellamount();
  double sellamount() const;
  void set_sellamount(double value);
  private:
  double _internal_sellamount() const;
  void _internal_set_sellamount(double value);
  public:

  // double floatprofit = 8;
  void clear_floatprofit();
  double floatprofit() const;
  void set_floatprofit(double value);
  private:
  double _internal_floatprofit() const;
  void _internal_set_floatprofit(double value);
  public:

  // double settleprofit = 9;
  void clear_settleprofit();
  double settleprofit() const;
  void set_settleprofit(double value);
  private:
  double _internal_settleprofit() const;
  void _internal_set_settleprofit(double value);
  public:

  // double fee = 10;
  void clear_fee();
  double fee() const;
  void set_fee(double value);
  private:
  double _internal_fee() const;
  void _internal_set_fee(double value);
  public:

  // int32 server = 11;
  void clear_server();
  ::PROTOBUF_NAMESPACE_ID::int32 server() const;
  void set_server(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server() const;
  void _internal_set_server(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.ProfitDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 accountid_;
  ::PROTOBUF_NAMESPACE_ID::int32 cfgvol_;
  ::PROTOBUF_NAMESPACE_ID::int32 buyvol_;
  ::PROTOBUF_NAMESPACE_ID::int32 sellvol_;
  double buyamount_;
  double sellamount_;
  double floatprofit_;
  double settleprofit_;
  double fee_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenth_2eproto;
};
// -------------------------------------------------------------------

class AccountInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.AccountInfo) */ {
 public:
  inline AccountInfo() : AccountInfo(nullptr) {}
  virtual ~AccountInfo();

  AccountInfo(const AccountInfo& from);
  AccountInfo(AccountInfo&& from) noexcept
    : AccountInfo() {
    *this = ::std::move(from);
  }

  inline AccountInfo& operator=(const AccountInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountInfo& operator=(AccountInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountInfo* internal_default_instance() {
    return reinterpret_cast<const AccountInfo*>(
               &_AccountInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AccountInfo& a, AccountInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountInfo* New() const final {
    return CreateMaybeMessage<AccountInfo>(nullptr);
  }

  AccountInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountInfo& from);
  void MergeFrom(const AccountInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.AccountInfo";
  }
  protected:
  explicit AccountInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tenth_2eproto);
    return ::descriptor_table_tenth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShcommissionFieldNumber = 2,
    kSzcommissionFieldNumber = 3,
    kAsFieldNumber = 5,
    kBuyTypeFieldNumber = 6,
    kSellTypeFieldNumber = 7,
    kGroupFieldNumber = 8,
    kServerFieldNumber = 9,
    kIdFieldNumber = 1,
    kLowcostFieldNumber = 4,
  };
  // string shcommission = 2;
  void clear_shcommission();
  const std::string& shcommission() const;
  void set_shcommission(const std::string& value);
  void set_shcommission(std::string&& value);
  void set_shcommission(const char* value);
  void set_shcommission(const char* value, size_t size);
  std::string* mutable_shcommission();
  std::string* release_shcommission();
  void set_allocated_shcommission(std::string* shcommission);
  private:
  const std::string& _internal_shcommission() const;
  void _internal_set_shcommission(const std::string& value);
  std::string* _internal_mutable_shcommission();
  public:

  // string szcommission = 3;
  void clear_szcommission();
  const std::string& szcommission() const;
  void set_szcommission(const std::string& value);
  void set_szcommission(std::string&& value);
  void set_szcommission(const char* value);
  void set_szcommission(const char* value, size_t size);
  std::string* mutable_szcommission();
  std::string* release_szcommission();
  void set_allocated_szcommission(std::string* szcommission);
  private:
  const std::string& _internal_szcommission() const;
  void _internal_set_szcommission(const std::string& value);
  std::string* _internal_mutable_szcommission();
  public:

  // string as = 5;
  void clear_as();
  const std::string& as() const;
  void set_as(const std::string& value);
  void set_as(std::string&& value);
  void set_as(const char* value);
  void set_as(const char* value, size_t size);
  std::string* mutable_as();
  std::string* release_as();
  void set_allocated_as(std::string* as);
  private:
  const std::string& _internal_as() const;
  void _internal_set_as(const std::string& value);
  std::string* _internal_mutable_as();
  public:

  // string buyType = 6;
  void clear_buytype();
  const std::string& buytype() const;
  void set_buytype(const std::string& value);
  void set_buytype(std::string&& value);
  void set_buytype(const char* value);
  void set_buytype(const char* value, size_t size);
  std::string* mutable_buytype();
  std::string* release_buytype();
  void set_allocated_buytype(std::string* buytype);
  private:
  const std::string& _internal_buytype() const;
  void _internal_set_buytype(const std::string& value);
  std::string* _internal_mutable_buytype();
  public:

  // string sellType = 7;
  void clear_selltype();
  const std::string& selltype() const;
  void set_selltype(const std::string& value);
  void set_selltype(std::string&& value);
  void set_selltype(const char* value);
  void set_selltype(const char* value, size_t size);
  std::string* mutable_selltype();
  std::string* release_selltype();
  void set_allocated_selltype(std::string* selltype);
  private:
  const std::string& _internal_selltype() const;
  void _internal_set_selltype(const std::string& value);
  std::string* _internal_mutable_selltype();
  public:

  // string group = 8;
  void clear_group();
  const std::string& group() const;
  void set_group(const std::string& value);
  void set_group(std::string&& value);
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  std::string* mutable_group();
  std::string* release_group();
  void set_allocated_group(std::string* group);
  private:
  const std::string& _internal_group() const;
  void _internal_set_group(const std::string& value);
  std::string* _internal_mutable_group();
  public:

  // string server = 9;
  void clear_server();
  const std::string& server() const;
  void set_server(const std::string& value);
  void set_server(std::string&& value);
  void set_server(const char* value);
  void set_server(const char* value, size_t size);
  std::string* mutable_server();
  std::string* release_server();
  void set_allocated_server(std::string* server);
  private:
  const std::string& _internal_server() const;
  void _internal_set_server(const std::string& value);
  std::string* _internal_mutable_server();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 lowcost = 4;
  void clear_lowcost();
  ::PROTOBUF_NAMESPACE_ID::int32 lowcost() const;
  void set_lowcost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lowcost() const;
  void _internal_set_lowcost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.AccountInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shcommission_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr szcommission_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr as_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buytype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selltype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 lowcost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tenth_2eproto;
};
// ===================================================================

static const int kKnightruleFieldNumber = 10086;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mam::FieldRule >, 11, false >
  knightrule;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FieldRule

// uint32 str_len_max = 1;
inline void FieldRule::clear_str_len_max() {
  str_len_max_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FieldRule::_internal_str_len_max() const {
  return str_len_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FieldRule::str_len_max() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.str_len_max)
  return _internal_str_len_max();
}
inline void FieldRule::_internal_set_str_len_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  str_len_max_ = value;
}
inline void FieldRule::set_str_len_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_str_len_max(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.str_len_max)
}

// uint32 str_len_min = 2;
inline void FieldRule::clear_str_len_min() {
  str_len_min_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FieldRule::_internal_str_len_min() const {
  return str_len_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FieldRule::str_len_min() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.str_len_min)
  return _internal_str_len_min();
}
inline void FieldRule::_internal_set_str_len_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  str_len_min_ = value;
}
inline void FieldRule::set_str_len_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_str_len_min(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.str_len_min)
}

// uint32 pod_val_max = 3;
inline void FieldRule::clear_pod_val_max() {
  pod_val_max_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FieldRule::_internal_pod_val_max() const {
  return pod_val_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FieldRule::pod_val_max() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.pod_val_max)
  return _internal_pod_val_max();
}
inline void FieldRule::_internal_set_pod_val_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pod_val_max_ = value;
}
inline void FieldRule::set_pod_val_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pod_val_max(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.pod_val_max)
}

// uint32 pod_val_min = 4;
inline void FieldRule::clear_pod_val_min() {
  pod_val_min_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FieldRule::_internal_pod_val_min() const {
  return pod_val_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FieldRule::pod_val_min() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.pod_val_min)
  return _internal_pod_val_min();
}
inline void FieldRule::_internal_set_pod_val_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pod_val_min_ = value;
}
inline void FieldRule::set_pod_val_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pod_val_min(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.pod_val_min)
}

// string regex = 5;
inline void FieldRule::clear_regex() {
  regex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FieldRule::regex() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.regex)
  return _internal_regex();
}
inline void FieldRule::set_regex(const std::string& value) {
  _internal_set_regex(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.regex)
}
inline std::string* FieldRule::mutable_regex() {
  // @@protoc_insertion_point(field_mutable:mam.FieldRule.regex)
  return _internal_mutable_regex();
}
inline const std::string& FieldRule::_internal_regex() const {
  return regex_.Get();
}
inline void FieldRule::_internal_set_regex(const std::string& value) {
  
  regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FieldRule::set_regex(std::string&& value) {
  
  regex_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.FieldRule.regex)
}
inline void FieldRule::set_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.FieldRule.regex)
}
inline void FieldRule::set_regex(const char* value,
    size_t size) {
  
  regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.FieldRule.regex)
}
inline std::string* FieldRule::_internal_mutable_regex() {
  
  return regex_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FieldRule::release_regex() {
  // @@protoc_insertion_point(field_release:mam.FieldRule.regex)
  return regex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FieldRule::set_allocated_regex(std::string* regex) {
  if (regex != nullptr) {
    
  } else {
    
  }
  regex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.FieldRule.regex)
}

// int32 int32_as_key = 6;
inline void FieldRule::clear_int32_as_key() {
  int32_as_key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldRule::_internal_int32_as_key() const {
  return int32_as_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldRule::int32_as_key() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.int32_as_key)
  return _internal_int32_as_key();
}
inline void FieldRule::_internal_set_int32_as_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  int32_as_key_ = value;
}
inline void FieldRule::set_int32_as_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int32_as_key(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.int32_as_key)
}

// string string_as_key = 7;
inline void FieldRule::clear_string_as_key() {
  string_as_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FieldRule::string_as_key() const {
  // @@protoc_insertion_point(field_get:mam.FieldRule.string_as_key)
  return _internal_string_as_key();
}
inline void FieldRule::set_string_as_key(const std::string& value) {
  _internal_set_string_as_key(value);
  // @@protoc_insertion_point(field_set:mam.FieldRule.string_as_key)
}
inline std::string* FieldRule::mutable_string_as_key() {
  // @@protoc_insertion_point(field_mutable:mam.FieldRule.string_as_key)
  return _internal_mutable_string_as_key();
}
inline const std::string& FieldRule::_internal_string_as_key() const {
  return string_as_key_.Get();
}
inline void FieldRule::_internal_set_string_as_key(const std::string& value) {
  
  string_as_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FieldRule::set_string_as_key(std::string&& value) {
  
  string_as_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.FieldRule.string_as_key)
}
inline void FieldRule::set_string_as_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  string_as_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.FieldRule.string_as_key)
}
inline void FieldRule::set_string_as_key(const char* value,
    size_t size) {
  
  string_as_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.FieldRule.string_as_key)
}
inline std::string* FieldRule::_internal_mutable_string_as_key() {
  
  return string_as_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FieldRule::release_string_as_key() {
  // @@protoc_insertion_point(field_release:mam.FieldRule.string_as_key)
  return string_as_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FieldRule::set_allocated_string_as_key(std::string* string_as_key) {
  if (string_as_key != nullptr) {
    
  } else {
    
  }
  string_as_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_as_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.FieldRule.string_as_key)
}

// -------------------------------------------------------------------

// SaveRequest

// .mam.SaveMode mode = 1;
inline void SaveRequest::clear_mode() {
  mode_ = 0;
}
inline ::mam::SaveMode SaveRequest::_internal_mode() const {
  return static_cast< ::mam::SaveMode >(mode_);
}
inline ::mam::SaveMode SaveRequest::mode() const {
  // @@protoc_insertion_point(field_get:mam.SaveRequest.mode)
  return _internal_mode();
}
inline void SaveRequest::_internal_set_mode(::mam::SaveMode value) {
  
  mode_ = value;
}
inline void SaveRequest::set_mode(::mam::SaveMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:mam.SaveRequest.mode)
}

// string date = 2;
inline void SaveRequest::clear_date() {
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SaveRequest::date() const {
  // @@protoc_insertion_point(field_get:mam.SaveRequest.date)
  return _internal_date();
}
inline void SaveRequest::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:mam.SaveRequest.date)
}
inline std::string* SaveRequest::mutable_date() {
  // @@protoc_insertion_point(field_mutable:mam.SaveRequest.date)
  return _internal_mutable_date();
}
inline const std::string& SaveRequest::_internal_date() const {
  return date_.Get();
}
inline void SaveRequest::_internal_set_date(const std::string& value) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SaveRequest::set_date(std::string&& value) {
  
  date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.SaveRequest.date)
}
inline void SaveRequest::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.SaveRequest.date)
}
inline void SaveRequest::set_date(const char* value,
    size_t size) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.SaveRequest.date)
}
inline std::string* SaveRequest::_internal_mutable_date() {
  
  return date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SaveRequest::release_date() {
  // @@protoc_insertion_point(field_release:mam.SaveRequest.date)
  return date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SaveRequest::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.SaveRequest.date)
}

// repeated .mam.AccountOverview account_overview = 3;
inline int SaveRequest::_internal_account_overview_size() const {
  return account_overview_.size();
}
inline int SaveRequest::account_overview_size() const {
  return _internal_account_overview_size();
}
inline void SaveRequest::clear_account_overview() {
  account_overview_.Clear();
}
inline ::mam::AccountOverview* SaveRequest::mutable_account_overview(int index) {
  // @@protoc_insertion_point(field_mutable:mam.SaveRequest.account_overview)
  return account_overview_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountOverview >*
SaveRequest::mutable_account_overview() {
  // @@protoc_insertion_point(field_mutable_list:mam.SaveRequest.account_overview)
  return &account_overview_;
}
inline const ::mam::AccountOverview& SaveRequest::_internal_account_overview(int index) const {
  return account_overview_.Get(index);
}
inline const ::mam::AccountOverview& SaveRequest::account_overview(int index) const {
  // @@protoc_insertion_point(field_get:mam.SaveRequest.account_overview)
  return _internal_account_overview(index);
}
inline ::mam::AccountOverview* SaveRequest::_internal_add_account_overview() {
  return account_overview_.Add();
}
inline ::mam::AccountOverview* SaveRequest::add_account_overview() {
  // @@protoc_insertion_point(field_add:mam.SaveRequest.account_overview)
  return _internal_add_account_overview();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountOverview >&
SaveRequest::account_overview() const {
  // @@protoc_insertion_point(field_list:mam.SaveRequest.account_overview)
  return account_overview_;
}

// repeated .mam.ProfitDetail profit_detail = 4;
inline int SaveRequest::_internal_profit_detail_size() const {
  return profit_detail_.size();
}
inline int SaveRequest::profit_detail_size() const {
  return _internal_profit_detail_size();
}
inline void SaveRequest::clear_profit_detail() {
  profit_detail_.Clear();
}
inline ::mam::ProfitDetail* SaveRequest::mutable_profit_detail(int index) {
  // @@protoc_insertion_point(field_mutable:mam.SaveRequest.profit_detail)
  return profit_detail_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::ProfitDetail >*
SaveRequest::mutable_profit_detail() {
  // @@protoc_insertion_point(field_mutable_list:mam.SaveRequest.profit_detail)
  return &profit_detail_;
}
inline const ::mam::ProfitDetail& SaveRequest::_internal_profit_detail(int index) const {
  return profit_detail_.Get(index);
}
inline const ::mam::ProfitDetail& SaveRequest::profit_detail(int index) const {
  // @@protoc_insertion_point(field_get:mam.SaveRequest.profit_detail)
  return _internal_profit_detail(index);
}
inline ::mam::ProfitDetail* SaveRequest::_internal_add_profit_detail() {
  return profit_detail_.Add();
}
inline ::mam::ProfitDetail* SaveRequest::add_profit_detail() {
  // @@protoc_insertion_point(field_add:mam.SaveRequest.profit_detail)
  return _internal_add_profit_detail();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::ProfitDetail >&
SaveRequest::profit_detail() const {
  // @@protoc_insertion_point(field_list:mam.SaveRequest.profit_detail)
  return profit_detail_;
}

// repeated .mam.AccountInfo account_info = 5;
inline int SaveRequest::_internal_account_info_size() const {
  return account_info_.size();
}
inline int SaveRequest::account_info_size() const {
  return _internal_account_info_size();
}
inline void SaveRequest::clear_account_info() {
  account_info_.Clear();
}
inline ::mam::AccountInfo* SaveRequest::mutable_account_info(int index) {
  // @@protoc_insertion_point(field_mutable:mam.SaveRequest.account_info)
  return account_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountInfo >*
SaveRequest::mutable_account_info() {
  // @@protoc_insertion_point(field_mutable_list:mam.SaveRequest.account_info)
  return &account_info_;
}
inline const ::mam::AccountInfo& SaveRequest::_internal_account_info(int index) const {
  return account_info_.Get(index);
}
inline const ::mam::AccountInfo& SaveRequest::account_info(int index) const {
  // @@protoc_insertion_point(field_get:mam.SaveRequest.account_info)
  return _internal_account_info(index);
}
inline ::mam::AccountInfo* SaveRequest::_internal_add_account_info() {
  return account_info_.Add();
}
inline ::mam::AccountInfo* SaveRequest::add_account_info() {
  // @@protoc_insertion_point(field_add:mam.SaveRequest.account_info)
  return _internal_add_account_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountInfo >&
SaveRequest::account_info() const {
  // @@protoc_insertion_point(field_list:mam.SaveRequest.account_info)
  return account_info_;
}

// -------------------------------------------------------------------

// AccountOverview

// int32 accountid = 1;
inline void AccountOverview::clear_accountid() {
  accountid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountOverview::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountOverview::accountid() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.accountid)
  return _internal_accountid();
}
inline void AccountOverview::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  accountid_ = value;
}
inline void AccountOverview::set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.accountid)
}

// double turnover = 2;
inline void AccountOverview::clear_turnover() {
  turnover_ = 0;
}
inline double AccountOverview::_internal_turnover() const {
  return turnover_;
}
inline double AccountOverview::turnover() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.turnover)
  return _internal_turnover();
}
inline void AccountOverview::_internal_set_turnover(double value) {
  
  turnover_ = value;
}
inline void AccountOverview::set_turnover(double value) {
  _internal_set_turnover(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.turnover)
}

// double rate = 3;
inline void AccountOverview::clear_rate() {
  rate_ = 0;
}
inline double AccountOverview::_internal_rate() const {
  return rate_;
}
inline double AccountOverview::rate() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.rate)
  return _internal_rate();
}
inline void AccountOverview::_internal_set_rate(double value) {
  
  rate_ = value;
}
inline void AccountOverview::set_rate(double value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.rate)
}

// double fee = 4;
inline void AccountOverview::clear_fee() {
  fee_ = 0;
}
inline double AccountOverview::_internal_fee() const {
  return fee_;
}
inline double AccountOverview::fee() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.fee)
  return _internal_fee();
}
inline void AccountOverview::_internal_set_fee(double value) {
  
  fee_ = value;
}
inline void AccountOverview::set_fee(double value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.fee)
}

// double profit = 5;
inline void AccountOverview::clear_profit() {
  profit_ = 0;
}
inline double AccountOverview::_internal_profit() const {
  return profit_;
}
inline double AccountOverview::profit() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.profit)
  return _internal_profit();
}
inline void AccountOverview::_internal_set_profit(double value) {
  
  profit_ = value;
}
inline void AccountOverview::set_profit(double value) {
  _internal_set_profit(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.profit)
}

// double canceled = 6;
inline void AccountOverview::clear_canceled() {
  canceled_ = 0;
}
inline double AccountOverview::_internal_canceled() const {
  return canceled_;
}
inline double AccountOverview::canceled() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.canceled)
  return _internal_canceled();
}
inline void AccountOverview::_internal_set_canceled(double value) {
  
  canceled_ = value;
}
inline void AccountOverview::set_canceled(double value) {
  _internal_set_canceled(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.canceled)
}

// double failed = 7;
inline void AccountOverview::clear_failed() {
  failed_ = 0;
}
inline double AccountOverview::_internal_failed() const {
  return failed_;
}
inline double AccountOverview::failed() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.failed)
  return _internal_failed();
}
inline void AccountOverview::_internal_set_failed(double value) {
  
  failed_ = value;
}
inline void AccountOverview::set_failed(double value) {
  _internal_set_failed(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.failed)
}

// double acceptcost = 8;
inline void AccountOverview::clear_acceptcost() {
  acceptcost_ = 0;
}
inline double AccountOverview::_internal_acceptcost() const {
  return acceptcost_;
}
inline double AccountOverview::acceptcost() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.acceptcost)
  return _internal_acceptcost();
}
inline void AccountOverview::_internal_set_acceptcost(double value) {
  
  acceptcost_ = value;
}
inline void AccountOverview::set_acceptcost(double value) {
  _internal_set_acceptcost(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.acceptcost)
}

// double matchcost = 9;
inline void AccountOverview::clear_matchcost() {
  matchcost_ = 0;
}
inline double AccountOverview::_internal_matchcost() const {
  return matchcost_;
}
inline double AccountOverview::matchcost() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.matchcost)
  return _internal_matchcost();
}
inline void AccountOverview::_internal_set_matchcost(double value) {
  
  matchcost_ = value;
}
inline void AccountOverview::set_matchcost(double value) {
  _internal_set_matchcost(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.matchcost)
}

// double base = 10;
inline void AccountOverview::clear_base() {
  base_ = 0;
}
inline double AccountOverview::_internal_base() const {
  return base_;
}
inline double AccountOverview::base() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.base)
  return _internal_base();
}
inline void AccountOverview::_internal_set_base(double value) {
  
  base_ = value;
}
inline void AccountOverview::set_base(double value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.base)
}

// double close_profit = 11;
inline void AccountOverview::clear_close_profit() {
  close_profit_ = 0;
}
inline double AccountOverview::_internal_close_profit() const {
  return close_profit_;
}
inline double AccountOverview::close_profit() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.close_profit)
  return _internal_close_profit();
}
inline void AccountOverview::_internal_set_close_profit(double value) {
  
  close_profit_ = value;
}
inline void AccountOverview::set_close_profit(double value) {
  _internal_set_close_profit(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.close_profit)
}

// int32 server = 12;
inline void AccountOverview::clear_server() {
  server_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountOverview::_internal_server() const {
  return server_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountOverview::server() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.server)
  return _internal_server();
}
inline void AccountOverview::_internal_set_server(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_ = value;
}
inline void AccountOverview::set_server(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.server)
}

// string group = 13;
inline void AccountOverview::clear_group() {
  group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountOverview::group() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.group)
  return _internal_group();
}
inline void AccountOverview::set_group(const std::string& value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.group)
}
inline std::string* AccountOverview::mutable_group() {
  // @@protoc_insertion_point(field_mutable:mam.AccountOverview.group)
  return _internal_mutable_group();
}
inline const std::string& AccountOverview::_internal_group() const {
  return group_.Get();
}
inline void AccountOverview::_internal_set_group(const std::string& value) {
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountOverview::set_group(std::string&& value) {
  
  group_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.AccountOverview.group)
}
inline void AccountOverview::set_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.AccountOverview.group)
}
inline void AccountOverview::set_group(const char* value,
    size_t size) {
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.AccountOverview.group)
}
inline std::string* AccountOverview::_internal_mutable_group() {
  
  return group_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountOverview::release_group() {
  // @@protoc_insertion_point(field_release:mam.AccountOverview.group)
  return group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountOverview::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    
  } else {
    
  }
  group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.AccountOverview.group)
}

// -------------------------------------------------------------------

// ProfitDetail

// int32 accountid = 1 [(.mam.knightrule) = {
inline void ProfitDetail::clear_accountid() {
  accountid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfitDetail::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfitDetail::accountid() const {
  // @@protoc_insertion_point(field_get:mam.ProfitDetail.accountid)
  return _internal_accountid();
}
inline void ProfitDetail::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  accountid_ = value;
}
inline void ProfitDetail::set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:mam.ProfitDetail.accountid)
}

// string symbol = 2 [(.mam.knightrule) = {
inline void ProfitDetail::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProfitDetail::symbol() const {
  // @@protoc_insertion_point(field_get:mam.ProfitDetail.symbol)
  return _internal_symbol();
}
inline void ProfitDetail::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:mam.ProfitDetail.symbol)
}
inline std::string* ProfitDetail::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:mam.ProfitDetail.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& ProfitDetail::_internal_symbol() const {
  return symbol_.Get();
}
inline void ProfitDetail::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProfitDetail::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.ProfitDetail.symbol)
}
inline void ProfitDetail::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.ProfitDetail.symbol)
}
inline void ProfitDetail::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.ProfitDetail.symbol)
}
inline std::string* ProfitDetail::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProfitDetail::release_symbol() {
  // @@protoc_insertion_point(field_release:mam.ProfitDetail.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfitDetail::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.ProfitDetail.symbol)
}

// int32 cfgvol = 3 [(.mam.knightrule) = {
inline void ProfitDetail::clear_cfgvol() {
  cfgvol_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfitDetail::_internal_cfgvol() const {
  return cfgvol_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfitDetail::cfgvol() const {
  // @@protoc_insertion_point(field_get:mam.ProfitDetail.cfgvol)
  return _internal_cfgvol();
}
inline void ProfitDetail::_internal_set_cfgvol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cfgvol_ = value;
}
inline void ProfitDetail::set_cfgvol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cfgvol(value);
  // @@protoc_insertion_point(field_set:mam.ProfitDetail.cfgvol)
}

// int32 buyvol = 4;
inline void ProfitDetail::clear_buyvol() {
  buyvol_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfitDetail::_internal_buyvol() const {
  return buyvol_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfitDetail::buyvol() const {
  // @@protoc_insertion_point(field_get:mam.ProfitDetail.buyvol)
  return _internal_buyvol();
}
inline void ProfitDetail::_internal_set_buyvol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buyvol_ = value;
}
inline void ProfitDetail::set_buyvol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buyvol(value);
  // @@protoc_insertion_point(field_set:mam.ProfitDetail.buyvol)
}

// int32 sellvol = 5;
inline void ProfitDetail::clear_sellvol() {
  sellvol_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfitDetail::_internal_sellvol() const {
  return sellvol_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfitDetail::sellvol() const {
  // @@protoc_insertion_point(field_get:mam.ProfitDetail.sellvol)
  return _internal_sellvol();
}
inline void ProfitDetail::_internal_set_sellvol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sellvol_ = value;
}
inline void ProfitDetail::set_sellvol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sellvol(value);
  // @@protoc_insertion_point(field_set:mam.ProfitDetail.sellvol)
}

// double buyamount = 6;
inline void ProfitDetail::clear_buyamount() {
  buyamount_ = 0;
}
inline double ProfitDetail::_internal_buyamount() const {
  return buyamount_;
}
inline double ProfitDetail::buyamount() const {
  // @@protoc_insertion_point(field_get:mam.ProfitDetail.buyamount)
  return _internal_buyamount();
}
inline void ProfitDetail::_internal_set_buyamount(double value) {
  
  buyamount_ = value;
}
inline void ProfitDetail::set_buyamount(double value) {
  _internal_set_buyamount(value);
  // @@protoc_insertion_point(field_set:mam.ProfitDetail.buyamount)
}

// double sellamount = 7;
inline void ProfitDetail::clear_sellamount() {
  sellamount_ = 0;
}
inline double ProfitDetail::_internal_sellamount() const {
  return sellamount_;
}
inline double ProfitDetail::sellamount() const {
  // @@protoc_insertion_point(field_get:mam.ProfitDetail.sellamount)
  return _internal_sellamount();
}
inline void ProfitDetail::_internal_set_sellamount(double value) {
  
  sellamount_ = value;
}
inline void ProfitDetail::set_sellamount(double value) {
  _internal_set_sellamount(value);
  // @@protoc_insertion_point(field_set:mam.ProfitDetail.sellamount)
}

// double floatprofit = 8;
inline void ProfitDetail::clear_floatprofit() {
  floatprofit_ = 0;
}
inline double ProfitDetail::_internal_floatprofit() const {
  return floatprofit_;
}
inline double ProfitDetail::floatprofit() const {
  // @@protoc_insertion_point(field_get:mam.ProfitDetail.floatprofit)
  return _internal_floatprofit();
}
inline void ProfitDetail::_internal_set_floatprofit(double value) {
  
  floatprofit_ = value;
}
inline void ProfitDetail::set_floatprofit(double value) {
  _internal_set_floatprofit(value);
  // @@protoc_insertion_point(field_set:mam.ProfitDetail.floatprofit)
}

// double settleprofit = 9;
inline void ProfitDetail::clear_settleprofit() {
  settleprofit_ = 0;
}
inline double ProfitDetail::_internal_settleprofit() const {
  return settleprofit_;
}
inline double ProfitDetail::settleprofit() const {
  // @@protoc_insertion_point(field_get:mam.ProfitDetail.settleprofit)
  return _internal_settleprofit();
}
inline void ProfitDetail::_internal_set_settleprofit(double value) {
  
  settleprofit_ = value;
}
inline void ProfitDetail::set_settleprofit(double value) {
  _internal_set_settleprofit(value);
  // @@protoc_insertion_point(field_set:mam.ProfitDetail.settleprofit)
}

// double fee = 10;
inline void ProfitDetail::clear_fee() {
  fee_ = 0;
}
inline double ProfitDetail::_internal_fee() const {
  return fee_;
}
inline double ProfitDetail::fee() const {
  // @@protoc_insertion_point(field_get:mam.ProfitDetail.fee)
  return _internal_fee();
}
inline void ProfitDetail::_internal_set_fee(double value) {
  
  fee_ = value;
}
inline void ProfitDetail::set_fee(double value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:mam.ProfitDetail.fee)
}

// int32 server = 11;
inline void ProfitDetail::clear_server() {
  server_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfitDetail::_internal_server() const {
  return server_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfitDetail::server() const {
  // @@protoc_insertion_point(field_get:mam.ProfitDetail.server)
  return _internal_server();
}
inline void ProfitDetail::_internal_set_server(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_ = value;
}
inline void ProfitDetail::set_server(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server(value);
  // @@protoc_insertion_point(field_set:mam.ProfitDetail.server)
}

// -------------------------------------------------------------------

// AccountInfo

// uint32 id = 1;
inline void AccountInfo::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountInfo::id() const {
  // @@protoc_insertion_point(field_get:mam.AccountInfo.id)
  return _internal_id();
}
inline void AccountInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void AccountInfo::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mam.AccountInfo.id)
}

// string shcommission = 2;
inline void AccountInfo::clear_shcommission() {
  shcommission_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountInfo::shcommission() const {
  // @@protoc_insertion_point(field_get:mam.AccountInfo.shcommission)
  return _internal_shcommission();
}
inline void AccountInfo::set_shcommission(const std::string& value) {
  _internal_set_shcommission(value);
  // @@protoc_insertion_point(field_set:mam.AccountInfo.shcommission)
}
inline std::string* AccountInfo::mutable_shcommission() {
  // @@protoc_insertion_point(field_mutable:mam.AccountInfo.shcommission)
  return _internal_mutable_shcommission();
}
inline const std::string& AccountInfo::_internal_shcommission() const {
  return shcommission_.Get();
}
inline void AccountInfo::_internal_set_shcommission(const std::string& value) {
  
  shcommission_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountInfo::set_shcommission(std::string&& value) {
  
  shcommission_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.AccountInfo.shcommission)
}
inline void AccountInfo::set_shcommission(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shcommission_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.AccountInfo.shcommission)
}
inline void AccountInfo::set_shcommission(const char* value,
    size_t size) {
  
  shcommission_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.AccountInfo.shcommission)
}
inline std::string* AccountInfo::_internal_mutable_shcommission() {
  
  return shcommission_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountInfo::release_shcommission() {
  // @@protoc_insertion_point(field_release:mam.AccountInfo.shcommission)
  return shcommission_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountInfo::set_allocated_shcommission(std::string* shcommission) {
  if (shcommission != nullptr) {
    
  } else {
    
  }
  shcommission_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shcommission,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.AccountInfo.shcommission)
}

// string szcommission = 3;
inline void AccountInfo::clear_szcommission() {
  szcommission_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountInfo::szcommission() const {
  // @@protoc_insertion_point(field_get:mam.AccountInfo.szcommission)
  return _internal_szcommission();
}
inline void AccountInfo::set_szcommission(const std::string& value) {
  _internal_set_szcommission(value);
  // @@protoc_insertion_point(field_set:mam.AccountInfo.szcommission)
}
inline std::string* AccountInfo::mutable_szcommission() {
  // @@protoc_insertion_point(field_mutable:mam.AccountInfo.szcommission)
  return _internal_mutable_szcommission();
}
inline const std::string& AccountInfo::_internal_szcommission() const {
  return szcommission_.Get();
}
inline void AccountInfo::_internal_set_szcommission(const std::string& value) {
  
  szcommission_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountInfo::set_szcommission(std::string&& value) {
  
  szcommission_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.AccountInfo.szcommission)
}
inline void AccountInfo::set_szcommission(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szcommission_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.AccountInfo.szcommission)
}
inline void AccountInfo::set_szcommission(const char* value,
    size_t size) {
  
  szcommission_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.AccountInfo.szcommission)
}
inline std::string* AccountInfo::_internal_mutable_szcommission() {
  
  return szcommission_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountInfo::release_szcommission() {
  // @@protoc_insertion_point(field_release:mam.AccountInfo.szcommission)
  return szcommission_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountInfo::set_allocated_szcommission(std::string* szcommission) {
  if (szcommission != nullptr) {
    
  } else {
    
  }
  szcommission_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), szcommission,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.AccountInfo.szcommission)
}

// int32 lowcost = 4;
inline void AccountInfo::clear_lowcost() {
  lowcost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountInfo::_internal_lowcost() const {
  return lowcost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountInfo::lowcost() const {
  // @@protoc_insertion_point(field_get:mam.AccountInfo.lowcost)
  return _internal_lowcost();
}
inline void AccountInfo::_internal_set_lowcost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lowcost_ = value;
}
inline void AccountInfo::set_lowcost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lowcost(value);
  // @@protoc_insertion_point(field_set:mam.AccountInfo.lowcost)
}

// string as = 5;
inline void AccountInfo::clear_as() {
  as_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountInfo::as() const {
  // @@protoc_insertion_point(field_get:mam.AccountInfo.as)
  return _internal_as();
}
inline void AccountInfo::set_as(const std::string& value) {
  _internal_set_as(value);
  // @@protoc_insertion_point(field_set:mam.AccountInfo.as)
}
inline std::string* AccountInfo::mutable_as() {
  // @@protoc_insertion_point(field_mutable:mam.AccountInfo.as)
  return _internal_mutable_as();
}
inline const std::string& AccountInfo::_internal_as() const {
  return as_.Get();
}
inline void AccountInfo::_internal_set_as(const std::string& value) {
  
  as_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountInfo::set_as(std::string&& value) {
  
  as_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.AccountInfo.as)
}
inline void AccountInfo::set_as(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  as_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.AccountInfo.as)
}
inline void AccountInfo::set_as(const char* value,
    size_t size) {
  
  as_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.AccountInfo.as)
}
inline std::string* AccountInfo::_internal_mutable_as() {
  
  return as_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountInfo::release_as() {
  // @@protoc_insertion_point(field_release:mam.AccountInfo.as)
  return as_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountInfo::set_allocated_as(std::string* as) {
  if (as != nullptr) {
    
  } else {
    
  }
  as_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), as,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.AccountInfo.as)
}

// string buyType = 6;
inline void AccountInfo::clear_buytype() {
  buytype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountInfo::buytype() const {
  // @@protoc_insertion_point(field_get:mam.AccountInfo.buyType)
  return _internal_buytype();
}
inline void AccountInfo::set_buytype(const std::string& value) {
  _internal_set_buytype(value);
  // @@protoc_insertion_point(field_set:mam.AccountInfo.buyType)
}
inline std::string* AccountInfo::mutable_buytype() {
  // @@protoc_insertion_point(field_mutable:mam.AccountInfo.buyType)
  return _internal_mutable_buytype();
}
inline const std::string& AccountInfo::_internal_buytype() const {
  return buytype_.Get();
}
inline void AccountInfo::_internal_set_buytype(const std::string& value) {
  
  buytype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountInfo::set_buytype(std::string&& value) {
  
  buytype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.AccountInfo.buyType)
}
inline void AccountInfo::set_buytype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buytype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.AccountInfo.buyType)
}
inline void AccountInfo::set_buytype(const char* value,
    size_t size) {
  
  buytype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.AccountInfo.buyType)
}
inline std::string* AccountInfo::_internal_mutable_buytype() {
  
  return buytype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountInfo::release_buytype() {
  // @@protoc_insertion_point(field_release:mam.AccountInfo.buyType)
  return buytype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountInfo::set_allocated_buytype(std::string* buytype) {
  if (buytype != nullptr) {
    
  } else {
    
  }
  buytype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buytype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.AccountInfo.buyType)
}

// string sellType = 7;
inline void AccountInfo::clear_selltype() {
  selltype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountInfo::selltype() const {
  // @@protoc_insertion_point(field_get:mam.AccountInfo.sellType)
  return _internal_selltype();
}
inline void AccountInfo::set_selltype(const std::string& value) {
  _internal_set_selltype(value);
  // @@protoc_insertion_point(field_set:mam.AccountInfo.sellType)
}
inline std::string* AccountInfo::mutable_selltype() {
  // @@protoc_insertion_point(field_mutable:mam.AccountInfo.sellType)
  return _internal_mutable_selltype();
}
inline const std::string& AccountInfo::_internal_selltype() const {
  return selltype_.Get();
}
inline void AccountInfo::_internal_set_selltype(const std::string& value) {
  
  selltype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountInfo::set_selltype(std::string&& value) {
  
  selltype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.AccountInfo.sellType)
}
inline void AccountInfo::set_selltype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  selltype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.AccountInfo.sellType)
}
inline void AccountInfo::set_selltype(const char* value,
    size_t size) {
  
  selltype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.AccountInfo.sellType)
}
inline std::string* AccountInfo::_internal_mutable_selltype() {
  
  return selltype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountInfo::release_selltype() {
  // @@protoc_insertion_point(field_release:mam.AccountInfo.sellType)
  return selltype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountInfo::set_allocated_selltype(std::string* selltype) {
  if (selltype != nullptr) {
    
  } else {
    
  }
  selltype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), selltype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.AccountInfo.sellType)
}

// string group = 8;
inline void AccountInfo::clear_group() {
  group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountInfo::group() const {
  // @@protoc_insertion_point(field_get:mam.AccountInfo.group)
  return _internal_group();
}
inline void AccountInfo::set_group(const std::string& value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:mam.AccountInfo.group)
}
inline std::string* AccountInfo::mutable_group() {
  // @@protoc_insertion_point(field_mutable:mam.AccountInfo.group)
  return _internal_mutable_group();
}
inline const std::string& AccountInfo::_internal_group() const {
  return group_.Get();
}
inline void AccountInfo::_internal_set_group(const std::string& value) {
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountInfo::set_group(std::string&& value) {
  
  group_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.AccountInfo.group)
}
inline void AccountInfo::set_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.AccountInfo.group)
}
inline void AccountInfo::set_group(const char* value,
    size_t size) {
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.AccountInfo.group)
}
inline std::string* AccountInfo::_internal_mutable_group() {
  
  return group_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountInfo::release_group() {
  // @@protoc_insertion_point(field_release:mam.AccountInfo.group)
  return group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountInfo::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    
  } else {
    
  }
  group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.AccountInfo.group)
}

// string server = 9;
inline void AccountInfo::clear_server() {
  server_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountInfo::server() const {
  // @@protoc_insertion_point(field_get:mam.AccountInfo.server)
  return _internal_server();
}
inline void AccountInfo::set_server(const std::string& value) {
  _internal_set_server(value);
  // @@protoc_insertion_point(field_set:mam.AccountInfo.server)
}
inline std::string* AccountInfo::mutable_server() {
  // @@protoc_insertion_point(field_mutable:mam.AccountInfo.server)
  return _internal_mutable_server();
}
inline const std::string& AccountInfo::_internal_server() const {
  return server_.Get();
}
inline void AccountInfo::_internal_set_server(const std::string& value) {
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountInfo::set_server(std::string&& value) {
  
  server_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.AccountInfo.server)
}
inline void AccountInfo::set_server(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.AccountInfo.server)
}
inline void AccountInfo::set_server(const char* value,
    size_t size) {
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.AccountInfo.server)
}
inline std::string* AccountInfo::_internal_mutable_server() {
  
  return server_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountInfo::release_server() {
  // @@protoc_insertion_point(field_release:mam.AccountInfo.server)
  return server_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountInfo::set_allocated_server(std::string* server) {
  if (server != nullptr) {
    
  } else {
    
  }
  server_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.AccountInfo.server)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mam

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mam::SaveMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mam::SaveMode>() {
  return ::mam::SaveMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tenth_2eproto
