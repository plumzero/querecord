// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tenth.proto

#include "tenth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tenth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountInfo_tenth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tenth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountOverview_tenth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tenth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldRule_tenth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tenth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfitDetail_tenth_2eproto;
namespace mam {
class FieldRuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldRule> _instance;
} _FieldRule_default_instance_;
class SaveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SaveRequest> _instance;
} _SaveRequest_default_instance_;
class AccountOverviewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountOverview> _instance;
} _AccountOverview_default_instance_;
class ProfitDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfitDetail> _instance;
} _ProfitDetail_default_instance_;
class AccountInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountInfo> _instance;
} _AccountInfo_default_instance_;
}  // namespace mam
static void InitDefaultsscc_info_AccountInfo_tenth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_AccountInfo_default_instance_;
    new (ptr) ::mam::AccountInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::AccountInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountInfo_tenth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountInfo_tenth_2eproto}, {}};

static void InitDefaultsscc_info_AccountOverview_tenth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_AccountOverview_default_instance_;
    new (ptr) ::mam::AccountOverview();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::AccountOverview::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountOverview_tenth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountOverview_tenth_2eproto}, {}};

static void InitDefaultsscc_info_FieldRule_tenth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_FieldRule_default_instance_;
    new (ptr) ::mam::FieldRule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::FieldRule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldRule_tenth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FieldRule_tenth_2eproto}, {}};

static void InitDefaultsscc_info_ProfitDetail_tenth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_ProfitDetail_default_instance_;
    new (ptr) ::mam::ProfitDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::ProfitDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfitDetail_tenth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfitDetail_tenth_2eproto}, {}};

static void InitDefaultsscc_info_SaveRequest_tenth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_SaveRequest_default_instance_;
    new (ptr) ::mam::SaveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::SaveRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SaveRequest_tenth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SaveRequest_tenth_2eproto}, {
      &scc_info_AccountOverview_tenth_2eproto.base,
      &scc_info_ProfitDetail_tenth_2eproto.base,
      &scc_info_AccountInfo_tenth_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tenth_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tenth_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tenth_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tenth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, str_len_max_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, str_len_min_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, pod_val_max_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, pod_val_min_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, regex_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, int32_as_key_),
  PROTOBUF_FIELD_OFFSET(::mam::FieldRule, string_as_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::SaveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::SaveRequest, mode_),
  PROTOBUF_FIELD_OFFSET(::mam::SaveRequest, date_),
  PROTOBUF_FIELD_OFFSET(::mam::SaveRequest, account_overview_),
  PROTOBUF_FIELD_OFFSET(::mam::SaveRequest, profit_detail_),
  PROTOBUF_FIELD_OFFSET(::mam::SaveRequest, account_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, accountid_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, turnover_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, rate_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, fee_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, profit_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, canceled_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, failed_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, acceptcost_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, matchcost_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, base_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, close_profit_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, server_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetail, accountid_),
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetail, symbol_),
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetail, cfgvol_),
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetail, buyvol_),
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetail, sellvol_),
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetail, buyamount_),
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetail, sellamount_),
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetail, floatprofit_),
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetail, settleprofit_),
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetail, fee_),
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetail, server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::AccountInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::AccountInfo, id_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountInfo, shcommission_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountInfo, szcommission_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountInfo, lowcost_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountInfo, as_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountInfo, buytype_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountInfo, selltype_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountInfo, group_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountInfo, server_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mam::FieldRule)},
  { 12, -1, sizeof(::mam::SaveRequest)},
  { 22, -1, sizeof(::mam::AccountOverview)},
  { 40, -1, sizeof(::mam::ProfitDetail)},
  { 56, -1, sizeof(::mam::AccountInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_FieldRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_SaveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_AccountOverview_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_ProfitDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_AccountInfo_default_instance_),
};

const char descriptor_table_protodef_tenth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013tenth.proto\022\003mam\032 google/protobuf/desc"
  "riptor.proto\"\233\001\n\tFieldRule\022\023\n\013str_len_ma"
  "x\030\001 \001(\r\022\023\n\013str_len_min\030\002 \001(\r\022\023\n\013pod_val_"
  "max\030\003 \001(\r\022\023\n\013pod_val_min\030\004 \001(\r\022\r\n\005regex\030"
  "\005 \001(\t\022\024\n\014int32_as_key\030\006 \001(\005\022\025\n\rstring_as"
  "_key\030\007 \001(\t\"\272\001\n\013SaveRequest\022\033\n\004mode\030\001 \001(\016"
  "2\r.mam.SaveMode\022\014\n\004date\030\002 \001(\t\022.\n\020account"
  "_overview\030\003 \003(\0132\024.mam.AccountOverview\022(\n"
  "\rprofit_detail\030\004 \003(\0132\021.mam.ProfitDetail\022"
  "&\n\014account_info\030\005 \003(\0132\020.mam.AccountInfo\""
  "\355\001\n\017AccountOverview\022\021\n\taccountid\030\001 \001(\005\022\020"
  "\n\010turnover\030\002 \001(\001\022\014\n\004rate\030\003 \001(\001\022\013\n\003fee\030\004 "
  "\001(\001\022\016\n\006profit\030\005 \001(\001\022\020\n\010canceled\030\006 \001(\001\022\016\n"
  "\006failed\030\007 \001(\001\022\022\n\nacceptcost\030\010 \001(\001\022\021\n\tmat"
  "chcost\030\t \001(\001\022\014\n\004base\030\n \001(\001\022\024\n\014close_prof"
  "it\030\013 \001(\001\022\016\n\006server\030\014 \001(\005\022\r\n\005group\030\r \001(\t\""
  "\206\002\n\014ProfitDetail\022\031\n\taccountid\030\001 \001(\005B\006\262\366\004"
  "\0020\001\0223\n\006symbol\030\002 \001(\tB#\262\366\004\003:\0011\262\366\004\030*\026[\\d]{6"
  "}\\.(SH|sh|SZ|sz)\022\026\n\006cfgvol\030\003 \001(\005B\006\262\366\004\0020\001"
  "\022\016\n\006buyvol\030\004 \001(\005\022\017\n\007sellvol\030\005 \001(\005\022\021\n\tbuy"
  "amount\030\006 \001(\001\022\022\n\nsellamount\030\007 \001(\001\022\023\n\013floa"
  "tprofit\030\010 \001(\001\022\024\n\014settleprofit\030\t \001(\001\022\013\n\003f"
  "ee\030\n \001(\001\022\016\n\006server\030\013 \001(\005\"\244\001\n\013AccountInfo"
  "\022\n\n\002id\030\001 \001(\r\022\024\n\014shcommission\030\002 \001(\t\022\024\n\014sz"
  "commission\030\003 \001(\t\022\017\n\007lowcost\030\004 \001(\005\022\n\n\002as\030"
  "\005 \001(\t\022\017\n\007buyType\030\006 \001(\t\022\020\n\010sellType\030\007 \001(\t"
  "\022\r\n\005group\030\010 \001(\t\022\016\n\006server\030\t \001(\t*8\n\010SaveM"
  "ode\022\010\n\004None\020\000\022\n\n\006Create\020\001\022\n\n\006Update\020\002\022\n\n"
  "\006Append\020\003:B\n\nknightrule\022\035.google.protobu"
  "f.FieldOptions\030\346N \001(\0132\016.mam.FieldRuleb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tenth_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tenth_2eproto_sccs[5] = {
  &scc_info_AccountInfo_tenth_2eproto.base,
  &scc_info_AccountOverview_tenth_2eproto.base,
  &scc_info_FieldRule_tenth_2eproto.base,
  &scc_info_ProfitDetail_tenth_2eproto.base,
  &scc_info_SaveRequest_tenth_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tenth_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tenth_2eproto = {
  false, false, descriptor_table_protodef_tenth_2eproto, "tenth.proto", 1205,
  &descriptor_table_tenth_2eproto_once, descriptor_table_tenth_2eproto_sccs, descriptor_table_tenth_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_tenth_2eproto::offsets,
  file_level_metadata_tenth_2eproto, 5, file_level_enum_descriptors_tenth_2eproto, file_level_service_descriptors_tenth_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tenth_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tenth_2eproto)), true);
namespace mam {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SaveMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tenth_2eproto);
  return file_level_enum_descriptors_tenth_2eproto[0];
}
bool SaveMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FieldRule::InitAsDefaultInstance() {
}
class FieldRule::_Internal {
 public:
};

FieldRule::FieldRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.FieldRule)
}
FieldRule::FieldRule(const FieldRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regex().empty()) {
    regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_regex(),
      GetArena());
  }
  string_as_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_string_as_key().empty()) {
    string_as_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_string_as_key(),
      GetArena());
  }
  ::memcpy(&str_len_max_, &from.str_len_max_,
    static_cast<size_t>(reinterpret_cast<char*>(&int32_as_key_) -
    reinterpret_cast<char*>(&str_len_max_)) + sizeof(int32_as_key_));
  // @@protoc_insertion_point(copy_constructor:mam.FieldRule)
}

void FieldRule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldRule_tenth_2eproto.base);
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_as_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&str_len_max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&int32_as_key_) -
      reinterpret_cast<char*>(&str_len_max_)) + sizeof(int32_as_key_));
}

FieldRule::~FieldRule() {
  // @@protoc_insertion_point(destructor:mam.FieldRule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FieldRule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_as_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FieldRule::ArenaDtor(void* object) {
  FieldRule* _this = reinterpret_cast< FieldRule* >(object);
  (void)_this;
}
void FieldRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FieldRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldRule& FieldRule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldRule_tenth_2eproto.base);
  return *internal_default_instance();
}


void FieldRule::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.FieldRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  string_as_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&str_len_max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&int32_as_key_) -
      reinterpret_cast<char*>(&str_len_max_)) + sizeof(int32_as_key_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 str_len_max = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          str_len_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 str_len_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          str_len_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pod_val_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pod_val_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pod_val_min = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pod_val_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_regex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.FieldRule.regex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 int32_as_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          int32_as_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string_as_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_string_as_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.FieldRule.string_as_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.FieldRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 str_len_max = 1;
  if (this->str_len_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_str_len_max(), target);
  }

  // uint32 str_len_min = 2;
  if (this->str_len_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_str_len_min(), target);
  }

  // uint32 pod_val_max = 3;
  if (this->pod_val_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pod_val_max(), target);
  }

  // uint32 pod_val_min = 4;
  if (this->pod_val_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pod_val_min(), target);
  }

  // string regex = 5;
  if (this->regex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regex().data(), static_cast<int>(this->_internal_regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.FieldRule.regex");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_regex(), target);
  }

  // int32 int32_as_key = 6;
  if (this->int32_as_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_int32_as_key(), target);
  }

  // string string_as_key = 7;
  if (this->string_as_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_as_key().data(), static_cast<int>(this->_internal_string_as_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.FieldRule.string_as_key");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_string_as_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.FieldRule)
  return target;
}

size_t FieldRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.FieldRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string regex = 5;
  if (this->regex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regex());
  }

  // string string_as_key = 7;
  if (this->string_as_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string_as_key());
  }

  // uint32 str_len_max = 1;
  if (this->str_len_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_str_len_max());
  }

  // uint32 str_len_min = 2;
  if (this->str_len_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_str_len_min());
  }

  // uint32 pod_val_max = 3;
  if (this->pod_val_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pod_val_max());
  }

  // uint32 pod_val_min = 4;
  if (this->pod_val_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pod_val_min());
  }

  // int32 int32_as_key = 6;
  if (this->int32_as_key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_int32_as_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldRule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.FieldRule)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldRule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.FieldRule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.FieldRule)
    MergeFrom(*source);
  }
}

void FieldRule::MergeFrom(const FieldRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.FieldRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.regex().size() > 0) {
    _internal_set_regex(from._internal_regex());
  }
  if (from.string_as_key().size() > 0) {
    _internal_set_string_as_key(from._internal_string_as_key());
  }
  if (from.str_len_max() != 0) {
    _internal_set_str_len_max(from._internal_str_len_max());
  }
  if (from.str_len_min() != 0) {
    _internal_set_str_len_min(from._internal_str_len_min());
  }
  if (from.pod_val_max() != 0) {
    _internal_set_pod_val_max(from._internal_pod_val_max());
  }
  if (from.pod_val_min() != 0) {
    _internal_set_pod_val_min(from._internal_pod_val_min());
  }
  if (from.int32_as_key() != 0) {
    _internal_set_int32_as_key(from._internal_int32_as_key());
  }
}

void FieldRule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.FieldRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldRule::CopyFrom(const FieldRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.FieldRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldRule::IsInitialized() const {
  return true;
}

void FieldRule::InternalSwap(FieldRule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  regex_.Swap(&other->regex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  string_as_key_.Swap(&other->string_as_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FieldRule, int32_as_key_)
      + sizeof(FieldRule::int32_as_key_)
      - PROTOBUF_FIELD_OFFSET(FieldRule, str_len_max_)>(
          reinterpret_cast<char*>(&str_len_max_),
          reinterpret_cast<char*>(&other->str_len_max_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldRule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SaveRequest::InitAsDefaultInstance() {
}
class SaveRequest::_Internal {
 public:
};

SaveRequest::SaveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_overview_(arena),
  profit_detail_(arena),
  account_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.SaveRequest)
}
SaveRequest::SaveRequest(const SaveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      account_overview_(from.account_overview_),
      profit_detail_(from.profit_detail_),
      account_info_(from.account_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:mam.SaveRequest)
}

void SaveRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SaveRequest_tenth_2eproto.base);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
}

SaveRequest::~SaveRequest() {
  // @@protoc_insertion_point(destructor:mam.SaveRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SaveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SaveRequest::ArenaDtor(void* object) {
  SaveRequest* _this = reinterpret_cast< SaveRequest* >(object);
  (void)_this;
}
void SaveRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SaveRequest& SaveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SaveRequest_tenth_2eproto.base);
  return *internal_default_instance();
}


void SaveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.SaveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_overview_.Clear();
  profit_detail_.Clear();
  account_info_.Clear();
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mam.SaveMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::mam::SaveMode>(val));
        } else goto handle_unusual;
        continue;
      // string date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.SaveRequest.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mam.AccountOverview account_overview = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_account_overview(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mam.ProfitDetail profit_detail = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_profit_detail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mam.AccountInfo account_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_account_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.SaveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mam.SaveMode mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // string date = 2;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.SaveRequest.date");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_date(), target);
  }

  // repeated .mam.AccountOverview account_overview = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_account_overview_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_account_overview(i), target, stream);
  }

  // repeated .mam.ProfitDetail profit_detail = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_profit_detail_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_profit_detail(i), target, stream);
  }

  // repeated .mam.AccountInfo account_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_account_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_account_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.SaveRequest)
  return target;
}

size_t SaveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.SaveRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mam.AccountOverview account_overview = 3;
  total_size += 1UL * this->_internal_account_overview_size();
  for (const auto& msg : this->account_overview_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mam.ProfitDetail profit_detail = 4;
  total_size += 1UL * this->_internal_profit_detail_size();
  for (const auto& msg : this->profit_detail_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mam.AccountInfo account_info = 5;
  total_size += 1UL * this->_internal_account_info_size();
  for (const auto& msg : this->account_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string date = 2;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // .mam.SaveMode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.SaveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.SaveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.SaveRequest)
    MergeFrom(*source);
  }
}

void SaveRequest::MergeFrom(const SaveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.SaveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_overview_.MergeFrom(from.account_overview_);
  profit_detail_.MergeFrom(from.profit_detail_);
  account_info_.MergeFrom(from.account_info_);
  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void SaveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.SaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveRequest::CopyFrom(const SaveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.SaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveRequest::IsInitialized() const {
  return true;
}

void SaveRequest::InternalSwap(SaveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_overview_.InternalSwap(&other->account_overview_);
  profit_detail_.InternalSwap(&other->profit_detail_);
  account_info_.InternalSwap(&other->account_info_);
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountOverview::InitAsDefaultInstance() {
}
class AccountOverview::_Internal {
 public:
};

AccountOverview::AccountOverview(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.AccountOverview)
}
AccountOverview::AccountOverview(const AccountOverview& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group().empty()) {
    group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group(),
      GetArena());
  }
  ::memcpy(&turnover_, &from.turnover_,
    static_cast<size_t>(reinterpret_cast<char*>(&close_profit_) -
    reinterpret_cast<char*>(&turnover_)) + sizeof(close_profit_));
  // @@protoc_insertion_point(copy_constructor:mam.AccountOverview)
}

void AccountOverview::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountOverview_tenth_2eproto.base);
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&turnover_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_profit_) -
      reinterpret_cast<char*>(&turnover_)) + sizeof(close_profit_));
}

AccountOverview::~AccountOverview() {
  // @@protoc_insertion_point(destructor:mam.AccountOverview)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountOverview::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountOverview::ArenaDtor(void* object) {
  AccountOverview* _this = reinterpret_cast< AccountOverview* >(object);
  (void)_this;
}
void AccountOverview::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountOverview::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountOverview& AccountOverview::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountOverview_tenth_2eproto.base);
  return *internal_default_instance();
}


void AccountOverview::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.AccountOverview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&turnover_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_profit_) -
      reinterpret_cast<char*>(&turnover_)) + sizeof(close_profit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountOverview::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double turnover = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          turnover_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fee = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double profit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double canceled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          canceled_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double failed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          failed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double acceptcost = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          acceptcost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double matchcost = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          matchcost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double base = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close_profit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          close_profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 server = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.AccountOverview.group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountOverview::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.AccountOverview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 accountid = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_accountid(), target);
  }

  // double turnover = 2;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_turnover(), target);
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rate(), target);
  }

  // double fee = 4;
  if (!(this->fee() <= 0 && this->fee() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_fee(), target);
  }

  // double profit = 5;
  if (!(this->profit() <= 0 && this->profit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_profit(), target);
  }

  // double canceled = 6;
  if (!(this->canceled() <= 0 && this->canceled() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_canceled(), target);
  }

  // double failed = 7;
  if (!(this->failed() <= 0 && this->failed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_failed(), target);
  }

  // double acceptcost = 8;
  if (!(this->acceptcost() <= 0 && this->acceptcost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_acceptcost(), target);
  }

  // double matchcost = 9;
  if (!(this->matchcost() <= 0 && this->matchcost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_matchcost(), target);
  }

  // double base = 10;
  if (!(this->base() <= 0 && this->base() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_base(), target);
  }

  // double close_profit = 11;
  if (!(this->close_profit() <= 0 && this->close_profit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_close_profit(), target);
  }

  // int32 server = 12;
  if (this->server() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_server(), target);
  }

  // string group = 13;
  if (this->group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group().data(), static_cast<int>(this->_internal_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.AccountOverview.group");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.AccountOverview)
  return target;
}

size_t AccountOverview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.AccountOverview)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group = 13;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group());
  }

  // double turnover = 2;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    total_size += 1 + 8;
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double fee = 4;
  if (!(this->fee() <= 0 && this->fee() >= 0)) {
    total_size += 1 + 8;
  }

  // double profit = 5;
  if (!(this->profit() <= 0 && this->profit() >= 0)) {
    total_size += 1 + 8;
  }

  // double canceled = 6;
  if (!(this->canceled() <= 0 && this->canceled() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 accountid = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_accountid());
  }

  // int32 server = 12;
  if (this->server() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server());
  }

  // double failed = 7;
  if (!(this->failed() <= 0 && this->failed() >= 0)) {
    total_size += 1 + 8;
  }

  // double acceptcost = 8;
  if (!(this->acceptcost() <= 0 && this->acceptcost() >= 0)) {
    total_size += 1 + 8;
  }

  // double matchcost = 9;
  if (!(this->matchcost() <= 0 && this->matchcost() >= 0)) {
    total_size += 1 + 8;
  }

  // double base = 10;
  if (!(this->base() <= 0 && this->base() >= 0)) {
    total_size += 1 + 8;
  }

  // double close_profit = 11;
  if (!(this->close_profit() <= 0 && this->close_profit() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountOverview::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.AccountOverview)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountOverview* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountOverview>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.AccountOverview)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.AccountOverview)
    MergeFrom(*source);
  }
}

void AccountOverview::MergeFrom(const AccountOverview& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.AccountOverview)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group().size() > 0) {
    _internal_set_group(from._internal_group());
  }
  if (!(from.turnover() <= 0 && from.turnover() >= 0)) {
    _internal_set_turnover(from._internal_turnover());
  }
  if (!(from.rate() <= 0 && from.rate() >= 0)) {
    _internal_set_rate(from._internal_rate());
  }
  if (!(from.fee() <= 0 && from.fee() >= 0)) {
    _internal_set_fee(from._internal_fee());
  }
  if (!(from.profit() <= 0 && from.profit() >= 0)) {
    _internal_set_profit(from._internal_profit());
  }
  if (!(from.canceled() <= 0 && from.canceled() >= 0)) {
    _internal_set_canceled(from._internal_canceled());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.server() != 0) {
    _internal_set_server(from._internal_server());
  }
  if (!(from.failed() <= 0 && from.failed() >= 0)) {
    _internal_set_failed(from._internal_failed());
  }
  if (!(from.acceptcost() <= 0 && from.acceptcost() >= 0)) {
    _internal_set_acceptcost(from._internal_acceptcost());
  }
  if (!(from.matchcost() <= 0 && from.matchcost() >= 0)) {
    _internal_set_matchcost(from._internal_matchcost());
  }
  if (!(from.base() <= 0 && from.base() >= 0)) {
    _internal_set_base(from._internal_base());
  }
  if (!(from.close_profit() <= 0 && from.close_profit() >= 0)) {
    _internal_set_close_profit(from._internal_close_profit());
  }
}

void AccountOverview::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.AccountOverview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountOverview::CopyFrom(const AccountOverview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.AccountOverview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountOverview::IsInitialized() const {
  return true;
}

void AccountOverview::InternalSwap(AccountOverview* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  group_.Swap(&other->group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountOverview, close_profit_)
      + sizeof(AccountOverview::close_profit_)
      - PROTOBUF_FIELD_OFFSET(AccountOverview, turnover_)>(
          reinterpret_cast<char*>(&turnover_),
          reinterpret_cast<char*>(&other->turnover_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountOverview::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfitDetail::InitAsDefaultInstance() {
}
class ProfitDetail::_Internal {
 public:
};

ProfitDetail::ProfitDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.ProfitDetail)
}
ProfitDetail::ProfitDetail(const ProfitDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(server_));
  // @@protoc_insertion_point(copy_constructor:mam.ProfitDetail)
}

void ProfitDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfitDetail_tenth_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(server_));
}

ProfitDetail::~ProfitDetail() {
  // @@protoc_insertion_point(destructor:mam.ProfitDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfitDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfitDetail::ArenaDtor(void* object) {
  ProfitDetail* _this = reinterpret_cast< ProfitDetail* >(object);
  (void)_this;
}
void ProfitDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfitDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfitDetail& ProfitDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfitDetail_tenth_2eproto.base);
  return *internal_default_instance();
}


void ProfitDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.ProfitDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(server_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfitDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 accountid = 1 [(.mam.knightrule) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2 [(.mam.knightrule) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.ProfitDetail.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cfgvol = 3 [(.mam.knightrule) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cfgvol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 buyvol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          buyvol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sellvol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sellvol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double buyamount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          buyamount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sellamount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          sellamount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double floatprofit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          floatprofit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double settleprofit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          settleprofit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fee = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 server = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfitDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.ProfitDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 accountid = 1 [(.mam.knightrule) = {
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_accountid(), target);
  }

  // string symbol = 2 [(.mam.knightrule) = {
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.ProfitDetail.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // int32 cfgvol = 3 [(.mam.knightrule) = {
  if (this->cfgvol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cfgvol(), target);
  }

  // int32 buyvol = 4;
  if (this->buyvol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_buyvol(), target);
  }

  // int32 sellvol = 5;
  if (this->sellvol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_sellvol(), target);
  }

  // double buyamount = 6;
  if (!(this->buyamount() <= 0 && this->buyamount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_buyamount(), target);
  }

  // double sellamount = 7;
  if (!(this->sellamount() <= 0 && this->sellamount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_sellamount(), target);
  }

  // double floatprofit = 8;
  if (!(this->floatprofit() <= 0 && this->floatprofit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_floatprofit(), target);
  }

  // double settleprofit = 9;
  if (!(this->settleprofit() <= 0 && this->settleprofit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_settleprofit(), target);
  }

  // double fee = 10;
  if (!(this->fee() <= 0 && this->fee() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_fee(), target);
  }

  // int32 server = 11;
  if (this->server() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_server(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.ProfitDetail)
  return target;
}

size_t ProfitDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.ProfitDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 2 [(.mam.knightrule) = {
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // int32 accountid = 1 [(.mam.knightrule) = {
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_accountid());
  }

  // int32 cfgvol = 3 [(.mam.knightrule) = {
  if (this->cfgvol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cfgvol());
  }

  // int32 buyvol = 4;
  if (this->buyvol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buyvol());
  }

  // int32 sellvol = 5;
  if (this->sellvol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sellvol());
  }

  // double buyamount = 6;
  if (!(this->buyamount() <= 0 && this->buyamount() >= 0)) {
    total_size += 1 + 8;
  }

  // double sellamount = 7;
  if (!(this->sellamount() <= 0 && this->sellamount() >= 0)) {
    total_size += 1 + 8;
  }

  // double floatprofit = 8;
  if (!(this->floatprofit() <= 0 && this->floatprofit() >= 0)) {
    total_size += 1 + 8;
  }

  // double settleprofit = 9;
  if (!(this->settleprofit() <= 0 && this->settleprofit() >= 0)) {
    total_size += 1 + 8;
  }

  // double fee = 10;
  if (!(this->fee() <= 0 && this->fee() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 server = 11;
  if (this->server() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfitDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.ProfitDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfitDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfitDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.ProfitDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.ProfitDetail)
    MergeFrom(*source);
  }
}

void ProfitDetail::MergeFrom(const ProfitDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.ProfitDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.cfgvol() != 0) {
    _internal_set_cfgvol(from._internal_cfgvol());
  }
  if (from.buyvol() != 0) {
    _internal_set_buyvol(from._internal_buyvol());
  }
  if (from.sellvol() != 0) {
    _internal_set_sellvol(from._internal_sellvol());
  }
  if (!(from.buyamount() <= 0 && from.buyamount() >= 0)) {
    _internal_set_buyamount(from._internal_buyamount());
  }
  if (!(from.sellamount() <= 0 && from.sellamount() >= 0)) {
    _internal_set_sellamount(from._internal_sellamount());
  }
  if (!(from.floatprofit() <= 0 && from.floatprofit() >= 0)) {
    _internal_set_floatprofit(from._internal_floatprofit());
  }
  if (!(from.settleprofit() <= 0 && from.settleprofit() >= 0)) {
    _internal_set_settleprofit(from._internal_settleprofit());
  }
  if (!(from.fee() <= 0 && from.fee() >= 0)) {
    _internal_set_fee(from._internal_fee());
  }
  if (from.server() != 0) {
    _internal_set_server(from._internal_server());
  }
}

void ProfitDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.ProfitDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfitDetail::CopyFrom(const ProfitDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.ProfitDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfitDetail::IsInitialized() const {
  return true;
}

void ProfitDetail::InternalSwap(ProfitDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfitDetail, server_)
      + sizeof(ProfitDetail::server_)
      - PROTOBUF_FIELD_OFFSET(ProfitDetail, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfitDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountInfo::InitAsDefaultInstance() {
}
class AccountInfo::_Internal {
 public:
};

AccountInfo::AccountInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.AccountInfo)
}
AccountInfo::AccountInfo(const AccountInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shcommission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shcommission().empty()) {
    shcommission_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_shcommission(),
      GetArena());
  }
  szcommission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_szcommission().empty()) {
    szcommission_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_szcommission(),
      GetArena());
  }
  as_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_as().empty()) {
    as_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_as(),
      GetArena());
  }
  buytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buytype().empty()) {
    buytype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_buytype(),
      GetArena());
  }
  selltype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_selltype().empty()) {
    selltype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_selltype(),
      GetArena());
  }
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group().empty()) {
    group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group(),
      GetArena());
  }
  server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server().empty()) {
    server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_server(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lowcost_) -
    reinterpret_cast<char*>(&id_)) + sizeof(lowcost_));
  // @@protoc_insertion_point(copy_constructor:mam.AccountInfo)
}

void AccountInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountInfo_tenth_2eproto.base);
  shcommission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  szcommission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  as_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  selltype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lowcost_) -
      reinterpret_cast<char*>(&id_)) + sizeof(lowcost_));
}

AccountInfo::~AccountInfo() {
  // @@protoc_insertion_point(destructor:mam.AccountInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  shcommission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  szcommission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  as_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buytype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  selltype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountInfo::ArenaDtor(void* object) {
  AccountInfo* _this = reinterpret_cast< AccountInfo* >(object);
  (void)_this;
}
void AccountInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountInfo& AccountInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountInfo_tenth_2eproto.base);
  return *internal_default_instance();
}


void AccountInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.AccountInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shcommission_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  szcommission_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  as_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  buytype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  selltype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  server_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lowcost_) -
      reinterpret_cast<char*>(&id_)) + sizeof(lowcost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string shcommission = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_shcommission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.AccountInfo.shcommission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string szcommission = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_szcommission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.AccountInfo.szcommission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lowcost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lowcost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string as = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_as();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.AccountInfo.as"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buyType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_buytype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.AccountInfo.buyType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sellType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_selltype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.AccountInfo.sellType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.AccountInfo.group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string server = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.AccountInfo.server"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.AccountInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string shcommission = 2;
  if (this->shcommission().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shcommission().data(), static_cast<int>(this->_internal_shcommission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.AccountInfo.shcommission");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_shcommission(), target);
  }

  // string szcommission = 3;
  if (this->szcommission().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_szcommission().data(), static_cast<int>(this->_internal_szcommission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.AccountInfo.szcommission");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_szcommission(), target);
  }

  // int32 lowcost = 4;
  if (this->lowcost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lowcost(), target);
  }

  // string as = 5;
  if (this->as().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_as().data(), static_cast<int>(this->_internal_as().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.AccountInfo.as");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_as(), target);
  }

  // string buyType = 6;
  if (this->buytype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buytype().data(), static_cast<int>(this->_internal_buytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.AccountInfo.buyType");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_buytype(), target);
  }

  // string sellType = 7;
  if (this->selltype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_selltype().data(), static_cast<int>(this->_internal_selltype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.AccountInfo.sellType");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_selltype(), target);
  }

  // string group = 8;
  if (this->group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group().data(), static_cast<int>(this->_internal_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.AccountInfo.group");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_group(), target);
  }

  // string server = 9;
  if (this->server().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server().data(), static_cast<int>(this->_internal_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.AccountInfo.server");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_server(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.AccountInfo)
  return target;
}

size_t AccountInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.AccountInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string shcommission = 2;
  if (this->shcommission().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shcommission());
  }

  // string szcommission = 3;
  if (this->szcommission().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_szcommission());
  }

  // string as = 5;
  if (this->as().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_as());
  }

  // string buyType = 6;
  if (this->buytype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buytype());
  }

  // string sellType = 7;
  if (this->selltype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selltype());
  }

  // string group = 8;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group());
  }

  // string server = 9;
  if (this->server().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // int32 lowcost = 4;
  if (this->lowcost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lowcost());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.AccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.AccountInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.AccountInfo)
    MergeFrom(*source);
  }
}

void AccountInfo::MergeFrom(const AccountInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.AccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shcommission().size() > 0) {
    _internal_set_shcommission(from._internal_shcommission());
  }
  if (from.szcommission().size() > 0) {
    _internal_set_szcommission(from._internal_szcommission());
  }
  if (from.as().size() > 0) {
    _internal_set_as(from._internal_as());
  }
  if (from.buytype().size() > 0) {
    _internal_set_buytype(from._internal_buytype());
  }
  if (from.selltype().size() > 0) {
    _internal_set_selltype(from._internal_selltype());
  }
  if (from.group().size() > 0) {
    _internal_set_group(from._internal_group());
  }
  if (from.server().size() > 0) {
    _internal_set_server(from._internal_server());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.lowcost() != 0) {
    _internal_set_lowcost(from._internal_lowcost());
  }
}

void AccountInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.AccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountInfo::CopyFrom(const AccountInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.AccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountInfo::IsInitialized() const {
  return true;
}

void AccountInfo::InternalSwap(AccountInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shcommission_.Swap(&other->shcommission_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  szcommission_.Swap(&other->szcommission_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  as_.Swap(&other->as_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  buytype_.Swap(&other->buytype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  selltype_.Swap(&other->selltype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_.Swap(&other->group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  server_.Swap(&other->server_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountInfo, lowcost_)
      + sizeof(AccountInfo::lowcost_)
      - PROTOBUF_FIELD_OFFSET(AccountInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountInfo::GetMetadata() const {
  return GetMetadataStatic();
}

::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mam::FieldRule >, 11, false >
  knightrule(kKnightruleFieldNumber, ::mam::FieldRule::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mam::FieldRule* Arena::CreateMaybeMessage< ::mam::FieldRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::FieldRule >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::SaveRequest* Arena::CreateMaybeMessage< ::mam::SaveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::SaveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::AccountOverview* Arena::CreateMaybeMessage< ::mam::AccountOverview >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::AccountOverview >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::ProfitDetail* Arena::CreateMaybeMessage< ::mam::ProfitDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::ProfitDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::AccountInfo* Arena::CreateMaybeMessage< ::mam::AccountInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::AccountInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
