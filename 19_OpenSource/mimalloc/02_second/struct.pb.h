// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_struct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_struct_2eproto;
namespace mam {
class TradeOrder;
class TradeOrderDefaultTypeInternal;
extern TradeOrderDefaultTypeInternal _TradeOrder_default_instance_;
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> ::mam::TradeOrder* Arena::CreateMaybeMessage<::mam::TradeOrder>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mam {

enum OrderStatusType : int {
  OrderStatus_None = 0,
  OrderStatus_Accepted = 1,
  OrderStatus_TotalMatch = 2,
  OrderStatus_PartialRemoved = 3,
  OrderStatus_TotalRemoved = 4,
  OrderStatus_Fail = 5,
  OrderStatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OrderStatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OrderStatusType_IsValid(int value);
constexpr OrderStatusType OrderStatusType_MIN = OrderStatus_None;
constexpr OrderStatusType OrderStatusType_MAX = OrderStatus_Fail;
constexpr int OrderStatusType_ARRAYSIZE = OrderStatusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderStatusType_descriptor();
template<typename T>
inline const std::string& OrderStatusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderStatusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderStatusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderStatusType_descriptor(), enum_t_value);
}
inline bool OrderStatusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderStatusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderStatusType>(
    OrderStatusType_descriptor(), name, value);
}
enum TradeOrderErrorCode : int {
  JErrorType_None = 0,
  JErrorType_TooHighFrequency = 100,
  JErrorType_OrderNotFound = 101,
  JErrorType_NotTradingTime = 102,
  JErrorType_OverHighOrLow = 103,
  JErrorType_InvalidVol = 104,
  TradeOrderErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TradeOrderErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TradeOrderErrorCode_IsValid(int value);
constexpr TradeOrderErrorCode TradeOrderErrorCode_MIN = JErrorType_None;
constexpr TradeOrderErrorCode TradeOrderErrorCode_MAX = JErrorType_InvalidVol;
constexpr int TradeOrderErrorCode_ARRAYSIZE = TradeOrderErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeOrderErrorCode_descriptor();
template<typename T>
inline const std::string& TradeOrderErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TradeOrderErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TradeOrderErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TradeOrderErrorCode_descriptor(), enum_t_value);
}
inline bool TradeOrderErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TradeOrderErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TradeOrderErrorCode>(
    TradeOrderErrorCode_descriptor(), name, value);
}
enum ExtendPriceType : int {
  EPT_None = 0,
  EPT_Fixed = 1,
  EPT_HighLimit = 2,
  EPT_LowLimit = 3,
  ExtendPriceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ExtendPriceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ExtendPriceType_IsValid(int value);
constexpr ExtendPriceType ExtendPriceType_MIN = EPT_None;
constexpr ExtendPriceType ExtendPriceType_MAX = EPT_LowLimit;
constexpr int ExtendPriceType_ARRAYSIZE = ExtendPriceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExtendPriceType_descriptor();
template<typename T>
inline const std::string& ExtendPriceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExtendPriceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExtendPriceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ExtendPriceType_descriptor(), enum_t_value);
}
inline bool ExtendPriceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExtendPriceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExtendPriceType>(
    ExtendPriceType_descriptor(), name, value);
}
// ===================================================================

class TradeOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.TradeOrder) */ {
 public:
  inline TradeOrder() : TradeOrder(nullptr) {}
  virtual ~TradeOrder();

  TradeOrder(const TradeOrder& from);
  TradeOrder(TradeOrder&& from) noexcept
    : TradeOrder() {
    *this = ::std::move(from);
  }

  inline TradeOrder& operator=(const TradeOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeOrder& operator=(TradeOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeOrder* internal_default_instance() {
    return reinterpret_cast<const TradeOrder*>(
               &_TradeOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TradeOrder& a, TradeOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeOrder* New() const final {
    return CreateMaybeMessage<TradeOrder>(nullptr);
  }

  TradeOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeOrder& from);
  void MergeFrom(const TradeOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.TradeOrder";
  }
  protected:
  explicit TradeOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_struct_2eproto);
    return ::descriptor_table_struct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kTagFieldNumber = 10,
    kErrDetailFieldNumber = 21,
    kTraderIdFieldNumber = 24,
    kReqIdFieldNumber = 1,
    kOrderTypeFieldNumber = 4,
    kTradeTypeFieldNumber = 5,
    kOrderPriceFieldNumber = 6,
    kOrderVolumeFieldNumber = 7,
    kNTimeFieldNumber = 8,
    kAccountIdFieldNumber = 9,
    kTimeoutFieldNumber = 11,
    kCreateTimeFieldNumber = 13,
    kSubmitTimeFieldNumber = 14,
    kForceFieldNumber = 12,
    kDealPriceFieldNumber = 17,
    kAcceptTimeFieldNumber = 15,
    kCloseTimeFieldNumber = 16,
    kDealVolumeFieldNumber = 18,
    kStatusFieldNumber = 19,
    kErrCodeFieldNumber = 20,
    kTradedVolumeFieldNumber = 22,
    kFixingFieldNumber = 23,
    kOriginTypeFieldNumber = 25,
    kMatchedAmountFieldNumber = 27,
    kDelayAcceptMatchFieldNumber = 63,
    kPriceTypeFieldNumber = 26,
    kDelayReceiveInsertFieldNumber = 60,
    kDelayInsertOnInsertFieldNumber = 61,
    kDelayInsertAcceptFieldNumber = 62,
  };
  // string orderId = 2;
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // string symbol = 3;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string tag = 10;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // string errDetail = 21;
  void clear_errdetail();
  const std::string& errdetail() const;
  void set_errdetail(const std::string& value);
  void set_errdetail(std::string&& value);
  void set_errdetail(const char* value);
  void set_errdetail(const char* value, size_t size);
  std::string* mutable_errdetail();
  std::string* release_errdetail();
  void set_allocated_errdetail(std::string* errdetail);
  private:
  const std::string& _internal_errdetail() const;
  void _internal_set_errdetail(const std::string& value);
  std::string* _internal_mutable_errdetail();
  public:

  // string traderId = 24;
  void clear_traderid();
  const std::string& traderid() const;
  void set_traderid(const std::string& value);
  void set_traderid(std::string&& value);
  void set_traderid(const char* value);
  void set_traderid(const char* value, size_t size);
  std::string* mutable_traderid();
  std::string* release_traderid();
  void set_allocated_traderid(std::string* traderid);
  private:
  const std::string& _internal_traderid() const;
  void _internal_set_traderid(const std::string& value);
  std::string* _internal_mutable_traderid();
  public:

  // int32 reqId = 1;
  void clear_reqid();
  ::PROTOBUF_NAMESPACE_ID::int32 reqid() const;
  void set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reqid() const;
  void _internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 orderType = 4;
  void clear_ordertype();
  ::PROTOBUF_NAMESPACE_ID::int32 ordertype() const;
  void set_ordertype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ordertype() const;
  void _internal_set_ordertype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tradeType = 5;
  void clear_tradetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tradetype() const;
  void set_tradetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tradetype() const;
  void _internal_set_tradetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 orderPrice = 6;
  void clear_orderprice();
  ::PROTOBUF_NAMESPACE_ID::int32 orderprice() const;
  void set_orderprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_orderprice() const;
  void _internal_set_orderprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 orderVolume = 7;
  void clear_ordervolume();
  ::PROTOBUF_NAMESPACE_ID::int32 ordervolume() const;
  void set_ordervolume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ordervolume() const;
  void _internal_set_ordervolume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nTime = 8;
  void clear_ntime();
  ::PROTOBUF_NAMESPACE_ID::int32 ntime() const;
  void set_ntime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ntime() const;
  void _internal_set_ntime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 accountId = 9;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::int32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 timeout = 11;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 createTime = 13;
  void clear_createtime();
  ::PROTOBUF_NAMESPACE_ID::int64 createtime() const;
  void set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createtime() const;
  void _internal_set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 submitTime = 14;
  void clear_submittime();
  ::PROTOBUF_NAMESPACE_ID::int64 submittime() const;
  void set_submittime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_submittime() const;
  void _internal_set_submittime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool force = 12;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // int32 dealPrice = 17;
  void clear_dealprice();
  ::PROTOBUF_NAMESPACE_ID::int32 dealprice() const;
  void set_dealprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dealprice() const;
  void _internal_set_dealprice(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 acceptTime = 15;
  void clear_accepttime();
  ::PROTOBUF_NAMESPACE_ID::int64 accepttime() const;
  void set_accepttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_accepttime() const;
  void _internal_set_accepttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 closeTime = 16;
  void clear_closetime();
  ::PROTOBUF_NAMESPACE_ID::int64 closetime() const;
  void set_closetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_closetime() const;
  void _internal_set_closetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 dealVolume = 18;
  void clear_dealvolume();
  ::PROTOBUF_NAMESPACE_ID::int32 dealvolume() const;
  void set_dealvolume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dealvolume() const;
  void _internal_set_dealvolume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .mam.OrderStatusType status = 19;
  void clear_status();
  ::mam::OrderStatusType status() const;
  void set_status(::mam::OrderStatusType value);
  private:
  ::mam::OrderStatusType _internal_status() const;
  void _internal_set_status(::mam::OrderStatusType value);
  public:

  // .mam.TradeOrderErrorCode errCode = 20;
  void clear_errcode();
  ::mam::TradeOrderErrorCode errcode() const;
  void set_errcode(::mam::TradeOrderErrorCode value);
  private:
  ::mam::TradeOrderErrorCode _internal_errcode() const;
  void _internal_set_errcode(::mam::TradeOrderErrorCode value);
  public:

  // int32 tradedVolume = 22;
  void clear_tradedvolume();
  ::PROTOBUF_NAMESPACE_ID::int32 tradedvolume() const;
  void set_tradedvolume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tradedvolume() const;
  void _internal_set_tradedvolume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fixing = 23;
  void clear_fixing();
  ::PROTOBUF_NAMESPACE_ID::int32 fixing() const;
  void set_fixing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fixing() const;
  void _internal_set_fixing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 originType = 25;
  void clear_origintype();
  ::PROTOBUF_NAMESPACE_ID::int32 origintype() const;
  void set_origintype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_origintype() const;
  void _internal_set_origintype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 matchedAmount = 27;
  void clear_matchedamount();
  ::PROTOBUF_NAMESPACE_ID::int64 matchedamount() const;
  void set_matchedamount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_matchedamount() const;
  void _internal_set_matchedamount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 Delay_Accept_Match = 63;
  void clear_delay_accept_match();
  ::PROTOBUF_NAMESPACE_ID::int32 delay_accept_match() const;
  void set_delay_accept_match(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delay_accept_match() const;
  void _internal_set_delay_accept_match(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .mam.ExtendPriceType priceType = 26;
  void clear_pricetype();
  ::mam::ExtendPriceType pricetype() const;
  void set_pricetype(::mam::ExtendPriceType value);
  private:
  ::mam::ExtendPriceType _internal_pricetype() const;
  void _internal_set_pricetype(::mam::ExtendPriceType value);
  public:

  // int32 Delay_Receive_Insert = 60;
  void clear_delay_receive_insert();
  ::PROTOBUF_NAMESPACE_ID::int32 delay_receive_insert() const;
  void set_delay_receive_insert(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delay_receive_insert() const;
  void _internal_set_delay_receive_insert(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Delay_Insert_OnInsert = 61;
  void clear_delay_insert_oninsert();
  ::PROTOBUF_NAMESPACE_ID::int32 delay_insert_oninsert() const;
  void set_delay_insert_oninsert(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delay_insert_oninsert() const;
  void _internal_set_delay_insert_oninsert(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Delay_Insert_Accept = 62;
  void clear_delay_insert_accept();
  ::PROTOBUF_NAMESPACE_ID::int32 delay_insert_accept() const;
  void set_delay_insert_accept(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delay_insert_accept() const;
  void _internal_set_delay_insert_accept(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.TradeOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errdetail_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr traderid_;
  ::PROTOBUF_NAMESPACE_ID::int32 reqid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ordertype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tradetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 orderprice_;
  ::PROTOBUF_NAMESPACE_ID::int32 ordervolume_;
  ::PROTOBUF_NAMESPACE_ID::int32 ntime_;
  ::PROTOBUF_NAMESPACE_ID::int32 accountid_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeout_;
  ::PROTOBUF_NAMESPACE_ID::int64 createtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 submittime_;
  bool force_;
  ::PROTOBUF_NAMESPACE_ID::int32 dealprice_;
  ::PROTOBUF_NAMESPACE_ID::int64 accepttime_;
  ::PROTOBUF_NAMESPACE_ID::int64 closetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 dealvolume_;
  int status_;
  int errcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 tradedvolume_;
  ::PROTOBUF_NAMESPACE_ID::int32 fixing_;
  ::PROTOBUF_NAMESPACE_ID::int32 origintype_;
  ::PROTOBUF_NAMESPACE_ID::int64 matchedamount_;
  ::PROTOBUF_NAMESPACE_ID::int32 delay_accept_match_;
  int pricetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 delay_receive_insert_;
  ::PROTOBUF_NAMESPACE_ID::int32 delay_insert_oninsert_;
  ::PROTOBUF_NAMESPACE_ID::int32 delay_insert_accept_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TradeOrder

// int32 reqId = 1;
inline void TradeOrder::clear_reqid() {
  reqid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_reqid() const {
  return reqid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::reqid() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.reqId)
  return _internal_reqid();
}
inline void TradeOrder::_internal_set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reqid_ = value;
}
inline void TradeOrder::set_reqid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reqid(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.reqId)
}

// string orderId = 2;
inline void TradeOrder::clear_orderid() {
  orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeOrder::orderid() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.orderId)
  return _internal_orderid();
}
inline void TradeOrder::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.orderId)
}
inline std::string* TradeOrder::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:mam.TradeOrder.orderId)
  return _internal_mutable_orderid();
}
inline const std::string& TradeOrder::_internal_orderid() const {
  return orderid_.Get();
}
inline void TradeOrder::_internal_set_orderid(const std::string& value) {
  
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeOrder::set_orderid(std::string&& value) {
  
  orderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.TradeOrder.orderId)
}
inline void TradeOrder::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.TradeOrder.orderId)
}
inline void TradeOrder::set_orderid(const char* value,
    size_t size) {
  
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.TradeOrder.orderId)
}
inline std::string* TradeOrder::_internal_mutable_orderid() {
  
  return orderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeOrder::release_orderid() {
  // @@protoc_insertion_point(field_release:mam.TradeOrder.orderId)
  return orderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeOrder::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.TradeOrder.orderId)
}

// string symbol = 3;
inline void TradeOrder::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeOrder::symbol() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.symbol)
  return _internal_symbol();
}
inline void TradeOrder::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.symbol)
}
inline std::string* TradeOrder::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:mam.TradeOrder.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& TradeOrder::_internal_symbol() const {
  return symbol_.Get();
}
inline void TradeOrder::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeOrder::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.TradeOrder.symbol)
}
inline void TradeOrder::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.TradeOrder.symbol)
}
inline void TradeOrder::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.TradeOrder.symbol)
}
inline std::string* TradeOrder::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeOrder::release_symbol() {
  // @@protoc_insertion_point(field_release:mam.TradeOrder.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeOrder::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.TradeOrder.symbol)
}

// int32 orderType = 4;
inline void TradeOrder::clear_ordertype() {
  ordertype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_ordertype() const {
  return ordertype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::ordertype() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.orderType)
  return _internal_ordertype();
}
inline void TradeOrder::_internal_set_ordertype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ordertype_ = value;
}
inline void TradeOrder::set_ordertype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ordertype(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.orderType)
}

// int32 tradeType = 5;
inline void TradeOrder::clear_tradetype() {
  tradetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_tradetype() const {
  return tradetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::tradetype() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.tradeType)
  return _internal_tradetype();
}
inline void TradeOrder::_internal_set_tradetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tradetype_ = value;
}
inline void TradeOrder::set_tradetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tradetype(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.tradeType)
}

// int32 orderPrice = 6;
inline void TradeOrder::clear_orderprice() {
  orderprice_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_orderprice() const {
  return orderprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::orderprice() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.orderPrice)
  return _internal_orderprice();
}
inline void TradeOrder::_internal_set_orderprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  orderprice_ = value;
}
inline void TradeOrder::set_orderprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_orderprice(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.orderPrice)
}

// int32 orderVolume = 7;
inline void TradeOrder::clear_ordervolume() {
  ordervolume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_ordervolume() const {
  return ordervolume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::ordervolume() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.orderVolume)
  return _internal_ordervolume();
}
inline void TradeOrder::_internal_set_ordervolume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ordervolume_ = value;
}
inline void TradeOrder::set_ordervolume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ordervolume(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.orderVolume)
}

// int32 nTime = 8;
inline void TradeOrder::clear_ntime() {
  ntime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_ntime() const {
  return ntime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::ntime() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.nTime)
  return _internal_ntime();
}
inline void TradeOrder::_internal_set_ntime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ntime_ = value;
}
inline void TradeOrder::set_ntime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ntime(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.nTime)
}

// int32 accountId = 9;
inline void TradeOrder::clear_accountid() {
  accountid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::accountid() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.accountId)
  return _internal_accountid();
}
inline void TradeOrder::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  accountid_ = value;
}
inline void TradeOrder::set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.accountId)
}

// string tag = 10;
inline void TradeOrder::clear_tag() {
  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeOrder::tag() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.tag)
  return _internal_tag();
}
inline void TradeOrder::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.tag)
}
inline std::string* TradeOrder::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:mam.TradeOrder.tag)
  return _internal_mutable_tag();
}
inline const std::string& TradeOrder::_internal_tag() const {
  return tag_.Get();
}
inline void TradeOrder::_internal_set_tag(const std::string& value) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeOrder::set_tag(std::string&& value) {
  
  tag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.TradeOrder.tag)
}
inline void TradeOrder::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.TradeOrder.tag)
}
inline void TradeOrder::set_tag(const char* value,
    size_t size) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.TradeOrder.tag)
}
inline std::string* TradeOrder::_internal_mutable_tag() {
  
  return tag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeOrder::release_tag() {
  // @@protoc_insertion_point(field_release:mam.TradeOrder.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeOrder::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.TradeOrder.tag)
}

// int32 timeout = 11;
inline void TradeOrder::clear_timeout() {
  timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::timeout() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.timeout)
  return _internal_timeout();
}
inline void TradeOrder::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeout_ = value;
}
inline void TradeOrder::set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.timeout)
}

// bool force = 12;
inline void TradeOrder::clear_force() {
  force_ = false;
}
inline bool TradeOrder::_internal_force() const {
  return force_;
}
inline bool TradeOrder::force() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.force)
  return _internal_force();
}
inline void TradeOrder::_internal_set_force(bool value) {
  
  force_ = value;
}
inline void TradeOrder::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.force)
}

// int64 createTime = 13;
inline void TradeOrder::clear_createtime() {
  createtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::_internal_createtime() const {
  return createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::createtime() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.createTime)
  return _internal_createtime();
}
inline void TradeOrder::_internal_set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createtime_ = value;
}
inline void TradeOrder::set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.createTime)
}

// int64 submitTime = 14;
inline void TradeOrder::clear_submittime() {
  submittime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::_internal_submittime() const {
  return submittime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::submittime() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.submitTime)
  return _internal_submittime();
}
inline void TradeOrder::_internal_set_submittime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  submittime_ = value;
}
inline void TradeOrder::set_submittime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_submittime(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.submitTime)
}

// int64 acceptTime = 15;
inline void TradeOrder::clear_accepttime() {
  accepttime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::_internal_accepttime() const {
  return accepttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::accepttime() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.acceptTime)
  return _internal_accepttime();
}
inline void TradeOrder::_internal_set_accepttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  accepttime_ = value;
}
inline void TradeOrder::set_accepttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_accepttime(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.acceptTime)
}

// int64 closeTime = 16;
inline void TradeOrder::clear_closetime() {
  closetime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::_internal_closetime() const {
  return closetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::closetime() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.closeTime)
  return _internal_closetime();
}
inline void TradeOrder::_internal_set_closetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  closetime_ = value;
}
inline void TradeOrder::set_closetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_closetime(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.closeTime)
}

// int32 dealPrice = 17;
inline void TradeOrder::clear_dealprice() {
  dealprice_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_dealprice() const {
  return dealprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::dealprice() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.dealPrice)
  return _internal_dealprice();
}
inline void TradeOrder::_internal_set_dealprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dealprice_ = value;
}
inline void TradeOrder::set_dealprice(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dealprice(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.dealPrice)
}

// int32 dealVolume = 18;
inline void TradeOrder::clear_dealvolume() {
  dealvolume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_dealvolume() const {
  return dealvolume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::dealvolume() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.dealVolume)
  return _internal_dealvolume();
}
inline void TradeOrder::_internal_set_dealvolume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dealvolume_ = value;
}
inline void TradeOrder::set_dealvolume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dealvolume(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.dealVolume)
}

// .mam.OrderStatusType status = 19;
inline void TradeOrder::clear_status() {
  status_ = 0;
}
inline ::mam::OrderStatusType TradeOrder::_internal_status() const {
  return static_cast< ::mam::OrderStatusType >(status_);
}
inline ::mam::OrderStatusType TradeOrder::status() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.status)
  return _internal_status();
}
inline void TradeOrder::_internal_set_status(::mam::OrderStatusType value) {
  
  status_ = value;
}
inline void TradeOrder::set_status(::mam::OrderStatusType value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.status)
}

// .mam.TradeOrderErrorCode errCode = 20;
inline void TradeOrder::clear_errcode() {
  errcode_ = 0;
}
inline ::mam::TradeOrderErrorCode TradeOrder::_internal_errcode() const {
  return static_cast< ::mam::TradeOrderErrorCode >(errcode_);
}
inline ::mam::TradeOrderErrorCode TradeOrder::errcode() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.errCode)
  return _internal_errcode();
}
inline void TradeOrder::_internal_set_errcode(::mam::TradeOrderErrorCode value) {
  
  errcode_ = value;
}
inline void TradeOrder::set_errcode(::mam::TradeOrderErrorCode value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.errCode)
}

// string errDetail = 21;
inline void TradeOrder::clear_errdetail() {
  errdetail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeOrder::errdetail() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.errDetail)
  return _internal_errdetail();
}
inline void TradeOrder::set_errdetail(const std::string& value) {
  _internal_set_errdetail(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.errDetail)
}
inline std::string* TradeOrder::mutable_errdetail() {
  // @@protoc_insertion_point(field_mutable:mam.TradeOrder.errDetail)
  return _internal_mutable_errdetail();
}
inline const std::string& TradeOrder::_internal_errdetail() const {
  return errdetail_.Get();
}
inline void TradeOrder::_internal_set_errdetail(const std::string& value) {
  
  errdetail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeOrder::set_errdetail(std::string&& value) {
  
  errdetail_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.TradeOrder.errDetail)
}
inline void TradeOrder::set_errdetail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errdetail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.TradeOrder.errDetail)
}
inline void TradeOrder::set_errdetail(const char* value,
    size_t size) {
  
  errdetail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.TradeOrder.errDetail)
}
inline std::string* TradeOrder::_internal_mutable_errdetail() {
  
  return errdetail_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeOrder::release_errdetail() {
  // @@protoc_insertion_point(field_release:mam.TradeOrder.errDetail)
  return errdetail_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeOrder::set_allocated_errdetail(std::string* errdetail) {
  if (errdetail != nullptr) {
    
  } else {
    
  }
  errdetail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errdetail,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.TradeOrder.errDetail)
}

// int32 tradedVolume = 22;
inline void TradeOrder::clear_tradedvolume() {
  tradedvolume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_tradedvolume() const {
  return tradedvolume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::tradedvolume() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.tradedVolume)
  return _internal_tradedvolume();
}
inline void TradeOrder::_internal_set_tradedvolume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tradedvolume_ = value;
}
inline void TradeOrder::set_tradedvolume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tradedvolume(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.tradedVolume)
}

// int32 fixing = 23;
inline void TradeOrder::clear_fixing() {
  fixing_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_fixing() const {
  return fixing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::fixing() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.fixing)
  return _internal_fixing();
}
inline void TradeOrder::_internal_set_fixing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fixing_ = value;
}
inline void TradeOrder::set_fixing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fixing(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.fixing)
}

// string traderId = 24;
inline void TradeOrder::clear_traderid() {
  traderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeOrder::traderid() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.traderId)
  return _internal_traderid();
}
inline void TradeOrder::set_traderid(const std::string& value) {
  _internal_set_traderid(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.traderId)
}
inline std::string* TradeOrder::mutable_traderid() {
  // @@protoc_insertion_point(field_mutable:mam.TradeOrder.traderId)
  return _internal_mutable_traderid();
}
inline const std::string& TradeOrder::_internal_traderid() const {
  return traderid_.Get();
}
inline void TradeOrder::_internal_set_traderid(const std::string& value) {
  
  traderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeOrder::set_traderid(std::string&& value) {
  
  traderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.TradeOrder.traderId)
}
inline void TradeOrder::set_traderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  traderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.TradeOrder.traderId)
}
inline void TradeOrder::set_traderid(const char* value,
    size_t size) {
  
  traderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.TradeOrder.traderId)
}
inline std::string* TradeOrder::_internal_mutable_traderid() {
  
  return traderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeOrder::release_traderid() {
  // @@protoc_insertion_point(field_release:mam.TradeOrder.traderId)
  return traderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeOrder::set_allocated_traderid(std::string* traderid) {
  if (traderid != nullptr) {
    
  } else {
    
  }
  traderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), traderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.TradeOrder.traderId)
}

// int32 originType = 25;
inline void TradeOrder::clear_origintype() {
  origintype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_origintype() const {
  return origintype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::origintype() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.originType)
  return _internal_origintype();
}
inline void TradeOrder::_internal_set_origintype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  origintype_ = value;
}
inline void TradeOrder::set_origintype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_origintype(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.originType)
}

// .mam.ExtendPriceType priceType = 26;
inline void TradeOrder::clear_pricetype() {
  pricetype_ = 0;
}
inline ::mam::ExtendPriceType TradeOrder::_internal_pricetype() const {
  return static_cast< ::mam::ExtendPriceType >(pricetype_);
}
inline ::mam::ExtendPriceType TradeOrder::pricetype() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.priceType)
  return _internal_pricetype();
}
inline void TradeOrder::_internal_set_pricetype(::mam::ExtendPriceType value) {
  
  pricetype_ = value;
}
inline void TradeOrder::set_pricetype(::mam::ExtendPriceType value) {
  _internal_set_pricetype(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.priceType)
}

// int64 matchedAmount = 27;
inline void TradeOrder::clear_matchedamount() {
  matchedamount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::_internal_matchedamount() const {
  return matchedamount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeOrder::matchedamount() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.matchedAmount)
  return _internal_matchedamount();
}
inline void TradeOrder::_internal_set_matchedamount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  matchedamount_ = value;
}
inline void TradeOrder::set_matchedamount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_matchedamount(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.matchedAmount)
}

// int32 Delay_Receive_Insert = 60;
inline void TradeOrder::clear_delay_receive_insert() {
  delay_receive_insert_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_delay_receive_insert() const {
  return delay_receive_insert_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::delay_receive_insert() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.Delay_Receive_Insert)
  return _internal_delay_receive_insert();
}
inline void TradeOrder::_internal_set_delay_receive_insert(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delay_receive_insert_ = value;
}
inline void TradeOrder::set_delay_receive_insert(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delay_receive_insert(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.Delay_Receive_Insert)
}

// int32 Delay_Insert_OnInsert = 61;
inline void TradeOrder::clear_delay_insert_oninsert() {
  delay_insert_oninsert_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_delay_insert_oninsert() const {
  return delay_insert_oninsert_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::delay_insert_oninsert() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.Delay_Insert_OnInsert)
  return _internal_delay_insert_oninsert();
}
inline void TradeOrder::_internal_set_delay_insert_oninsert(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delay_insert_oninsert_ = value;
}
inline void TradeOrder::set_delay_insert_oninsert(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delay_insert_oninsert(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.Delay_Insert_OnInsert)
}

// int32 Delay_Insert_Accept = 62;
inline void TradeOrder::clear_delay_insert_accept() {
  delay_insert_accept_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_delay_insert_accept() const {
  return delay_insert_accept_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::delay_insert_accept() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.Delay_Insert_Accept)
  return _internal_delay_insert_accept();
}
inline void TradeOrder::_internal_set_delay_insert_accept(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delay_insert_accept_ = value;
}
inline void TradeOrder::set_delay_insert_accept(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delay_insert_accept(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.Delay_Insert_Accept)
}

// int32 Delay_Accept_Match = 63;
inline void TradeOrder::clear_delay_accept_match() {
  delay_accept_match_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::_internal_delay_accept_match() const {
  return delay_accept_match_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TradeOrder::delay_accept_match() const {
  // @@protoc_insertion_point(field_get:mam.TradeOrder.Delay_Accept_Match)
  return _internal_delay_accept_match();
}
inline void TradeOrder::_internal_set_delay_accept_match(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delay_accept_match_ = value;
}
inline void TradeOrder::set_delay_accept_match(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delay_accept_match(value);
  // @@protoc_insertion_point(field_set:mam.TradeOrder.Delay_Accept_Match)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mam

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mam::OrderStatusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mam::OrderStatusType>() {
  return ::mam::OrderStatusType_descriptor();
}
template <> struct is_proto_enum< ::mam::TradeOrderErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mam::TradeOrderErrorCode>() {
  return ::mam::TradeOrderErrorCode_descriptor();
}
template <> struct is_proto_enum< ::mam::ExtendPriceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mam::ExtendPriceType>() {
  return ::mam::ExtendPriceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_struct_2eproto
